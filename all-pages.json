[{"type":"Page","content":[{"title":"Tests Brittleness and Verbosity slows you down","id":"tests-brittleness-and-verbosity-slows-you-down","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In ","type":"SimpleText"},{"url":"/blog/entry/testing-makes-you-faster-day-one","isFile":false,"type":"Link","content":[{"text":"Testing Makes You Faster Day one","type":"SimpleText"}]},{"text":" article I claimed that writing tests makes you faster.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"However, there are test patterns that most likely will slow you down and you need to be ready to handle them.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Writing tests for a simple logic with a simple input is a breeze. Take for example a test for a simple calculator class.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Two numeric inputs and we are done:","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class SimpleCalculatorTest {\n    @Test\n    public void zeroMultiply() {\n        SimpleCalculator simpleCalculator = new SimpleCalculator();\n        Assert.assertEquals(0, simpleCalculator.multiply(100.0, 0.0), 0.0);\n        Assert.assertEquals(0, simpleCalculator.multiply(-100.0, 0.0), 0.0);\n    }\n}","title":"SimpleCalculatorTest.java","type":"Snippet"},{"type":"Paragraph","content":[{"text":"However real apps require real domain, and real domain is rarely represented by a couple of numbers.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Let's take Finance as an example. It is full of types with multiple fields such as ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":", and it has a lot of business logic.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"One example of such business logic is ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":". Its job is to calculate profit based on the executed ","type":"SimpleText"},{"code":"Transactions","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"After consulting with the business people, we are ready to give our implementation a shot.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"Transaction","type":"InlinedCode"},{"text":" is a data class with a few fields (number of fields is reduced for simplicity).","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\npublic class Transaction {\n    private String id;\n    private double lot;\n    private double price;\n    private String symbol;\n\n    @Id\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public double getLot() {\n        return lot;\n    }\n\n    public void setLot(double lot) {\n        this.lot = lot;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public String getSymbol() {\n        return symbol;\n    }\n\n    public void setSymbol(String symbol) {\n        this.symbol = symbol;\n    }\n}","title":"Transaction.java","readMore":true,"readMoreVisibleLines":20,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Here is our first ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":" implementation, ready to be tested.","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport java.util.List;\n\npublic class ProfitCalculator {\n    public ProfitCalculator() {\n    }\n\n    public double calculate(List<Transaction> transactions) {\n        return 0;\n    }\n}","title":"ProfitCalculator.java","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And here is the first version of our test.","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class ProfitCalculatorWithoutEncapsulationTest {\n    private final ProfitCalculator profitCalculator = new ProfitCalculator();\n\n    @Test\n    public void profitShouldBeZeroIfNoLotsSet() {\n        Transaction t1 = new Transaction();\n        t1.setId(\"T1\");\n        t1.setSymbol(\"SYM.B\");\n        t1.setLot(0);\n        t1.setPrice(8);\n\n        Transaction t2 = new Transaction();\n        t1.setId(\"T2\");\n        t1.setSymbol(\"SYM.C\");\n        t1.setLot(0);\n        t1.setPrice(19);\n\n        assertEquals(0, profitCalculator.calculate(Arrays.asList(t1, t2)), 0);\n    }\n}","title":"ProfitCalculatorTest.java","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This test is already on the ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"verbose","type":"SimpleText"}]},{"text":" side. As requirements for the ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":" evolve, the number of setters","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we need to validate new business logic will grow, as will grow the number of instances that we may need to create.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Question: But why ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"verbose","type":"SimpleText"}]},{"text":" test can be bad?","type":"SimpleText"}]},{"title":"tap me to see why a verbose test can be a problem","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"A verbose test can be bad, because the boilerplate code used to setup the test makes it harder to read intent behind the test.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Additionally it may discourage you to write separate test scenario and instead you may want to clump test scenarios together and re-use the test data setup.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Test data re-use can lead to a random test being broken as you setup data for an unrelated scenario.","type":"SimpleText"}]}]}]}],"type":"Spoiler"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Verbosity","type":"SimpleText"}]},{"text":" is not the only potential problem here. The way ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instance is being constructed for testing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"purposes can lead to a maintenance burden.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The First iteration of ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" class uses ","type":"SimpleText"},{"code":"setters","type":"InlinedCode"},{"text":" to set the data.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"A future iteration may switch to using fluent API instead of ","type":"SimpleText"},{"code":"setters","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"transaction(\"T1\")\n .symbol(\"SYM.B\")\n .lot(0)\n .price(0);","title":"fluent API","entry":"createTransaction","bodyOnly":true,"removeReturn":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"From the ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":"'s perspective the way ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instances are created is irrelevant as it doesn't affect the calculation logic.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"But refactoring ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" will break ","type":"SimpleText"},{"code":"ProfitCalculatorTest","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"Transaction","type":"InlinedCode"},{"text":" is going to be used in other tests. As the number of tests that use ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instances increases you will be more and more reluctant","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to do refactoring. All your tests that create ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instances are ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"brittle","type":"SimpleText"}]},{"text":" tests now.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"They are ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"brittle","type":"SimpleText"}]},{"text":" because they won't survive ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" refactoring.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If you ever want to refactor ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" class you will have two choices:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Refactor and waste time fixing tests.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Convince yourself that ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" is good as it is.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Neither is a good choice.","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"I want you to have a way to protect your future self by encapsulating test input preparation","type":"SimpleText"}]}]}]},{"title":"Test Input Initial Encapsulation","id":"test-input-initial-encapsulation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Let's extract ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" creation code into ","type":"SimpleText"},{"code":"TestTransactions","type":"InlinedCode"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static com.example.portfolio.TestTransactions.createTransaction;\nimport static org.junit.Assert.assertEquals;\n\npublic class ProfitCalculatorWithBasicEncapsulationTest {\n    private final ProfitCalculator profitCalculator = new ProfitCalculator();\n\n    @Test\n    public void profitShouldBeZeroIfNoLotsSet() {\n        Transaction t1 = createTransaction(\"t1\", \"SYM.B\", 0, 8);\n        Transaction t2 = createTransaction(\"t2\", \"SYM.C\", 0, 19);\n\n        assertEquals(0, profitCalculator.calculate(Arrays.asList(t1, t2)), 0);\n    }\n}","title":"ProfitCalculatorTest.java with initial encapsulation","type":"Snippet"},{"lang":"java","snippet":"public static Transaction createTransaction(String id, String symbol, double lot, double price) {\n    Transaction transaction = new Transaction();\n    transaction.setId(id);\n    transaction.setSymbol(symbol);\n    transaction.setLot(lot);\n    transaction.setPrice(price);\n\n    return transaction;\n}","title":"TestTransactions.createTransaction","entry":"createTransaction","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Less verbosity. A good start.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Question: Can you still spot the problem?","type":"SimpleText"}]},{"title":"tap me to see remaining problems","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"As we add more properties to ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" class, some of the tests may need to set ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"extra transaction properties","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Additionally some of the properties will be completely ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"irrelevant to the business logic","type":"SimpleText"}]},{"text":" under a test, yet you will be forced to set them anyway.","type":"SimpleText"}]}]}]}],"type":"Spoiler"}]},{"title":"Test Input Encapsulation With Webtau Table Data","id":"test-input-encapsulation-with-webtau-table-data","type":"Section","content":[{"type":"Paragraph","content":[{"text":"I was dealing with test problems like above for years and eventually came up with a solution that fits my needs.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"I hope it will fit your needs as well. The solution is to use flexible data structure like ","type":"SimpleText"},{"url":"https://testingisdocumenting.org/webtau/reference/table-data","isFile":false,"type":"Link","content":[{"text":"Webtau TableData","type":"SimpleText"}]}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Test;\nimport org.testingisdocumenting.webtau.data.table.TableData;\n\nimport static com.example.portfolio.TestTransactions.createTransactions;\nimport static org.testingisdocumenting.webtau.WebTauCore.*; // table and underscores are defined in WebTauCore\n\npublic class ProfitCalculatorWithTableDataTest {\n    private final ProfitCalculator profitCalculator = new ProfitCalculator();\n\n    @Test\n    public void profitShouldBeZeroIfNoLotsSet() {\n        TableData transactionsData = table( \"id\", \"symbol\", \"lot\", \"price\",  // webtau TableData definition\n                                           ________________________________, // header and values separator\n                                            \"t1\", \"SYM.B\" ,  0.0 ,    8.0,\n                                            \"t2\", \"SYM.C\" ,  0.0 ,    19.0);\n\n        double margin = profitCalculator.calculate(createTransactions(transactionsData));\n        actual(margin).should(equal(0));\n    }\n}","title":"ProfitCalculatorTest.java with TableData encapsulation","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: ","type":"SimpleText"},{"url":"https://github.com/testingisdocumenting/webtau","isFile":false,"type":"Link","content":[{"text":"Webtau","type":"SimpleText"}]},{"text":" is open source project that I started as my answer to common testing problems I encountered.","type":"SimpleText"}]},{"lang":"java","snippet":"public static List<Transaction> createTransactions(TableData tableData) {\n    return tableData.rowsStream()\n            .map(row -> {\n                Transaction transaction = new Transaction();\n                transaction.setId(row.get(\"id\", genTransactionId())); // default value is auto generated\n                transaction.setSymbol(row.get(\"symbol\"));\n                transaction.setLot(row.get(\"lot\", 0.0)); // default value is hardcoded\n                transaction.setPrice(row.get(\"price\", 0.0));\n\n                return transaction;\n            })\n            .collect(toList());\n}\n\nprivate static String genTransactionId() {\n    return \"t-id-\" + idCount.incrementAndGet();\n}","title":"TestTransactions.createTransactions","commentsType":"inline","entries":["createTransactions","genTransactionId"],"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Notice how ","type":"SimpleText"},{"code":"createTransactions","type":"InlinedCode"},{"text":" defaults values when they are not present?","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"As a result of this, tests that don't need, say, ","type":"SimpleText"},{"code":"id","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"lot","type":"InlinedCode"},{"text":" are free to ignore them.","type":"SimpleText"}]},{"lang":"java","snippet":"@Test\npublic void profitShouldBeZeroIfNoLotsSet() {\n    TableData transactionsData = table(\"symbol\", \"lot\",\n                                       ________________,\n                                       \"SYM.B\" , 0.0,\n                                       \"SYM.C\" , 0.0);\n\n    double margin = profitCalculator.calculate(createTransactions(transactionsData));\n    actual(margin).should(equal(0));\n}","title":"ignored id,lot Transaction properties","commentsType":"inline","entry":"profitShouldBeZeroIfNoLotsSet","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If later a new required property will be added to ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":", you won't have to change all your existing tests.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Instead you will update ","type":"SimpleText"},{"code":"createTransaction","type":"InlinedCode"},{"text":" with a new default value.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"The only time you will have to change the tests to use the new property is if the new property is affecting the logic under test.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Essentially your test will use as little data to prove logic works as possible.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Question: Why it is important to minimize the data in your test?","type":"SimpleText"}]},{"title":"tap me to see why minimizing data is important","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Test is crucial to understanding ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"complex business logic","type":"SimpleText"}]}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The more data the harder it to comprehend the logic","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We want business people to look at our data sets (stay tuned to see a good way to expose test data to business)","type":"SimpleText"}]}]}]}],"type":"Spoiler"}]},{"title":"Try it out","id":"try-it-out","type":"Section","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-core</artifactId>\n    <version>1.21.1</version>\n    <scope>test</scope>\n</dependency>","title":"Maven dependency","type":"Snippet"},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"https://testingisdocumenting.org/webtau","isFile":false,"type":"Link","content":[{"text":"Webtau user guide","type":"SimpleText"}]}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"https://github.com/testingisdocumenting/webtau","isFile":false,"type":"Link","content":[{"text":"Webtau github","type":"SimpleText"}]}]}]}]}]},{"title":"Summary","id":"summary","type":"Section","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Tests input preparation can be verbose and brittle.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Identify core domain objects and provide a convenient way to create them.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Use as little data as necessary to prove logic correctness. Default the rest.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1589041766000,"tocItem":{"sectionTitle":"Entry","pageTitle":"Protect Your Future Self By Encapsulating Test Input Preparation","pageMeta":{"date":["2020-01-07"],"summary":["Examples of how to reduce verbosity and brittleness of your tests by encapsulating input preparation "]},"dirName":"entry","fileName":"protect-your-future-self-by-encapsulating-test-input-preparation","viewOnRelativePath":"articles/protect-your-future-self-by-encapsulating-test-input-preparation.md","pageSectionIdTitles":[{"title":"Tests Brittleness and Verbosity slows you down","id":"tests-brittleness-and-verbosity-slows-you-down"},{"title":"Test Input Initial Encapsulation","id":"test-input-initial-encapsulation"},{"title":"Test Input Encapsulation With Webtau Table Data","id":"test-input-encapsulation-with-webtau-table-data"},{"title":"Try it out","id":"try-it-out"},{"title":"Summary","id":"summary"}]}},{"type":"Page","content":[{"allAtOnce":true,"type":"Meta"},{"title":"Tests Are Here To Speed You Up","id":"tests-are-here-to-speed-you-up","type":"Section","content":[{"type":"Paragraph","content":[{"type":"Emphasis","content":[{"text":"\"I am not writing tests right now as they are going to slow me down\"","type":"SimpleText"}]},{"text":" is one of the most common excuses I heard in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the projects I worked on.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A lack of test writing experience can make you feel this way, but I think there is another,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"bigger reason for the perception that tests slow you down. I believe this reason is actually an untapped superpower:","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the power of exercising any piece of your software in ","type":"SimpleText"},{"code":"O(1)","type":"InlinedCode"},{"text":" keystrokes. By ","type":"SimpleText"},{"code":"O(1)","type":"InlinedCode"},{"text":" I mean that regardless of how big","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"your application becomes you will always be one button away of seeing the impact of your changes.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The superpower of having the tightest feedback loop.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let me try to explain.","type":"SimpleText"}]}]},{"title":"Building A Medieval Castle","id":"building-a-medieval-castle","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We are going to build a Castle, add features to it, and do a manual inspection of our creation as we go.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's start small. All we need is a single room and a throne to sit on.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"Perfect! So let's test it. Quickly get in, walk through the room, sit on the throne. All is good.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a few more rooms and a chest.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one","two"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"Our goal is to test if we can open that chest. This time we have to do a little bit more legwork.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This time, a simple check took us a few minutes longer.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a bit of security to our castle by adding keys and levers.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one","two","three"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"We have to test each door and to do that we need to go through our entire castle.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This makes a good test and a very important one.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For our next iteration we decided to add a new smart lock to our chest, so we can open it","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with our retina.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one","two","three","smartLock"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"We gotta test this feature. So we open a jar, to pick a key, to open first one door and then to open the other door, to pull the lever,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to run the stairs through the opened door. After catching our breath we try to open a chest.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A day later, we decide to add an auto lock after three failed attempt.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"And so we bring a friend who is not registered with our castle to open a jar, to pick a key,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to open a door, ... to ..., ..., to try to fail to open a chest.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A few iterations later the Security Department expressed the concern that our security could use an upgrade.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"A trap, puzzle and a dragon later we are ready to deploy.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one","two","three","smartLock","four","scissors"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"As before, we gotta test every new added Security feature. This is a good test and a very important one.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"We get caught in a trap, we jump over the trap, we play rock/paper/scissors to lose and to win, open the door,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"get eaten by the dragon, defeat the dragon and finally reach the chest. All tests passed.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Another development iteration passes and we decided to make ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"scissors","type":"SimpleText"}]},{"text":" game to be lefty friendly.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one","two","three","smartLock","four","scissorsLeft"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"And so we bring a friend who is a lefty, can jump over traps, to open a jar, to pick a key, to open a door, to jump over trap,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to open a door, to play rock/paper/scissors","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A day later we decided to add a fingerprint reader to our chest","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"And so we bring another friend who is a lefty, who is not registered with our castle, who can jump over traps,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"who won't be scared of a dragon, to open a jar, to pick a key, to open a door, to jump over trap, to open a door, to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"play rock/paper/scissors, to open a lever, to challenge a dragon, to put a finger to a chest.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"It should be clear by now that the more features we add to the castle, the more time it takes to do a check routine of a single feature.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"What is interesting is that the big portion of the time is spend getting to the feature we want to test and not the test itself.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Having said all that let's add another floor to the castle.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft","five","cardGameTwo"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"There is a new room where you can grab any gear you want and also play a ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"loot box","type":"SimpleText"}]},{"text":" game.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Don't worry we won't be running through the castle to test ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"loot box","type":"SimpleText"}]},{"text":" game algorithm (one entire castle run for a single try)","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Instead, we will create ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"teleports","type":"SimpleText"}]}]}]},{"title":"Teleports System","id":"teleports-system","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Instead of running around the castle, fighting dragons and jumping over traps, wouldn't it be easier to just appear","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in certain castle places to perform our routines?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a ","type":"SimpleText"},{"code":"teleport","type":"InlinedCode"},{"text":" right next to our new loot box game.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Next time we tweak loot algorithm we won't run around the castle, we just show up right where we need to be.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["t3","one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft","five","cardGameOne"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"Regardless of how big our castle will become, regardless of how many more traps and doors we will add between the castle entrance and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the loot floor, when we need to tweak and test our loot box algorithm, we just show up right there.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add ","type":"SimpleText"},{"code":"teleports","type":"InlinedCode"},{"text":" next to more points of interests, so next time when we tweak our features we can test them in an instance.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1576557518000","idsToReveal":["t1","t2","t3","one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft","five","cardGameOne"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"On our first day we only had one room and a throne at the end.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"But if on the same day we would add a teleport next to the throne - we would already be saving time running through the room.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Teleporting would make us faster day one.","type":"SimpleText"}]}]},{"title":"Implementing Teleports","id":"implementing-teleports","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The castle we have built is your app. And the main entrance is your language ","type":"SimpleText"},{"code":"main","type":"InlinedCode"},{"text":" function.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"One way to build teleports is to implement more than one ","type":"SimpleText"},{"code":"main","type":"InlinedCode"},{"text":" file with its own ","type":"SimpleText"},{"code":"main","type":"InlinedCode"},{"text":" function.","type":"SimpleText"}]},{"lang":"java","snippet":"class ChestTeleport {\n    public static void main() {\n        FingerAuth wrongAuth = new FingerAuth('wrongPerson');\n        SmartLockChest chest = new Chest();\n        assert !chest.open(wrongAuth);\n\n        FingerAuth validAuth = new FingerAuth('validPerson');\n        SmartLockChest chest = new Chest();\n        assert chest.open(validAuth));\n    }\n}\n","lineNumber":"","title":"Java example of Chest Teleport","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If you do just that it is already going to be a time saver. Any time you want to test a different portion of your castle, you just use a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"different teleport - a different file to execute.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"As the number of teleports grow it may become harder to sort through them to pick one to use.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Also teleports that are rarely used may become obsolete and point you to non existing parts of your castle.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Fortunately most languages have a testing framework to define and structure your teleports. Moreover they will make sure","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that teleports are still functioning.","type":"SimpleText"}]},{"lang":"java","snippet":"class ChestTest {\n    @Test\n    public void invalidFingerAuth() {\n        FingerAuth wrongAuth = new FingerAuth('wrongPerson');\n        SmartLockChest chest = new Chest();\n        Assert.assertFalse(chest.open(auth));\n    }\n\n    @Test\n    public void validFingerAuth() {\n        FingerAuth validAuth = new FingerAuth('validPerson');\n        SmartLockChest chest = new Chest();\n        Assert.assertTrue(chest.open(auth));\n    }\n}\n","lineNumber":"","title":"Java example of Chest Test","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This is the untapped power of tests I was talking about at the beginning - the power to exercise any piece of your software in one button press.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Regardless of how large or small you software is, tweaking your castle and validating it in a matters of seconds using","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an ever growing system of teleports will make you consistently productive on day one, day two, day hundred and day thousand.","type":"SimpleText"}]}]},{"title":"Real Life Boring Example","id":"real-life-boring-example","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You probably don't face castles and dragons every day at your work, so let me map it to a boring real life example.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a page to Enterprise Corporate Website. Page will list employees that have birthdays today. List must be in an alphabetic order.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Your fire up your IDE, write new page, deploy to DEV environment and test it. All looks good.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"A minute later you realize that your company doesn't have employees with the same last name that have birthdays on the same day.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"So how do you test this scenario?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You create a SysAdmin Ticket to request ","type":"SimpleText"},{"code":"WRITE","type":"InlinedCode"},{"text":" access to ","type":"SimpleText"},{"code":"DEV","type":"InlinedCode"},{"text":" database. Wait for approval. Restart the server and check your code.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: You may say, but hey, I can run my database locally! Sure, but not every big company and not every software has moved on to the greatest tech.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"And most excuses for not writing tests come from Enterprise engineers working on legacy applications. Plus it helps to make a point.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Your code is in production for a month. Everyone is happy, the page is a great success and have many daily visitors.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Hence a new request comes up: you need to change the sorting works.","type":"SimpleText"}]},{"columns":[{"content":[{"lang":"text","snippet":"Smith Bo\nSmith Bob\nSmith Bobed\nSmith Al\nSmith Alice\n","lineNumber":"","title":"instead of","type":"Snippet"}]},{"content":[{"lang":"text","snippet":"Smith Alice\nSmith Al\nSmith Bobed\nSmith Bob\nSmith Bo\n","lineNumber":"","title":"expected","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"Basically, still sort alphabetically, but put longer names at the top. It makes page looks better!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You fire up your ","type":"SimpleText"},{"code":"DEV","type":"InlinedCode"},{"text":" to realize the data is gone. You create a SysAdmin Ticket to request ","type":"SimpleText"},{"code":"WRITE","type":"InlinedCode"},{"text":" access to ","type":"SimpleText"},{"code":"DEV","type":"InlinedCode"},{"text":" database.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Wait for approval. Restart the server and start coding.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's rewind and try again. Instead of jumping to deploy and database manipulations, let's build a teleport.","type":"SimpleText"}]},{"lang":"java","snippet":"class EmployeesSorterTest {\n    @Test\n    public void matchingLastName() {\n        EmployeesList list = new EmployeesList();\n        list.add(\"Smith\", \"Bobed\");\n        list.add(\"Smith\", \"Alice\");\n        list.add(\"Smith\", \"Al\");\n        list.add(\"Smith\", \"Bob\");\n\n        EmployeesSorter employeesSorter = new EmployeesSorter();\n        EmployeesList sorted = employeesSorter.sort(list);\n        \n        Assert.assertEqual(\"Alice\", sorted.get(0).getFirstName());\n        Assert.assertEqual(\"Al\", sorted.get(1).getFirstName());\n        Assert.assertEqual(\"Bobed\", sorted.get(2).getFirstName());\n        Assert.assertEqual(\"Bob\", sorted.get(3).getFirstName());\n    }\n}\n","lineNumber":"","title":"Employees Sort Teleport","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Whether you implement ","type":"SimpleText"},{"code":"EmployeesSorterTest","type":"InlinedCode"},{"text":" first or ","type":"SimpleText"},{"code":"EmployeesSorter","type":"InlinedCode"},{"text":" is not that important to me.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"What important is you have a very tight feedback loop between your changes and the result.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"You bypass database admins (ahem, dragon, ahem, JK), web pages, internal auth systems and get straight to the business logic at hand.","type":"SimpleText"}]}]},{"title":"Summary","id":"summary","type":"Section","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Having a tight feedback loop is important for being efficient engineer.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Tests are your teleports into any part of your application.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Tests make you fast.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1578441844000,"tocItem":{"sectionTitle":"Entry","pageTitle":"Testing Makes You Faster Day One","pageMeta":{"date":["2019-12-19"],"summary":["How testing makes you fast day one and not in some unknown future"]},"dirName":"entry","fileName":"testing-makes-you-faster-day-one","viewOnRelativePath":"articles/testing-makes-you-faster-day-one.md","pageSectionIdTitles":[{"title":"Tests Are Here To Speed You Up","id":"tests-are-here-to-speed-you-up"},{"title":"Building A Medieval Castle","id":"building-a-medieval-castle"},{"title":"Teleports System","id":"teleports-system"},{"title":"Implementing Teleports","id":"implementing-teleports"},{"title":"Real Life Boring Example","id":"real-life-boring-example"},{"title":"Summary","id":"summary"}]}},{"type":"Page","content":[{"tocItems":[{"sectionTitle":"Entry","pageTitle":"Testing Makes You Faster Day One","pageMeta":{"date":["2019-12-19"],"summary":["How testing makes you fast day one and not in some unknown future"]},"dirName":"entry","fileName":"testing-makes-you-faster-day-one","viewOnRelativePath":"articles/testing-makes-you-faster-day-one.md","pageSectionIdTitles":[]},{"sectionTitle":"Entry","pageTitle":"Protect Your Future Self By Encapsulating Test Input Preparation","pageMeta":{"date":["2020-01-07"],"summary":["Examples of how to reduce verbosity and brittleness of your tests by encapsulating input preparation "]},"dirName":"entry","fileName":"protect-your-future-self-by-encapsulating-test-input-preparation","viewOnRelativePath":"articles/protect-your-future-self-by-encapsulating-test-input-preparation.md","pageSectionIdTitles":[]}],"type":"ListOfBlogEntries"}],"lastModifiedTime":1574730915000,"tocItem":{"sectionTitle":"","pageTitle":"Index","pageMeta":{},"dirName":"","fileName":"index","viewOnRelativePath":null,"pageSectionIdTitles":[]}}]