[{"type":"Page","content":[{"tocItems":[{"sectionTitle":"Entry","pageTitle":"Testing Makes You Faster Day One","pageMeta":{"date":["2019-12-19"],"summary":["How testing makes you fast day one and not in some unknown future"]},"dirName":"entry","fileName":"testing-makes-you-faster-day-one","viewOnRelativePath":"articles/testing-makes-you-faster-day-one.md","pageSectionIdTitles":[]},{"sectionTitle":"Entry","pageTitle":"Protect Your Future Self By Encapsulating Test Input Preparation","pageMeta":{"date":["2020-01-07"],"summary":["Examples of how to reduce verbosity and brittleness of your tests by encapsulating input preparation "]},"dirName":"entry","fileName":"protect-your-future-self-by-encapsulating-test-input-preparation","viewOnRelativePath":"articles/protect-your-future-self-by-encapsulating-test-input-preparation.md","pageSectionIdTitles":[]},{"sectionTitle":"Entry","pageTitle":"Ultimate End To End Test","pageMeta":{"date":["2020-10-30"],"summary":["Test across multiple layers like REST/GraphQL API, Web UI, CLI, Database. Use REPL to tighten feedback loop. "]},"dirName":"entry","fileName":"ultimate-end-to-end-test","viewOnRelativePath":"articles/ultimate-end-to-end-test.md","pageSectionIdTitles":[]}],"type":"ListOfBlogEntries"}],"lastModifiedTime":1590789750898,"tocItem":{"sectionTitle":"","pageTitle":"Testing Is Documenting","pageMeta":{},"dirName":"","fileName":"index","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"allAtOnce":true,"type":"Meta"},{"title":"Tests Are Here To Speed You Up","id":"tests-are-here-to-speed-you-up","type":"Section","content":[{"type":"Paragraph","content":[{"type":"Emphasis","content":[{"text":"\"I am not writing tests right now as they are going to slow me down\"","type":"SimpleText"}]},{"text":" is one of the most common excuses I heard in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the projects I worked on.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A lack of test writing experience can make you feel this way, but I think there is another,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"bigger reason for the perception that tests slow you down. I believe this reason is actually an untapped superpower:","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the power of exercising any piece of your software in ","type":"SimpleText"},{"code":"O(1)","type":"InlinedCode"},{"text":" keystrokes. By ","type":"SimpleText"},{"code":"O(1)","type":"InlinedCode"},{"text":" I mean that regardless of how big","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"your application becomes you will always be one button away of seeing the impact of your changes.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The superpower of having the tightest feedback loop.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let me try to explain.","type":"SimpleText"}]}]},{"title":"Building A Medieval Castle","id":"building-a-medieval-castle","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We are going to build a Castle, add features to it, and do a manual inspection of our creation as we go.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's start small. All we need is a single room and a throne to sit on.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"Perfect! So let's test it. Quickly get in, walk through the room, sit on the throne. All is good.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a few more rooms and a chest.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one","two"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"Our goal is to test if we can open that chest. This time we have to do a little bit more legwork.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This time, a simple check took us a few minutes longer.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a bit of security to our castle by adding keys and levers.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one","two","three"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"We have to test each door and to do that we need to go through our entire castle.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This makes a good test and a very important one.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For our next iteration we decided to add a new smart lock to our chest, so we can open it","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with our retina.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one","two","three","smartLock"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"We gotta test this feature. So we open a jar, to pick a key, to open first one door and then to open the other door, to pull the lever,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to run the stairs through the opened door. After catching our breath we try to open a chest.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A day later, we decide to add an auto lock after three failed attempt.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"And so we bring a friend who is not registered with our castle to open a jar, to pick a key,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to open a door, ... to ..., ..., to try to fail to open a chest.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A few iterations later the Security Department expressed the concern that our security could use an upgrade.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"A trap, puzzle and a dragon later we are ready to deploy.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one","two","three","smartLock","four","scissors"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"As before, we gotta test every new added Security feature. This is a good test and a very important one.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"We get caught in a trap, we jump over the trap, we play rock/paper/scissors to lose and to win, open the door,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"get eaten by the dragon, defeat the dragon and finally reach the chest. All tests passed.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Another development iteration passes and we decided to make ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"scissors","type":"SimpleText"}]},{"text":" game to be lefty friendly.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one","two","three","smartLock","four","scissorsLeft"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"And so we bring a friend who is a lefty, can jump over traps, to open a jar, to pick a key, to open a door, to jump over trap,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to open a door, to play rock/paper/scissors","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A day later we decided to add a fingerprint reader to our chest","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"And so we bring another friend who is a lefty, who is not registered with our castle, who can jump over traps,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"who won't be scared of a dragon, to open a jar, to pick a key, to open a door, to jump over trap, to open a door, to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"play rock/paper/scissors, to open a lever, to challenge a dragon, to put a finger to a chest.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"It should be clear by now that the more features we add to the castle, the more time it takes to do a check routine of a single feature.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"What is interesting is that the big portion of the time is spend getting to the feature we want to test and not the test itself.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Having said all that let's add another floor to the castle.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft","five","cardGameTwo"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"There is a new room where you can grab any gear you want and also play a ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"loot box","type":"SimpleText"}]},{"text":" game.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Don't worry we won't be running through the castle to test ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"loot box","type":"SimpleText"}]},{"text":" game algorithm (one entire castle run for a single try)","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Instead, we will create ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"teleports","type":"SimpleText"}]}]}]},{"title":"Teleports System","id":"teleports-system","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Instead of running around the castle, fighting dragons and jumping over traps, wouldn't it be easier to just appear","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in certain castle places to perform our routines?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a ","type":"SimpleText"},{"code":"teleport","type":"InlinedCode"},{"text":" right next to our new loot box game.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Next time we tweak loot algorithm we won't run around the castle, we just show up right where we need to be.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["t3","one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft","five","cardGameOne"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"Regardless of how big our castle will become, regardless of how many more traps and doors we will add between the castle entrance and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the loot floor, when we need to tweak and test our loot box algorithm, we just show up right there.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add ","type":"SimpleText"},{"code":"teleports","type":"InlinedCode"},{"text":" next to more points of interests, so next time when we tweak our features we can test them in an instance.","type":"SimpleText"}]},{"svgSrc":"/blog/assets/castle.svg?timestamp=1590789750897","idsToReveal":["t1","t2","t3","one","two","three","smartLock","smartLock","smartLockThumbs","four","scissorsLeft","five","cardGameOne"],"actualSize":true,"type":"Svg"},{"type":"Paragraph","content":[{"text":"On our first day we only had one room and a throne at the end.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"But if on the same day we would add a teleport next to the throne - we would already be saving time running through the room.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Teleporting would make us faster day one.","type":"SimpleText"}]}]},{"title":"Implementing Teleports","id":"implementing-teleports","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The castle we have built is your app. And the main entrance is your language ","type":"SimpleText"},{"code":"main","type":"InlinedCode"},{"text":" function.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"One way to build teleports is to implement more than one ","type":"SimpleText"},{"code":"main","type":"InlinedCode"},{"text":" file with its own ","type":"SimpleText"},{"code":"main","type":"InlinedCode"},{"text":" function.","type":"SimpleText"}]},{"lang":"java","snippet":"class ChestTeleport {\n    public static void main() {\n        FingerAuth wrongAuth = new FingerAuth('wrongPerson');\n        SmartLockChest chest = new Chest();\n        assert !chest.open(wrongAuth);\n\n        FingerAuth validAuth = new FingerAuth('validPerson');\n        SmartLockChest chest = new Chest();\n        assert chest.open(validAuth));\n    }\n}\n","lineNumber":"","title":"Java example of Chest Teleport","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If you do just that it is already going to be a time saver. Any time you want to test a different portion of your castle, you just use a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"different teleport - a different file to execute.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"As the number of teleports grow it may become harder to sort through them to pick one to use.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Also teleports that are rarely used may become obsolete and point you to non existing parts of your castle.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Fortunately most languages have a testing framework to define and structure your teleports. Moreover they will make sure","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that teleports are still functioning.","type":"SimpleText"}]},{"lang":"java","snippet":"class ChestTest {\n    @Test\n    public void invalidFingerAuth() {\n        FingerAuth wrongAuth = new FingerAuth('wrongPerson');\n        SmartLockChest chest = new Chest();\n        Assert.assertFalse(chest.open(auth));\n    }\n\n    @Test\n    public void validFingerAuth() {\n        FingerAuth validAuth = new FingerAuth('validPerson');\n        SmartLockChest chest = new Chest();\n        Assert.assertTrue(chest.open(auth));\n    }\n}\n","lineNumber":"","title":"Java example of Chest Test","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This is the untapped power of tests I was talking about at the beginning - the power to exercise any piece of your software in one button press.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Regardless of how large or small you software is, tweaking your castle and validating it in a matters of seconds using","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an ever growing system of teleports will make you consistently productive on day one, day two, day hundred and day thousand.","type":"SimpleText"}]}]},{"title":"Real Life Boring Example","id":"real-life-boring-example","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You probably don't face castles and dragons every day at your work, so let me map it to a boring real life example.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add a page to Enterprise Corporate Website. Page will list employees that have birthdays today. List must be in an alphabetic order.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Your fire up your IDE, write new page, deploy to DEV environment and test it. All looks good.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"A minute later you realize that your company doesn't have employees with the same last name that have birthdays on the same day.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"So how do you test this scenario?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You create a SysAdmin Ticket to request ","type":"SimpleText"},{"code":"WRITE","type":"InlinedCode"},{"text":" access to ","type":"SimpleText"},{"code":"DEV","type":"InlinedCode"},{"text":" database. Wait for approval. Restart the server and check your code.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: You may say, but hey, I can run my database locally! Sure, but not every big company and not every software has moved on to the greatest tech.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"And most excuses for not writing tests come from Enterprise engineers working on legacy applications. Plus it helps to make a point.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Your code is in production for a month. Everyone is happy, the page is a great success and have many daily visitors.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Hence a new request comes up: you need to change the sorting works.","type":"SimpleText"}]},{"columns":[{"content":[{"lang":"text","snippet":"Smith Bo\nSmith Bob\nSmith Bobed\nSmith Al\nSmith Alice\n","lineNumber":"","title":"instead of","type":"Snippet"}]},{"content":[{"lang":"text","snippet":"Smith Alice\nSmith Al\nSmith Bobed\nSmith Bob\nSmith Bo\n","lineNumber":"","title":"expected","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"Basically, still sort alphabetically, but put longer names at the top. It makes page looks better!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You fire up your ","type":"SimpleText"},{"code":"DEV","type":"InlinedCode"},{"text":" to realize the data is gone. You create a SysAdmin Ticket to request ","type":"SimpleText"},{"code":"WRITE","type":"InlinedCode"},{"text":" access to ","type":"SimpleText"},{"code":"DEV","type":"InlinedCode"},{"text":" database.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Wait for approval. Restart the server and start coding.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's rewind and try again. Instead of jumping to deploy and database manipulations, let's build a teleport.","type":"SimpleText"}]},{"lang":"java","snippet":"class EmployeesSorterTest {\n    @Test\n    public void matchingLastName() {\n        EmployeesList list = new EmployeesList();\n        list.add(\"Smith\", \"Bobed\");\n        list.add(\"Smith\", \"Alice\");\n        list.add(\"Smith\", \"Al\");\n        list.add(\"Smith\", \"Bob\");\n\n        EmployeesSorter employeesSorter = new EmployeesSorter();\n        EmployeesList sorted = employeesSorter.sort(list);\n        \n        Assert.assertEqual(\"Alice\", sorted.get(0).getFirstName());\n        Assert.assertEqual(\"Al\", sorted.get(1).getFirstName());\n        Assert.assertEqual(\"Bobed\", sorted.get(2).getFirstName());\n        Assert.assertEqual(\"Bob\", sorted.get(3).getFirstName());\n    }\n}\n","lineNumber":"","title":"Employees Sort Teleport","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Whether you implement ","type":"SimpleText"},{"code":"EmployeesSorterTest","type":"InlinedCode"},{"text":" first or ","type":"SimpleText"},{"code":"EmployeesSorter","type":"InlinedCode"},{"text":" is not that important to me.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"What important is you have a very tight feedback loop between your changes and the result.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"You bypass database admins (ahem, dragon, ahem, JK), web pages, internal auth systems and get straight to the business logic at hand.","type":"SimpleText"}]}]},{"title":"Summary","id":"summary","type":"Section","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Having a tight feedback loop is important for being efficient engineer.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Tests are your teleports into any part of your application.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Tests make you fast.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1590789750897,"tocItem":{"sectionTitle":"Entry","pageTitle":"Testing Makes You Faster Day One","pageMeta":{"date":["2019-12-19"],"summary":["How testing makes you fast day one and not in some unknown future"]},"dirName":"entry","fileName":"testing-makes-you-faster-day-one","viewOnRelativePath":"articles/testing-makes-you-faster-day-one.md","pageSectionIdTitles":[{"title":"Tests Are Here To Speed You Up","id":"tests-are-here-to-speed-you-up"},{"title":"Building A Medieval Castle","id":"building-a-medieval-castle"},{"title":"Teleports System","id":"teleports-system"},{"title":"Implementing Teleports","id":"implementing-teleports"},{"title":"Real Life Boring Example","id":"real-life-boring-example"},{"title":"Summary","id":"summary"}]}},{"type":"Page","content":[{"title":"Tests Brittleness and Verbosity slows you down","id":"tests-brittleness-and-verbosity-slows-you-down","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In ","type":"SimpleText"},{"url":"/blog/entry/testing-makes-you-faster-day-one","isFile":false,"type":"Link","content":[{"text":"Testing Makes You Faster Day one","type":"SimpleText"}]},{"text":" article I claimed that writing tests makes you faster.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"However, there are test patterns that most likely will slow you down and you need to be ready to handle them.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Writing tests for a simple logic with a simple input is a breeze. Take for example a test for a simple calculator class.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Two numeric inputs and we are done:","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class SimpleCalculatorTest {\n    @Test\n    public void zeroMultiply() {\n        SimpleCalculator simpleCalculator = new SimpleCalculator();\n        Assert.assertEquals(0, simpleCalculator.multiply(100.0, 0.0), 0.0);\n        Assert.assertEquals(0, simpleCalculator.multiply(-100.0, 0.0), 0.0);\n    }\n}","title":"SimpleCalculatorTest.java","type":"Snippet"},{"type":"Paragraph","content":[{"text":"However real apps require real domain, and real domain is rarely represented by a couple of numbers.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Let's take Finance as an example. It is full of types with multiple fields such as ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":", and it has a lot of business logic.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"One example of such business logic is ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":". Its job is to calculate profit based on the executed ","type":"SimpleText"},{"code":"Transactions","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"After consulting with the business people, we are ready to give our implementation a shot.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"Transaction","type":"InlinedCode"},{"text":" is a data class with a few fields (number of fields is reduced for simplicity).","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\npublic class Transaction {\n    private String id;\n    private double lot;\n    private double price;\n    private String symbol;\n\n    @Id\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public double getLot() {\n        return lot;\n    }\n\n    public void setLot(double lot) {\n        this.lot = lot;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public String getSymbol() {\n        return symbol;\n    }\n\n    public void setSymbol(String symbol) {\n        this.symbol = symbol;\n    }\n}","title":"Transaction.java","readMore":true,"readMoreVisibleLines":20,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Here is our first ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":" implementation, ready to be tested.","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport java.util.List;\n\npublic class ProfitCalculator {\n    public ProfitCalculator() {\n    }\n\n    public double calculate(List<Transaction> transactions) {\n        return 0;\n    }\n}","title":"ProfitCalculator.java","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And here is the first version of our test.","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class ProfitCalculatorWithoutEncapsulationTest {\n    private final ProfitCalculator profitCalculator = new ProfitCalculator();\n\n    @Test\n    public void profitShouldBeZeroIfNoLotsSet() {\n        Transaction t1 = new Transaction();\n        t1.setId(\"T1\");\n        t1.setSymbol(\"SYM.B\");\n        t1.setLot(0);\n        t1.setPrice(8);\n\n        Transaction t2 = new Transaction();\n        t1.setId(\"T2\");\n        t1.setSymbol(\"SYM.C\");\n        t1.setLot(0);\n        t1.setPrice(19);\n\n        assertEquals(0, profitCalculator.calculate(Arrays.asList(t1, t2)), 0);\n    }\n}","title":"ProfitCalculatorTest.java","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This test is already on the ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"verbose","type":"SimpleText"}]},{"text":" side. As requirements for the ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":" evolve, the number of setters","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we need to validate new business logic will grow, as will grow the number of instances that we may need to create.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Question: But why ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"verbose","type":"SimpleText"}]},{"text":" test can be bad?","type":"SimpleText"}]},{"title":"tap me to see why a verbose test can be a problem","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"A verbose test can be bad, because the boilerplate code used to setup the test makes it harder to read intent behind the test.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Additionally it may discourage you to write separate test scenario and instead you may want to clump test scenarios together and re-use the test data setup.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Test data re-use can lead to a random test being broken as you setup data for an unrelated scenario.","type":"SimpleText"}]}]}]}],"type":"Spoiler"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Verbosity","type":"SimpleText"}]},{"text":" is not the only potential problem here. The way ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instance is being constructed for testing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"purposes can lead to a maintenance burden.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The First iteration of ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" class uses ","type":"SimpleText"},{"code":"setters","type":"InlinedCode"},{"text":" to set the data.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"A future iteration may switch to using fluent API instead of ","type":"SimpleText"},{"code":"setters","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"transaction(\"T1\")\n .symbol(\"SYM.B\")\n .lot(0)\n .price(0);","title":"fluent API","entry":"createTransaction","bodyOnly":true,"removeReturn":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"From the ","type":"SimpleText"},{"code":"ProfitCalculator","type":"InlinedCode"},{"text":"'s perspective the way ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instances are created is irrelevant as it doesn't affect the calculation logic.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"But refactoring ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" will break ","type":"SimpleText"},{"code":"ProfitCalculatorTest","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"Transaction","type":"InlinedCode"},{"text":" is going to be used in other tests. As the number of tests that use ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instances increases you will be more and more reluctant","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to do refactoring. All your tests that create ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" instances are ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"brittle","type":"SimpleText"}]},{"text":" tests now.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"They are ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"brittle","type":"SimpleText"}]},{"text":" because they won't survive ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" refactoring.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If you ever want to refactor ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" class you will have two choices:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Refactor and waste time fixing tests.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Convince yourself that ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" is good as it is.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Neither is a good choice.","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"I want you to have a way to protect your future self by encapsulating test input preparation","type":"SimpleText"}]}]}]},{"title":"Test Input Initial Encapsulation","id":"test-input-initial-encapsulation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Let's extract ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" creation code into ","type":"SimpleText"},{"code":"TestTransactions","type":"InlinedCode"}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static com.example.portfolio.TestTransactions.createTransaction;\nimport static org.junit.Assert.assertEquals;\n\npublic class ProfitCalculatorWithBasicEncapsulationTest {\n    private final ProfitCalculator profitCalculator = new ProfitCalculator();\n\n    @Test\n    public void profitShouldBeZeroIfNoLotsSet() {\n        Transaction t1 = createTransaction(\"t1\", \"SYM.B\", 0, 8);\n        Transaction t2 = createTransaction(\"t2\", \"SYM.C\", 0, 19);\n\n        assertEquals(0, profitCalculator.calculate(Arrays.asList(t1, t2)), 0);\n    }\n}","title":"ProfitCalculatorTest.java with initial encapsulation","type":"Snippet"},{"lang":"java","snippet":"public static Transaction createTransaction(String id, String symbol, double lot, double price) {\n    Transaction transaction = new Transaction();\n    transaction.setId(id);\n    transaction.setSymbol(symbol);\n    transaction.setLot(lot);\n    transaction.setPrice(price);\n\n    return transaction;\n}","title":"TestTransactions.createTransaction","entry":"createTransaction","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Less verbosity. A good start.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Question: Can you still spot the problem?","type":"SimpleText"}]},{"title":"tap me to see remaining problems","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"As we add more properties to ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":" class, some of the tests may need to set ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"extra transaction properties","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Additionally some of the properties will be completely ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"irrelevant to the business logic","type":"SimpleText"}]},{"text":" under a test, yet you will be forced to set them anyway.","type":"SimpleText"}]}]}]}],"type":"Spoiler"}]},{"title":"Test Input Encapsulation With Webtau Table Data","id":"test-input-encapsulation-with-webtau-table-data","type":"Section","content":[{"type":"Paragraph","content":[{"text":"I was dealing with test problems like above for years and eventually came up with a solution that fits my needs.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"I hope it will fit your needs as well. The solution is to use flexible data structure like ","type":"SimpleText"},{"url":"https://testingisdocumenting.org/webtau/reference/table-data","isFile":false,"type":"Link","content":[{"text":"Webtau TableData","type":"SimpleText"}]}]},{"lang":"java","snippet":"package com.example.portfolio;\n\nimport org.junit.Test;\nimport org.testingisdocumenting.webtau.data.table.TableData;\n\nimport static com.example.portfolio.TestTransactions.createTransactions;\nimport static org.testingisdocumenting.webtau.WebTauCore.*; // table and underscores are defined in WebTauCore\n\npublic class ProfitCalculatorWithTableDataTest {\n    private final ProfitCalculator profitCalculator = new ProfitCalculator();\n\n    @Test\n    public void profitShouldBeZeroIfNoLotsSet() {\n        TableData transactionsData = table( \"id\", \"symbol\", \"lot\", \"price\",  // webtau TableData definition\n                                           ________________________________, // header and values separator\n                                            \"t1\", \"SYM.B\" ,  0.0 ,    8.0,\n                                            \"t2\", \"SYM.C\" ,  0.0 ,    19.0);\n\n        double margin = profitCalculator.calculate(createTransactions(transactionsData));\n        actual(margin).should(equal(0));\n    }\n}","title":"ProfitCalculatorTest.java with TableData encapsulation","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: ","type":"SimpleText"},{"url":"https://github.com/testingisdocumenting/webtau","isFile":false,"type":"Link","content":[{"text":"Webtau","type":"SimpleText"}]},{"text":" is open source project that I started as my answer to common testing problems I encountered.","type":"SimpleText"}]},{"lang":"java","snippet":"public static List<Transaction> createTransactions(TableData tableData) {\n    return tableData.rowsStream()\n            .map(row -> {\n                Transaction transaction = new Transaction();\n                transaction.setId(row.get(\"id\", genTransactionId())); // default value is auto generated\n                transaction.setSymbol(row.get(\"symbol\"));\n                transaction.setLot(row.get(\"lot\", 0.0)); // default value is hardcoded\n                transaction.setPrice(row.get(\"price\", 0.0));\n\n                return transaction;\n            })\n            .collect(toList());\n}\n\nprivate static String genTransactionId() {\n    return \"t-id-\" + idCount.incrementAndGet();\n}","title":"TestTransactions.createTransactions","commentsType":"inline","entries":["createTransactions","genTransactionId"],"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Notice how ","type":"SimpleText"},{"code":"createTransactions","type":"InlinedCode"},{"text":" defaults values when they are not present?","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"As a result of this, tests that don't need, say, ","type":"SimpleText"},{"code":"id","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"lot","type":"InlinedCode"},{"text":" are free to ignore them.","type":"SimpleText"}]},{"lang":"java","snippet":"@Test\npublic void profitShouldBeZeroIfNoLotsSet() {\n    TableData transactionsData = table(\"symbol\", \"lot\",\n                                       ________________,\n                                       \"SYM.B\" , 0.0,\n                                       \"SYM.C\" , 0.0);\n\n    double margin = profitCalculator.calculate(createTransactions(transactionsData));\n    actual(margin).should(equal(0));\n}","title":"ignored id,lot Transaction properties","commentsType":"inline","entry":"profitShouldBeZeroIfNoLotsSet","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If later a new required property will be added to ","type":"SimpleText"},{"code":"Transaction","type":"InlinedCode"},{"text":", you won't have to change all your existing tests.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Instead you will update ","type":"SimpleText"},{"code":"createTransaction","type":"InlinedCode"},{"text":" with a new default value.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"The only time you will have to change the tests to use the new property is if the new property is affecting the logic under test.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Essentially your test will use as little data to prove logic works as possible.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Question: Why it is important to minimize the data in your test?","type":"SimpleText"}]},{"title":"tap me to see why minimizing data is important","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Test is crucial to understanding ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"complex business logic","type":"SimpleText"}]}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The more data the harder it to comprehend the logic","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We want business people to look at our data sets (stay tuned to see a good way to expose test data to business)","type":"SimpleText"}]}]}]}],"type":"Spoiler"}]},{"title":"Try it out","id":"try-it-out","type":"Section","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-core</artifactId>\n    <version>1.25-SNAPSHOT</version>\n    <scope>test</scope>\n</dependency>","title":"Maven dependency","type":"Snippet"},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"https://testingisdocumenting.org/webtau","isFile":false,"type":"Link","content":[{"text":"Webtau user guide","type":"SimpleText"}]}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"https://github.com/testingisdocumenting/webtau","isFile":false,"type":"Link","content":[{"text":"Webtau github","type":"SimpleText"}]}]}]}]}]},{"title":"Summary","id":"summary","type":"Section","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Tests input preparation can be verbose and brittle.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Identify core domain objects and provide a convenient way to create them.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Use as little data as necessary to prove logic correctness. Default the rest.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1590789750897,"tocItem":{"sectionTitle":"Entry","pageTitle":"Protect Your Future Self By Encapsulating Test Input Preparation","pageMeta":{"date":["2020-01-07"],"summary":["Examples of how to reduce verbosity and brittleness of your tests by encapsulating input preparation "]},"dirName":"entry","fileName":"protect-your-future-self-by-encapsulating-test-input-preparation","viewOnRelativePath":"articles/protect-your-future-self-by-encapsulating-test-input-preparation.md","pageSectionIdTitles":[{"title":"Tests Brittleness and Verbosity slows you down","id":"tests-brittleness-and-verbosity-slows-you-down"},{"title":"Test Input Initial Encapsulation","id":"test-input-initial-encapsulation"},{"title":"Test Input Encapsulation With Webtau Table Data","id":"test-input-encapsulation-with-webtau-table-data"},{"title":"Try it out","id":"try-it-out"},{"title":"Summary","id":"summary"}]}},{"type":"Page","content":[{"title":"WebTau","id":"webtau","type":"Section","content":[{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"WebTau stands for Web Tests Automation. An open source tool, API, and a framework designed to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"simplify testing on multiple levels.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"What do I mean by multiple levels? Apps I develop often have these layers:","type":"SimpleText"}]},{"presentationBulletListType":"RevealBoxes","type":"Meta"},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"REST/GraphQL API","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Web UI","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Command Line","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Database","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"When I write end-to-end tests I test on one layer, and validate on the other.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"I write a test for a command line tool and validate that CLI updates REST resource.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"I write a test for Web UI and use GraphQL API to set up the initial data.","type":"SimpleText"}]}]},{"title":"Testing Game Store","id":"testing-game-store","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We are going to test Game Store product. It has Web UI where you can see what games are available.","type":"SimpleText"}]},{"fit":true,"imageSrc":"/blog/game-store-main-page.png","timestamp":1604503430959,"shapes":[],"width":2000.0,"height":1354.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"It has CLI tool to help admins to manage the product.","type":"SimpleText"}]},{"command":"gs-admin list","paramsToHighlight":[],"meta":{"stickySlide":"top 20%"},"type":"CliCommand"},{"title":"admin tool cli output","lines":["\u001B[36mList of games\u001B[0m","\u001B[35mg1 \u001B[33m        Slay The Spire \u001B[32m       card rpg \u001B[33m20.0\u001B[0m","\u001B[35mg2 \u001B[33m        Civilization 6 \u001B[32m       strategy \u001B[33m60.0\u001B[0m","\u001B[35mg3 \u001B[33m                  Doom \u001B[32m            fps \u001B[33m60.0\u001B[0m","\u001B[35mg4 \u001B[33m          Last Of Us 2 \u001B[32madventure drama \u001B[33m60.0\u001B[0m","\u001B[35mg5 \u001B[33m                Inside \u001B[32m      adventure \u001B[33m10.0\u001B[0m","\u001B[35mg6 \u001B[33m           Hearthstone \u001B[32m           card \u001B[33m 0.0\u001B[0m","\u001B[35mg7 \u001B[33m            Division 2 \u001B[32m    shooter rpg \u001B[33m30.0\u001B[0m","\u001B[35mg8 \u001B[33mAssassin Creed Odyssey \u001B[32m            rpg \u001B[33m40.0\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"It has GraphQL and REST API to manage data.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def query = '''\nquery {\n  game(id: \"g1\") {\n    title\n    type\n  }\n}\n'''","title":"GraphQL query","startLine":"query-definition-start","endLine":"query-definition-end","excludeStartEnd":true,"meta":{"stickySlide":"left"},"type":"Snippet"},{"title":"response","data":{"data":{"game":{"title":"Slay The Spire","type":"card rpg"}}},"paths":[],"type":"Json"},{"type":"Paragraph","content":[{"text":"Game Store product puts all the data into a database.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Below we are going to see how webtau lets you seamlessly test on different layers and use other layers to help with data validation.","type":"SimpleText"}]}]},{"title":"WebTau Introduction","id":"webtau-introduction","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Before writing a test for Game Store, we are going to use ","type":"SimpleText"},{"url":"https://jsonplaceholder.typicode.com/","isFile":false,"type":"Link","content":[{"text":"JSON Placeholder","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"website to demo basic ","type":"SimpleText"},{"code":"webtau","type":"InlinedCode"},{"text":" parts.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Our goal is to get and validate a response from this end point:","type":"SimpleText"}]},{"lang":"txt","snippet":"https://jsonplaceholder.typicode.com/todos/1","title":"Target API","meta":{"stickySlide":"top 20%"},"type":"Snippet"},{"title":"Response","pathsFile":"basic-http-invocation/paths.json","meta":{"stickySlide":"left"},"data":{"userId":1,"id":1,"title":"delectus aut autem","completed":false},"paths":["root.title","root.completed"],"type":"Json"},{"type":"Paragraph","content":[{"text":"In webtau use ","type":"SimpleText"},{"code":"scenario","type":"InlinedCode"},{"text":" to define a test. Let's create a file and define our first scenario:","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('basic http invocation') {\n    http.get('https://jsonplaceholder.typicode.com/todos/1') {\n        body.title.should == 'delectus aut autem' // automatic mapping of a field name to a JSON response\n        completed.should == false // specifying body is optional\n    }\n}","title":"httpBasics.groovy","startLine":"basic-http-invocation","endLine":"basic-http-invocation-end","excludeStartEnd":true,"excludeRegexp":"http.doc","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: Most of the time we are going to use webtau as both API and command line runner. You can use ","type":"SimpleText"},{"code":"webtau","type":"InlinedCode"},{"text":" with","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"JUnit5","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"JUnit4","type":"InlinedCode"},{"text":" and pure Java if you prefer.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To run a test, assuming ","type":"SimpleText"},{"code":"webtau","type":"InlinedCode"},{"text":" is in ","type":"SimpleText"},{"code":"PATH","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"command":"webtau httpBasics.groovy","paramsToHighlight":[],"meta":{"stickySlide":"top 15%"},"type":"CliCommand"},{"title":"Execution Output","startLine":"basic http invocation","endLine":"executed HTTP GET","highlight":[2,12,21],"lines":["\u001B[34mbasic http invocation \u001B[35m(httpBasics.groovy)\u001B[0m","\u001B[33m> \u001B[34mexecuting HTTP GET \u001B[35mhttps://jsonplaceholder.typicode.com/todos/1\u001B[0m","  \u001B[32m. \u001B[0m\u001B[1mbody.title \u001B[32mequals \"delectus aut autem\"","      matches:","      ","      body.title:   actual: \"delectus aut autem\" <java.lang.String>","                  expected: \"delectus aut autem\" <java.lang.String>\u001B[33m (\u001B[32m36ms\u001B[33m)\u001B[0m","  \u001B[32m. \u001B[0m\u001B[1mbody.completed \u001B[32mequals false","      matches:","      ","      body.completed:   actual: false <java.lang.Boolean>","                      expected: false <java.lang.Boolean>\u001B[33m (\u001B[32m2ms\u001B[33m)\u001B[0m","  \u001B[32m. \u001B[0m\u001B[1mheader.statusCode \u001B[32mequals 200","      matches:","      ","      header.statusCode:   actual: 200 <java.lang.Integer>","                         expected: 200 <java.lang.Integer>\u001B[33m (\u001B[32m0ms\u001B[33m)\u001B[0m","\u001B[33mresponse\u001B[36m (application/json; charset=utf-8):\u001B[0m","\u001B[33m{\u001B[0m","  \u001B[35m\"userId\": \u001B[36m1\u001B[33m,\u001B[0m","  \u001B[35m\"id\": \u001B[36m1\u001B[33m,\u001B[0m","  \u001B[35m\"title\": \u001B[32m\u001B[1m\u001B[32m__\"delectus aut autem\"__\u001B[33m,\u001B[0m","  \u001B[35m\"completed\": \u001B[36m\u001B[1m\u001B[32m__false__\u001B[0m","\u001B[33m}\u001B[0m","\u001B[32m. \u001B[34mexecuted HTTP GET \u001B[35mhttps://jsonplaceholder.typicode.com/todos/1\u001B[33m (\u001B[32m317ms\u001B[33m)\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"Webtau captures everything that happens in a test:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"commands there were ran","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"assertions that were made (both passed and failed)","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"values that were checked (","type":"SimpleText"},{"code":"__","type":"InlinedCode"},{"text":" in the console output)","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"All the captured data is available after test run inside a rich html report that we are going to look at later.","type":"SimpleText"}]}]},{"title":"Basic Configuration","id":"basic-configuration","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To avoid writing full url in our tests let's define a base url for our service, UI and define an additional environment:","type":"SimpleText"}]},{"lang":"groovy","snippet":"url = \"http://localhost:8080\" // base url for all http and browser requests\nbrowserUrl = \"http://localhost:3000\" // base url for browser open commands. Overrides url above if both are present\nbrowserId = \"firefox\" // specifying browser to use for browser based operations\n\nenvironments {\n    dev { // optional overrides for the configs for dev environment\n        url = \"http://dev-server:8080\"\n        browserUrl = \"http://dev-server:8080\"\n    }\n}","title":"webtau.cfg.groovy","commentsType":"inline","excludeRegexp":"package","meta":{"stickySlide":"left"},"type":"Snippet"},{"lang":"groovy","snippet":"scenario('implicit config usage') {\n    http.post(\"/relative-url\") // implicit usage of core url config value\n    browser.open(\"/test\") // implicit usage of browser url and browser id\n}","title":"config access","commentsType":"inline","meta":{"stickySlide":"top 70"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"You can override config values using CLI params. Use ","type":"SimpleText"},{"code":"--env=<value>","type":"InlinedCode"},{"text":" to select an environment, i.e. a different set of config values:","type":"SimpleText"}]},{"command":"webtau scenarios/* --env=dev --url=http://override-value --browserId=chrome","paramsToHighlight":["dev"],"type":"CliCommand"}]},{"title":"Game Store REST API","id":"game-store-rest-api","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Let's test Game Store API to register and check a game by id.","type":"SimpleText"}]},{"lang":"txt","snippet":"http://localhost:8080/api/game","title":"End-point to create a game","meta":{"stickySlide":"top 20%"},"type":"Snippet"},{"title":"Register a new game and check it after","meta":{"stickySlide":"left 30%"},"data":{"id":"g1","title":"Slay The Spire","type":"card rpg","priceUsd":20.0},"paths":[],"type":"Json"},{"lang":"groovy","snippet":"scenario('register new game') {\n    http.post(\"/api/game\", [\n            id: \"g1\", // define payload as a map\n            title: \"Slay The Spire\",\n            type: \"card rpg\",\n            priceUsd: 20])\n\n    http.get(\"/api/game/g1\") { // request newly created game as GET\n        id.should == \"g1\"\n        title.should == \"Slay The Spire\" // direct access to response JSON title property\n        type.should == \"card rpg\"\n        priceUsd.should == 20\n    }\n}","title":"POST and GET","startLine":"register-new-game","endLine":"scenario-end","excludeStartEnd":true,"excludeRegexp":"http.doc","revealLineStop":[5],"commentsType":"inline","meta":{"stickySlide":"left"},"type":"Snippet"},{"title":"Game POST Response","pathsFile":"game-store-rest-get-game/paths.json","data":{"id":"g1","title":"Slay The Spire","type":"card rpg","priceUsd":20.0},"paths":["root.id","root.title","root.type","root.priceUsd"],"type":"Json"},{"type":"Paragraph","content":[{"text":"Did you notice that request to POST and response from GET looks the same? Let's extract payload into a variable and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"re-use it for both request payload and response validation.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This time we also not going to pass ","type":"SimpleText"},{"code":"id","type":"InlinedCode"},{"text":" to the request and instead rely on the server to generate a new ID.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.gamestore // optional package declaration for IDE happiness\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.* // optional single import for IDE autocomplete\n\nscenario('register new game') {\n    def payload = [title: \"Slay The Spire\",  // no ID specified this time\n                   type: \"card rpg\",\n                   priceUsd: 20]\n\n    def id = http.post(\"/api/game\", payload) {\n        return id // we grab id from response, return keyword is optional\n    }\n\n    http.get(\"/api/game/${id}\") { // using id for subsequent request\n        body.should == payload // re-using POST payload to assert GET response. Only values in payload will be validated\n    }\n}","title":"Re-use payload data","excludeRegexp":"http.doc","commentsType":"inline","type":"Snippet"}]},{"title":"HTTP Explicit Auth","id":"http-explicit-auth","type":"Section","content":[{"type":"Paragraph","content":[{"text":"End-point ","type":"SimpleText"},{"code":"/api/game","type":"InlinedCode"},{"text":" was not requiring authentication. It was done for example’s sake to make it simpler to approach.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Now let's test an end-point that requires auth.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('save preferences without auth') {\n    http.put('/api/user-preferences', [favoriteGenre: 'RPG']) {\n        statusCode.should == 403 // forbidden, as this end-point requires authentication\n    }\n}","title":"auth required end-point","startLine":"without-auth","endLine":"without-auth-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To authenticate a user our system relies on ","type":"SimpleText"},{"code":"Bearer","type":"InlinedCode"},{"text":" token. Let's generate a token and explicitly pass it","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"via ","type":"SimpleText"},{"code":"header","type":"InlinedCode"},{"text":" parameter.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('save preferences with explicit auth') {\n    def token = generateToken('user-a') // generates token using our system underlying auth system\n\n    http.put('/api/user-preferences',\n            http.header([Authorization: \"Bearer ${token}\"]), // explicitly pass Bearer token\n            [favoriteGenre: 'RPG']) {\n        userId.should == 'user-a' // make sure server recognized token and properly authenticated user\n    }\n}","title":"explicit auth","startLine":"with-explicit-auth","endLine":"with-explicit-auth-end","excludeStartEnd":true,"excludeRegexp":"http.doc","commentsType":"inline","meta":{"stickySlide":"left"},"type":"Snippet"},{"title":"User preferences response","pathsFile":"game-store-put-user-preferences/paths.json","data":{"userId":"user-a","favoriteGenre":"RPG"},"paths":["root.userId"],"type":"Json"}]},{"title":"Personas","id":"personas","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Webtau provides a way to implement implicit authentication for your requests.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Before we get there, we need to cover ","type":"SimpleText"},{"code":"Persona","type":"InlinedCode"},{"text":" concept.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"Persona","type":"InlinedCode"},{"text":" sets the context for config values and code execution.","type":"SimpleText"}]},{"lang":"groovy","snippet":"userId = 'NA' // custom config value defined in the default context\n\npersonas { // persona config section, similar to environments config section\n    Alice {\n        userId = \"uid-alice\" // Alice's specific config value\n    }\n\n    Bob {\n        userId = \"uid-bob\" // Bob's specific config value\n    }\n}","title":"webtau.cfg.groovy","excludeRegexp":"package","commentsType":"inline","meta":{"stickySlide":"left 33%"},"type":"Snippet"},{"lang":"groovy","snippet":"def Alice = persona('Alice') // define Alice persona\ndef Bob = persona('Bob') // define Bob persona\n\nscenario('persona demo') {\n    println cfg.userId // custom value from config\n\n    Alice {\n        println cfg.userId // custom value from config in Alice's context\n    }\n\n    Bob {\n        println cfg.userId // custom value from config in Bob's context\n    }\n}","title":"personaDemo.groovy","startLine":"persona-demo","endLine":"persona-demo-end","excludeStartEnd":true,"commentsType":"inline","meta":{"stickySlide":"left"},"type":"Snippet"},{"title":"output","startLine":"persona demo","endLine":"uid-bob","revealLineStop":[0,1,2],"lines":["\u001B[34mpersona demo \u001B[35m(personaDemo.groovy)\u001B[0m","NA","uid-alice","uid-bob"],"type":"CliOutput"}]},{"title":"HTTP Implicit Auth","id":"http-implicit-auth","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Instead of explicitly passing ","type":"SimpleText"},{"code":"header","type":"InlinedCode"},{"text":" to each ","type":"SimpleText"},{"code":"http","type":"InlinedCode"},{"text":" call we will execute calls in the context of a persona.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('save preferences with personas auth') {\n    Alice { // Alice's context\n        http.put('/api/user-preferences', [favoriteGenre: 'RPG']) {\n            userId.should == 'uid-alice' // validating that we updated the right user\n            favoriteGenre.should == 'RPG'\n        }\n    }\n\n    Bob { // Bob's context\n        http.put('/api/user-preferences', [favoriteGenre: 'Strategy']) {\n            userId.should == 'uid-bob' // validating that we updated the right user\n            favoriteGenre.should == 'Strategy'\n        }\n    }\n}","title":"Persona auth PUT","startLine":"with-personas-put","endLine":"with-personas-put-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Console output (and report that we are going to look at later) captures what steps were executed in what context.","type":"SimpleText"}]},{"title":"webtau output","startLine":"running:","endLine":"Bob","highlight":[2,26,27,30],"lines":["\u001B[34mrunning: \u001B[35mscenarios/gamestore/userPreferencesRest.groovy \u001B[33msave preferences with personas auth\u001B[0m","\u001B[34msave preferences with personas auth \u001B[35m(userPreferencesRest.groovy)\u001B[0m","\u001B[33m> \u001B[33mAlice \u001B[0m\u001B[34mexecuting HTTP PUT \u001B[35mhttp://localhost:8080/api/user-preferences\u001B[0m","\u001B[33mrequest\u001B[36m (application/json):\u001B[0m","\u001B[33m{\u001B[0m","  \u001B[35m\"favoriteGenre\": \u001B[32m\"RPG\"\u001B[0m","\u001B[33m}\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[0m\u001B[1mbody.userId \u001B[32mequals \"uid-alice\"","      matches:","      ","      body.userId:   actual: \"uid-alice\" <java.lang.String>","                   expected: \"uid-alice\" <java.lang.String>\u001B[33m (\u001B[32m18ms\u001B[33m)\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[0m\u001B[1mbody.favoriteGenre \u001B[32mequals \"RPG\"","      matches:","      ","      body.favoriteGenre:   actual: \"RPG\" <java.lang.String>","                          expected: \"RPG\" <java.lang.String>\u001B[33m (\u001B[32m0ms\u001B[33m)\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[0m\u001B[1mheader.statusCode \u001B[32mequals 200","      matches:","      ","      header.statusCode:   actual: 200 <java.lang.Integer>","                         expected: 200 <java.lang.Integer>\u001B[33m (\u001B[32m1ms\u001B[33m)\u001B[0m","  \u001B[33m> \u001B[33mAlice \u001B[0m\u001B[34mvalidating \u001B[36mrequest and response\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[34mvalidated \u001B[36mrequest and response\u001B[33m (\u001B[32m149ms\u001B[33m)\u001B[0m","\u001B[33mresponse\u001B[36m (application/json):\u001B[0m","\u001B[33m{\u001B[0m","  \u001B[35m\"userId\": \u001B[32m\u001B[1m\u001B[32m__\"uid-alice\"__\u001B[33m,\u001B[0m","  \u001B[35m\"favoriteGenre\": \u001B[32m\u001B[1m\u001B[32m__\"RPG\"__\u001B[0m","\u001B[33m}\u001B[0m","\u001B[32m. \u001B[33mAlice \u001B[0m\u001B[34mexecuted HTTP PUT \u001B[35mhttp://localhost:8080/api/user-preferences\u001B[33m (\u001B[32m320ms\u001B[33m)\u001B[0m","\u001B[33m> \u001B[33mBob \u001B[0m\u001B[34mexecuting HTTP PUT \u001B[35mhttp://localhost:8080/api/user-preferences\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"To make sure our ","type":"SimpleText"},{"code":"PUT","type":"InlinedCode"},{"text":" worked as intended we are going to ","type":"SimpleText"},{"code":"GET","type":"InlinedCode"},{"text":" user preferences in different Persona contexts.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('read preferences with personas auth') {\n    Alice { // Alice's context\n        http.get('/api/user-preferences') {\n            favoriteGenre.should == 'RPG' // we get back the Alice's favorite genre\n        }\n    }\n\n    Bob { // Bob's context\n        http.get('/api/user-preferences') {\n            favoriteGenre.should == 'Strategy' // we get back the Bob's favorite genre\n        }\n    }\n}","title":"Persona auth GET","startLine":"with-personas-get","endLine":"with-personas-get-end","excludeStartEnd":true,"excludeRegexp":"http.doc","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"How does it work behind the covers? ","type":"SimpleText"},{"code":"Webtau","type":"InlinedCode"},{"text":" allows you to define an implicit ","type":"SimpleText"},{"code":"HTTP Header Provider","type":"InlinedCode"},{"text":" that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can inject header values into each request.","type":"SimpleText"}]},{"lang":"groovy","snippet":"httpHeaderProvider = HttpHeaderProvider.&provide // implicit header provider\n\nuserId = '' // explicitly set default userId to be an empty string\n\npersonas {\n    Alice {\n        userId = 'uid-alice' // Alice's system specific user id\n    }\n\n    Bob {\n        userId = 'uid-bob' // Bob's system specific user id\n    }\n}","title":"webtau.cfg.groovy","startLine":"personas-auth-config","endLine":"personas-auth-config-end","excludeStartEnd":true,"excludeRegexp":"browserPageNavigationHandler","commentsType":"inline","meta":{"stickySlide":"left 40%"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Our custom implementation of ","type":"SimpleText"},{"code":"HTTP Header Provider","type":"InlinedCode"},{"text":" checks ","type":"SimpleText"},{"code":"cfg.userId","type":"InlinedCode"},{"text":" value and when it is present,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"it will be used to generate ","type":"SimpleText"},{"code":"Bearer","type":"InlinedCode"},{"text":" token and inject into ongoing request.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: ","type":"SimpleText"},{"code":"cfg.userId","type":"InlinedCode"},{"text":" is only set in the context of ","type":"SimpleText"},{"code":"Bob","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"Alice","type":"InlinedCode"},{"text":". Outside persona context ","type":"SimpleText"},{"code":"userId","type":"InlinedCode"},{"text":" is an empty value.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package auth\n\nimport org.testingisdocumenting.webtau.http.HttpHeader\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass HttpHeaderProvider {\n    static provide(String fullUrl, String url, // provide method will be called for every HTTP request\n                   HttpHeader httpHeaders) {\n        def userId = cfg.userId // grab custom userId config value, depends on the Persona context. Based on our current config, it is empty outside persona context.\n        return userId ?\n                httpHeaders.with(\"Authorization\", // create new http header by taking a header passed by a test explicitly and adding Authorization key-value\n                                 \"Bearer ${generateToken(userId)}\"):\n                httpHeaders // original header passed by a test\n    }\n\n    // generate token based on your auth system, dummy impl for the demo purposes only\n    private static def generateToken(String userId) {\n        return userId.bytes.encodeBase64().toString()\n    }\n}","title":"HTTP Header Provider","commentsType":"inline","type":"Snippet"}]},{"title":"GraphQL","id":"graphql","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We covered how to use ","type":"SimpleText"},{"code":"http.","type":"InlinedCode"},{"text":" namespace to test REST based API layer. Let's move to ","type":"SimpleText"},{"code":"graphql.","type":"InlinedCode"},{"text":" namespace to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"test GraphQL based API.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Game Store provided a few queries and mutations:","type":"SimpleText"}]},{"lang":"graphqls","snippet":"type Query {\n    games: [Game]\n    game(id: String): Game\n    userPreferences: UserPreferences\n}\n\ntype Mutation {\n    createGame(id: String!, title: String!, type: String!, priceUsd: Int!): Game\n    updateUserPreferences(favoriteGenre: String): UserPreferences\n}\n\ntype Game {\n    id: String\n    title: String\n    type: String\n    priceUsd: Int\n}\n\ntype UserPreferences {\n    userId: String\n    favoriteGenre: String\n}","title":"GraphQL schema","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To start, we define a query to fetch a game by hardcoding id in the query.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def query = '''\nquery {\n  game(id: \"g1\") {\n    title\n    type\n  }\n}\n'''","title":"query definition","startLine":"query-definition-start","endLine":"query-definition-end","excludeStartEnd":true,"meta":{"stickySlide":"left 33%"},"type":"Snippet"},{"lang":"groovy","snippet":"scenario('query game') {\n    graphql.execute(query) {\n        game.title.should == \"Slay The Spire\" // explicit access through query name\n        title.should == \"Slay The Spire\" // implicit access in case of the single query\n    }\n}","title":"GraphQL query","startLine":"query-game-start","endLine":"query-game-end","excludeStartEnd":true,"excludeRegexp":"http.doc","commentsType":"inline","meta":{"stickySlide":"left"},"type":"Snippet"},{"title":"response","pathsFile":"game-store-graphql-game/paths.json","data":{"data":{"game":{"title":"Slay The Spire","type":"card rpg"}}},"paths":["root.data.game.title"],"type":"Json"},{"type":"Paragraph","content":[{"text":"GraphQL allows to define a query with parameters:","type":"SimpleText"}]},{"lang":"groovy","snippet":"def queryWithParams = '''\nquery game($id: String!) {\n  game(id: $id) {\n    title\n    type\n  }\n}\n'''","title":"params query definition","startLine":"query-params-definition-start","endLine":"query-params-definition-end","excludeStartEnd":true,"meta":{"stickySlide":"top"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Webtau provides a way to pass parameter values as a ","type":"SimpleText"},{"code":"Map","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('query game with param') {\n    graphql.execute(queryWithParams, [id: 'g1']) {\n        title.should == \"Slay The Spire\"\n    }\n}","title":"query parameters","startLine":"query-game-param-start","endLine":"query-game-param-end","excludeStartEnd":true,"highlight":[1],"excludeRegexp":"http.doc","type":"Snippet"}]},{"title":"GraphQL Explicit Auth","id":"graphql-explicit-auth","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As in REST based user preference example above, ","type":"SimpleText"},{"code":"updateUserPreferences","type":"InlinedCode"},{"text":" mutation requires authentication.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def mutation = '''\nmutation updateUserPreferences($favoriteGenre: String!) {\n  updateUserPreferences(favoriteGenre: $favoriteGenre) { \n    userId\n    favoriteGenre\n  }\n}\n'''","title":"mutation to change preferences","startLine":"mutation-definition-start","endLine":"mutation-definition-end","excludeStartEnd":true,"meta":{"stickySlide":"top"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Unlike REST based API, the auth error appears in ","type":"SimpleText"},{"code":"errors","type":"InlinedCode"},{"text":" field on a response and not via ","type":"SimpleText"},{"code":"statusCode","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"title":"GraphQL error response","pathsFile":"graphql-auth-error/paths.json","meta":{"stickySlide":"left"},"data":{"errors":[{"message":"forbidden"}],"data":{"updateUserPreferences":null}},"paths":["root.errors[0].message"],"type":"Json"},{"lang":"groovy","snippet":"scenario('save preferences without auth') {\n    graphql.execute(mutation, [favoriteGenre: 'CRPG']) {\n        errors.message.should == ['forbidden'] // shortcut to take a message from each error in the list\n    }\n}","title":"not authenticated error","startLine":"without-auth","endLine":"without-auth-end","excludeStartEnd":true,"excludeRegexp":".doc","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To do auth explicitly, similar to REST API, we can pass ","type":"SimpleText"},{"code":"header","type":"InlinedCode"},{"text":" as a parameter to ","type":"SimpleText"},{"code":"graphql.execute","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('save preferences with explicit auth') {\n    def token = generateToken('user-a')\n\n    graphql.execute(mutation, [favoriteGenre: 'CRPG'],\n            http.header([Authorization: \"Bearer ${token}\"])) {\n        userId.should == 'user-a'\n    }\n}","title":"explicit authentication","startLine":"with-explicit-auth","endLine":"with-explicit-auth-end","excludeStartEnd":true,"type":"Snippet"}]},{"title":"GraphQL Persona Auth","id":"graphql-persona-auth","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Persona based authentication for GraphQL works exactly like REST API based one.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('save preferences with personas auth') {\n    Alice { // Personas we defined and used for HTTP REST API\n        graphql.execute(mutation, [favoriteGenre: 'RPG']) {\n            userId.should == 'uid-alice' // make sure system picked Alice as a user\n            favoriteGenre.should == 'RPG'\n        }\n    }\n\n    Bob {\n        graphql.execute(mutation, [favoriteGenre: 'Strategy']) {\n            userId.should == 'uid-bob' // make sure system picked Bob as a user\n            favoriteGenre.should == 'Strategy'\n        }\n    }\n}","title":"Persona authentication","startLine":"with-personas-put","endLine":"with-personas-put-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"lang":"groovy","snippet":"httpHeaderProvider = HttpHeaderProvider.&provide // implicit header provider\n\nuserId = '' // explicitly set default userId to be an empty string\n\npersonas {\n    Alice {\n        userId = 'uid-alice' // Alice's system specific user id\n    }\n\n    Bob {\n        userId = 'uid-bob' // Bob's system specific user id\n    }\n}","title":"webtau.cfg.groovy","startLine":"personas-auth-config","endLine":"personas-auth-config-end","excludeStartEnd":true,"excludeRegexp":"browserPageNavigationHandler","commentsType":"inline","meta":{"stickySlide":"left 40%"},"type":"Snippet"},{"lang":"groovy","snippet":"package auth\n\nimport org.testingisdocumenting.webtau.http.HttpHeader\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass HttpHeaderProvider {\n    static provide(String fullUrl, String url, // provide method will be called for every HTTP request\n                   HttpHeader httpHeaders) {\n        def userId = cfg.userId // grab custom userId config value, depends on the Persona context. Based on our current config, it is empty outside persona context.\n        return userId ?\n                httpHeaders.with(\"Authorization\", // create new http header by taking a header passed by a test explicitly and adding Authorization key-value\n                                 \"Bearer ${generateToken(userId)}\"):\n                httpHeaders // original header passed by a test\n    }\n\n    // generate token based on your auth system, dummy impl for the demo purposes only\n    private static def generateToken(String userId) {\n        return userId.bytes.encodeBase64().toString()\n    }\n}","title":"previously defined HTTP Header Provider","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Let's make system reflects the changes performed with mutations","type":"SimpleText"}]},{"lang":"groovy","snippet":"def query = '''\nquery {\n  userPreferences {\n    userId\n    favoriteGenre\n  }\n}\n'''","title":"query to fetch preferences","startLine":"query-definition-start","endLine":"query-definition-end","excludeStartEnd":true,"meta":{"stickySlide":"left"},"type":"Snippet"},{"lang":"groovy","snippet":"scenario('read preferences with personas auth') {\n    Alice {\n        graphql.execute(query) {\n            favoriteGenre.should == 'RPG' // making sure correct data is returned back\n        }\n    }\n\n    Bob {\n        graphql.execute(query) {\n            favoriteGenre.should == 'Strategy'  // Strategy games are not bad\n        }\n    }\n}","title":"Persona authentication","startLine":"with-personas-get","endLine":"with-personas-get-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"}]},{"title":"Personas Re-use","id":"personas-re-use","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We started with defining personas in-place within each test file like this:","type":"SimpleText"}]},{"lang":"groovy","snippet":"import static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\ndef Alice = persona('Alice') // define Alice persona\ndef Bob = persona('Bob') // define Bob persona\n\nscenario('persona demo') {\n    println cfg.userId // custom value from config\n\n    Alice {\n        println cfg.userId // custom value from config in Alice's context\n    }\n\n    Bob {\n        println cfg.userId // custom value from config in Bob's context\n    }\n}","title":"in place defined personas","excludeRegexp":["// persona-demo","package"],"commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"As we start using Personas for multiple tests and multiple files it makes sense to define Personas once and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"reference them in tests as needed.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package personas // user defined package name/directory\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass Personas { // class name can be anything\n    public static final def Admin = persona('Admin')\n    public static final def Alice = persona('Alice')\n    public static final def Bob = persona('Bob')\n}","title":"personas/Personas.groovy","commentsType":"inline","meta":{"stickySlide":"top 30%"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"To use defined personas we leverage Java/Groovy static import:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package basicScenarios\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\nimport static personas.Personas.* // import all available personas to be in scope\n\nscenario('persona demo') {\n    println cfg.userId\n\n    Alice { // Alice is taken from personas.Personas.*\n        println cfg.userId\n    }\n\n    Bob {\n        println cfg.userId\n    }\n}","title":"Persona re-use demo","excludeRegexp":"// persona-demo","commentsType":"inline","type":"Snippet"}]},{"title":"Browser","id":"browser","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We looked at how to test REST and GraphQL based APIs. Now let's move on to testing Web UI.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Before we jump into testing Game Store UI, we will do a classic test of Google Page.","type":"SimpleText"}]},{"imageSrc":"/blog/browser-basic.png","timestamp":1603733864858,"shapes":[],"width":1000.0,"height":677.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Our test will enter \"test\" value into the search box and, wait for the results to show up and pick a result based on","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a regular expression:","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('basic browser interaction') {\n    browser.open(\"https://google.com\")\n    $('input[title=\"Search\"]').setValue(\"test\\n\") // set value based on the underlying component\n\n    $('h3').count.waitTo >= 1 // explicit, simplified wait on condition\n    $(\"h3\").get(~/Speedtest.*Ookla/).click() // example of filter based on regular expression\n\n    browser.url.full.should == ~/speedtest.net/ // full url assertion\n}","title":"basic browser interactions","startLine":"browser-basics","endLine":"browser-basics-end","excludeStartEnd":true,"excludeRegexp":"browser.doc","commentsType":"inline","meta":{"stickySlide":"left 40%"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"As with REST and GraphQL, webtau console output captures all the actions that happen, and how much time each","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"action took:","type":"SimpleText"}]},{"title":"webtau output","startLine":"basic browser interaction","endLine":"expected pattern: speedtest.net","highlight":[4,10,16,18],"lines":["\u001B[34mbasic browser interaction \u001B[35m(browserBasics.groovy)\u001B[0m","\u001B[34mpreparing \u001B[33mchrome\u001B[34m WebDriver\u001B[0m","\u001B[33m> \u001B[34mopening \u001B[35mhttps://google.com\u001B[0m","\u001B[32m. \u001B[34mopened \u001B[35mhttps://google.com\u001B[33m (\u001B[32m461ms\u001B[33m)\u001B[0m","\u001B[33m> \u001B[34msetting value \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","  \u001B[33m> \u001B[34mclearing \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","  \u001B[32m. \u001B[34mcleared \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[33m (\u001B[32m36ms\u001B[33m)\u001B[0m","  \u001B[33m> \u001B[34msending keys \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","  \u001B[32m. \u001B[34msent keys \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[33m (\u001B[32m936ms\u001B[33m)\u001B[0m","\u001B[32m. \u001B[34mset value \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[33m (\u001B[32m1s 10ms\u001B[33m)\u001B[0m","\u001B[33m> \u001B[34mwaiting \u001B[33mto \u001B[36mcount \u001B[33mof \u001B[35mby css \u001B[1m\u001B[35mh3 \u001B[32mto be greater than or equal to 1\u001B[0m","\u001B[32m. \u001B[36mcount \u001B[33mof \u001B[35mby css \u001B[1m\u001B[35mh3 \u001B[32mgreater than or equal 1","    matches:","    ","    count:   actual: 15 <java.lang.Integer>","           expected: greater than or equal to 1 <java.lang.Integer>\u001B[33m (\u001B[32m29ms\u001B[33m)\u001B[0m","\u001B[33m> \u001B[34mclicking \u001B[35mby css \u001B[1m\u001B[35mh3 \u001B[37m, \u001B[35melement(s) with regexp \u001B[1m\u001B[35mSpeedtest.*Ookla\u001B[0m","\u001B[32m. \u001B[34mclicked \u001B[35mby css \u001B[1m\u001B[35mh3 \u001B[37m, \u001B[35melement(s) with regexp \u001B[1m\u001B[35mSpeedtest.*Ookla\u001B[33m (\u001B[32m774ms\u001B[33m)\u001B[0m","\u001B[33m> \u001B[34mexpecting \u001B[36mfull page url \u001B[33mof \u001B[0m\u001B[1mbrowser \u001B[32mto equal pattern /speedtest.net/\u001B[0m","\u001B[32m. \u001B[36mfull page url \u001B[33mof \u001B[0m\u001B[1mbrowser \u001B[32mequals pattern /speedtest.net/","    matches:","    ","    full page url:    actual string: https://www.speedtest.net/","                   expected pattern: speedtest.net\u001B[33m (\u001B[32m4ms\u001B[33m)\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"Note: Both passed and failed assertions are captured.","type":"SimpleText"}]}]},{"title":"Game Store UI","id":"game-store-ui","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The first Game Store page we are going to test is a landing page. It shows available games and let you filter","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"based on text or price.","type":"SimpleText"}]},{"fit":true,"imageSrc":"/blog/landing-page.png","timestamp":1604503512661,"shapes":[],"width":2000.0,"height":1354.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"We covered how to use ","type":"SimpleText"},{"code":"http.","type":"InlinedCode"},{"text":" layer to create new games. We can use that to prepare a setup for our UI test:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.gamestore\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('landing page') {\n    http.post(\"/api/game\", [id: \"g1\", title: \"Slay The Spire\", type: \"card rpg\", priceUsd: 20]) // pre-create test data using HTTP\n    http.post(\"/api/game\", [id: \"g2\", title: \"Civilization 6\", type: \"strategy\", priceUsd: 60])\n    http.post(\"/api/game\", [id: \"g3\", title: \"Doom\", type: \"fps\", priceUsd: 40])\n\n    browser.open(\"/\") // open landing page, relying on url and/or browserUrl\n    def titles = $('[class*=\"GamesList_title\"]') // define titles as page element selected by css\n\n    titles.waitTo == ['Civilization 6', 'Doom', 'Slay The Spire'] // wait for games titles to show up and match our expectations\n\n    http.delete(\"/api/game/g3\") // delete a single game using HTTP\n\n    titles.waitTo == ['Civilization 6', 'Slay The Spire'] // wait for UI to reflect changes\n}","title":"Browser Landing test","excludeRegexp":["browser.doc","hide",".capture"],"commentsType":"inline","type":"Snippet"},{"fit":true,"imageSrc":"/blog/landing-page-reduced.png","timestamp":1604503513522,"shapes":[],"width":2000.0,"height":1354.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Let's test the filters:","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('filter by text') {\n    browser.reopen(\"/\")\n\n    $(\"#filter\").setValue(\"civ\") // use setValue abstraction to set value inside input box\n    $('[class*=\"GamesList_title\"]').waitTo == ['Civilization 6'] // wait for changes to be reflected\n}\n\nscenario('filter by price') {\n    browser.reopen(\"/\")\n\n    $(\"#below60\").setValue(true) // use setValue abstraction to set value for a checkbox\n    $('[class*=\"GamesList_title\"]').waitTo == ['Doom', 'Slay The Spire'] // wait for changes to be reflected\n}","title":"filtering games","startLine":"filter-start","endLine":"filter-end","excludeStartEnd":true,"excludeRegexp":["hide","browser.doc"],"commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: ","type":"SimpleText"},{"code":"setValue","type":"InlinedCode"},{"text":" is used for both text input box and check box. Webtau will figure out what actions to perform based on the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"underlying form element.","type":"SimpleText"}]}]},{"title":"UI Page Object","id":"ui-page-object","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If you have experience in writing UI tests, you may have heard about ","type":"SimpleText"},{"url":"https://martinfowler.com/bliki/PageObject.html","isFile":false,"type":"Link","content":[{"text":"Page Object pattern","type":"SimpleText"}]},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Basic idea is to separate what user can see or do from technical details of how to simulate the actions or query the values.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If we take a look at the code in our UI test we will see that details of how to locate elements on the UI are exposed.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Any time we change id element or class names, we risk breaking our tests.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Warning: Tests should not be broken if only implementation details has changed.","type":"SimpleText"}]},{"lang":"groovy","snippet":"$(\"#filter\").setValue(\"civ\") // exposing css selector to the test is going to haunt you later\n$('[class*=\"GamesList_title\"]').waitTo == ['Civilization 6'] // class based selection is more likely to become out of sync","title":"exposed page details","startLine":"impl-details","endLine":"impl-details-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To implement page object in Webtau we will use a regular Java/Groovy/Kotlin class:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package pages\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass LandingPage {\n    def titles = $('[class*=\"GamesList_title\"]')\n    def filterText = $(\"#filter\") // lazy declaration for future usage, no actual attempt to find element is performed\n    def filterBelow60 = $(\"#below60\")\n    def labelBelow60 = $(\"span\").get('Below $60') // filters chaining is also lazy\n    def adminMessage = $(\"#admin-message\")\n\n    def reopen() {\n        browser.reopen(\"/\")\n    }\n}","title":"page object","commentsType":"inline","meta":{"stickySlide":"left 40%"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Since our page object class is stateless and elements declarations are lazy, we can precreate instances of all","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the page objects in one place:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package pages\n\nclass Pages {\n    static final def maintenance = new MaintenancePage() // pre-creating stateless instances\n    static final def login = new LoginPage()\n    static final def landing = new LandingPage() // for all the pages our test suite needs to have access\n    static final def userPreferences = new UserPreferencesPage()\n}","title":"all pages (similar to Personas)","commentsType":"inline","excludeRegexp":"report","meta":{"stickySlide":"top 30%"},"type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.gamestore\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\nimport static pages.Pages.* // import all the pages into test scope\n\nscenario('filter by text') {\n    landing.reopen()\n    // set value using input defined in the page object\n    landing.filterText.(\"civ\")\n\n    landing.titles.waitTo == ['Civilization 6']\n}\n\nscenario('filter by price') {\n    landing.reopen()\n    // set checkbox value using input defined in the page object\n    landing.filterBelow60.setValue(true)\n\n    landing.titles.waitTo == ['Doom', 'Slay The Spire']\n}","title":"filtering games","commentsType":"inline","excludeRegexp":["browser.doc","hide",".capture"],"type":"Snippet"}]},{"title":"WaitTo","id":"waitto","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You saw ","type":"SimpleText"},{"code":"waitTo","type":"InlinedCode"},{"text":" in a couple of places already. Let's pause on the topic.","type":"SimpleText"}]},{"stickySlide":"top 20%","type":"Meta"},{"type":"Paragraph","content":[{"text":"Question: Why do we need ","type":"SimpleText"},{"code":"waitTo","type":"InlinedCode"},{"text":" and can we instead make ","type":"SimpleText"},{"code":"should","type":"InlinedCode"},{"text":" do the waiting?","type":"SimpleText"}]},{"presentationParagraph":"default","type":"Meta"},{"stickySlide":"top 20%","type":"Meta"},{"type":"Paragraph","content":[{"text":"We could. However, semantics are important. I think it is important to distinct between an immediate result,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and a result that becomes available over time.","type":"SimpleText"}]},{"stickySlide":"top 30%","type":"Meta"},{"type":"Paragraph","content":[{"text":"Are our users going to see the result right away? Is database going to have the result right away? Is command line going","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to print that line right away?","type":"SimpleText"}]},{"stickySlide":"left","type":"Meta"},{"presentationParagraph":"","type":"Meta"},{"type":"Paragraph","content":[{"text":"Additionally ","type":"SimpleText"},{"code":"waitTo","type":"InlinedCode"},{"text":" is not specific for ","type":"SimpleText"},{"code":"browser.","type":"InlinedCode"},{"text":" layer. It can be used to wait on files content, console output, database data, etc.","type":"SimpleText"}]},{"lang":"groovy","snippet":"// waiting on query to finally return a value (eventual consistency)\ndb.query(\"select * from games\").waitTo contain([title: \"Slay The Spire\"])\n// waiting of file content to contain a line\nfs.textContent(\"my-file.txt\").waitTo contain('important line')\n\ndef command = cli.runInBackground(\"admin-tool\")\nlogin.login(\"myname\", \"mypassword\")\n// waiting on command line tool to print important message\ncommand.output.waitTo contain(\"<myname> logged in\")","title":"waitTo is NOT browser specific","startLine":"wait-to-demo","endLine":"wait-to-demo-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"Testing Is Documenting","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"Testing is Documenting is my moto. WaitTo semantics allow you to look at the test and get a better understanding of how system behaves.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This is an example of a more subtle, more common definition of how tests can help you to understand the system.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Later I will show you how to make tests help you with the actual documentation in a more explicit manner.","type":"SimpleText"}]}]},{"title":"Browser Explicit Auth","id":"browser-explicit-auth","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Game Store have a page where users can update their user preferences.","type":"SimpleText"}]},{"caption":"user preferences","fit":true,"imageSrc":"/blog/user-preferences-screen.png","timestamp":1605069513311,"shapes":[],"width":2000.0,"height":954.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"If we go to that page directly, we will be redirected to the login page instead.","type":"SimpleText"}]},{"caption":"login is required","fit":true,"imageSrc":"/blog/login-screen.png","timestamp":1605069510756,"shapes":[],"width":2000.0,"height":954.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"In order to test user preferences page, we have to choices:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"handle login explicitly","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"handle login implicitly","type":"SimpleText"}]}]}]},{"lang":"groovy","snippet":"scenario('user preferences redirects to login') {\n    userPreferences.open() // open user preferences page\n\n    login.name.waitTo beVisible\n    browser.url.ref.should == '/login' // but landed on login page\n\n    login.login('uid-test', 'dummy-password') // explicitly enter user name and password\n\n    userPreferences.userId.waitTo == 'uid-test' // after redirect we can see user preferences\n    userPreferences.favoriteGenre.should == ''\n}","title":"Explicit Login","startLine":"explicit-login-start","endLine":"explicit-login-end","excludeStartEnd":true,"commentsType":"inline","excludeRegexp":"browser.doc","meta":{"stickySlide":"left"},"type":"Snippet"},{"lang":"groovy","snippet":"package pages\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass UserPreferencesPage {\n    def userId = $('#user-id') // user id to assert on\n    def favoriteGenre = $('#favorite-genre') // genre to validate/set\n    def saveButton = $('#save')\n    def saveResultMessage = $('#save-result')\n\n    def open() {\n        browser.reopen(\"/#/user\")\n    }\n\n    def save() { // exposed action - regular method\n        saveButton.click()\n    }\n}","title":"user preferences page object","commentsType":"inline","meta":{"stickySlide":"temp"},"type":"Snippet"},{"lang":"groovy","snippet":"package pages\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass LoginPage {\n    def name = $('#name') // name to wait on\n    def password = $('#password')\n    def loginButton = $('#login')\n\n    void login(name, password) { // action to login with\n        this.name.setValue(name)\n        this.password.setValue(password)\n\n        loginButton.click()\n    }\n}","title":"login page object","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Explicit login approach works well if we go the page once, and we know that we haven't performed login yet.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"If on the other hand we need to get to that page as part of other scenario, we may face the case where we have already","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"logged-in, and the code that assumed logic redirection will fail.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To fix that we will need to add additional if-else logic that may complicate things a bit.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Alternatively we can use an implicit login with Personas.","type":"SimpleText"}]}]},{"title":"Browser Implicit Auth","id":"browser-implicit-auth","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Browser Implicit Auth in also Persona based.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('implicit login with persona') {\n    Alice { // In the Alice's context\n        http.put('/api/user-preferences', [favoriteGenre: 'RPG']) // prepare data to assert on - another example of http/browser test combination\n\n        userPreferences.open() // open user preferences\n\n        userPreferences.userId.waitTo == 'uid-alice' // we expect user preferences screen, not the login screen\n        userPreferences.favoriteGenre.should == 'RPG' // our assertion matches what we set using REST API\n    }\n}","title":"Persona Login","startLine":"persona-login-start","endLine":"persona-login-end","excludeStartEnd":true,"excludeRegexp":"browser.doc","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Let's now update preferences through UI and validate them using REST API:","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('change preferences through UI') {\n    Bob { http.put('/api/user-preferences', [favoriteGenre: 'Sim']) } // Set Bob's preference via HTTP\n\n    Alice {\n        userPreferences.open()\n\n        userPreferences.favoriteGenre.waitTo beVisible() // wait for UI to load data from REST endpoint\n        userPreferences.favoriteGenre.setValue('CRPG')\n        userPreferences.save() // save user preferences\n\n        userPreferences.saveResultMessage.waitTo == 'Saved' // wait for visual clue to appear\n    }\n\n    Bob { // In Bob's context\n        http.get('/api/user-preferences') {\n            favoriteGenre.should == 'Sim' // Bob's preferences were not affected by UI\n        }\n    }\n\n    Alice { // In Alice's context\n        http.get('/api/user-preferences') {\n            favoriteGenre.should == 'CRPG' // Genre is the one we set\n        }\n    }\n}","title":"Update Through UI","startLine":"change-through-ui-start","endLine":"change-through-ui-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To make implicit auth work we need to implement ","type":"SimpleText"},{"code":"browserPageNavigationHandler","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"A handler that will be called for each page open event.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package auth\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass BrowserOpenHandler {\n    private static STORAGE_KEY = 'authToken'\n\n    static void handleOpen(passedUrl, fullUrl, currentUrl) { // will be called for every page open\n        def userId = cfg.userId // take user from config based on current persona\n        if (!userId || browser.localStorage.getItem(STORAGE_KEY)) { // if no user or token is inside storage, we don't need to do anything\n            return\n        }\n\n        browser.localStorage.setItem(STORAGE_KEY, generateToken(userId)) // set a new auth token generated based on current persona\n        browser.reopen(fullUrl) // re-open original page\n    }\n\n    // generate token based on your auth system, dummy impl for the demo purposes only\n    private static def generateToken(String userId) {\n        return userId.bytes.encodeBase64().toString()\n    }\n}","title":"Browser Navigation Handler","commentsType":"inline","meta":{"stickySlide":"left 50%"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: Game Store UI code uses local storage to manage auth token. In your app it could be session storage or cookies.","type":"SimpleText"}]},{"lang":"groovy","snippet":"browserPageNavigationHandler = BrowserOpenHandler.&handleOpen // implicit page open handler\n\nuserId = '' // explicitly set default userId to be an empty string\n\npersonas {\n    Alice {\n        userId = 'uid-alice' // Alice's system specific user id\n    }\n\n    Bob {\n        userId = 'uid-bob' // Bob's system specific user id\n    }\n}","title":"webtau.cfg.groovy - personas setup","startLine":"personas-auth-config","endLine":"personas-auth-config-end","excludeStartEnd":true,"excludeRegexp":"httpHeaderProvider","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Question: How do we maintain different localStorage for different Personas?","type":"SimpleText"}]},{"presentationParagraph":"default","presentationBulletListType":"RevealBoxes","type":"Meta"},{"type":"Paragraph","content":[{"code":"Webtau","type":"InlinedCode"},{"text":" maintains a browser per ","type":"SimpleText"},{"code":"persona","type":"InlinedCode"},{"text":". In the examples above we have a total of two browsers during test run:","type":"SimpleText"}]},{"presentationParagraph":"clear","type":"Meta"},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Default browser","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Alice's browser","type":"SimpleText"}]}]}]},{"presentationParagraph":"","stickySlide":"clear","type":"Meta"}]},{"title":"Browser WebSocket","id":"browser-websocket","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Now that we know how to use Persona to manage multiple browsers,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we can write a test for the last part of Game Store UI - admin page to send messages to visitors.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Admin page allows to send a message to all visitors via WebSocket.","type":"SimpleText"}]},{"fit":true,"meta":{"stickySlide":"left"},"imageSrc":"/blog/admin-send-message.png","timestamp":1605069480276,"shapes":[],"width":2000.0,"height":754.0,"type":"AnnotatedImage"},{"fit":true,"imageSrc":"/blog/landing-received-message.png","timestamp":1605069480777,"shapes":[],"width":2000.0,"height":754.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"In order to test this we will need two browsers: one to send a message and another to receive a websocket event.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's start with defining a page object for the new page:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package pages\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass MaintenancePage {\n    def message = $('#message')\n    def sendMessage = $('button').get('send message')\n\n    def reopen() {\n        browser.reopen(\"/#/admin\")\n    }\n}","title":"page object","type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.gamestore\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.* // single convenient import for IDE auto complete\nimport static pages.Pages.* // convenient access to all page objects\nimport static personas.Personas.* // convenient access to all Personas\n\nscenario('sending admin message') {\n    landing.reopen() // open landing page in a default browser\n\n    def message = 'Shop is going to be closed for maintenance'\n\n    Admin {\n        maintenance.reopen() // open maintenance page in Admin's browser\n        maintenance.message.setValue(message)\n        maintenance.sendMessage.click() // send notification message\n    }\n\n    landing.adminMessage.waitTo == message // in the default browser, wait for the message to arrive\n}","title":"Leveraging  multiple browsers","excludeRegexp":["browser.doc","hide"],"commentsType":"inline","type":"Snippet"}]},{"title":"Database","id":"database","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Another layer to explore is Database. Database layer can be used to prepare test data. It can also be used to validate","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"data persistence after REST/GraphQL API calls.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Warning: Database layer is often considered to be implementation details, and most of your tests should not use it directly.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"However, it can be useful to validate that REST POST method did modify data in the database and didn't persist data in cache only.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('http post and db list games') {\n    db.update(\"delete from Game\") // wipe out table\n\n    http.post(\"/api/game\", [id: \"g1\", title: \"Slay The Spire\", type: \"card rpg\", priceUsd: 20])\n    // create two games using HTTP\n    http.post(\"/api/game\", [id: \"g2\", title: \"Civilization 6\", type: \"strategy\", priceUsd: 60])\n\n    def GAME = db.table(\"GAME\")\n    GAME.should == [\"*ID\" | \"TITLE\"] { // make sure DB reflects changes\n                   __________________________\n                     \"g1\" | \"Slay The Spire\"\n                     \"g2\" | \"Civilization 6\"}\n}","title":"Database query","startLine":"db-list","endLine":"scenario-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"lang":"groovy","snippet":"scenario('db write and http list games') {\n    db.update(\"delete from Game\")\n\n    def GAME = db.table(\"GAME\")\n    // populate GAME table with two rows\n    GAME << [\"ID\" | \"TITLE\"           | \"TYPE\"     | \"PRICE_USD\"] {\n             ____________________________________________________\n             \"g1\" | \"Slay The Spire\"  | \"card rpg\" | 20\n             \"g2\" | \"Civilization 6\"  | \"strategy\" | 60  }\n\n    http.get(\"/api/game\") {\n        // expect body to contain a list of two games\n        body.should == [ \"*id\" | \"title\" ] {\n                       ___________________________\n                          \"g2\" | \"Civilization 6\"\n                          \"g1\" | \"Slay The Spire\" }\n    }\n}","title":"Database insert","startLine":"db-insert","endLine":"scenario-end","excludeStartEnd":true,"excludeRegexp":["doc.capture"],"commentsType":"inline","meta":{"stickySlide":"left"},"type":"Snippet"},{"title":"Games list JSON response","pathsFile":"game-store-list-after-db/paths.json","collapsedPaths":["root._links","root.page"],"data":[{"id":"g1","title":"Slay The Spire","type":"card rpg","priceUsd":20.0},{"id":"g2","title":"Civilization 6","type":"strategy","priceUsd":60.0}],"paths":["root[0].id","root[0].title","root[1].id","root[1].title"],"type":"Json"}]},{"title":"CLI Command","id":"cli-command","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Command line interface is our final layer to test.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Before we test admin app, let's see how ","type":"SimpleText"},{"code":"cli.","type":"InlinedCode"},{"text":" works on a simple command:","type":"SimpleText"}]},{"lang":"groovy","snippet":"cli.run(\"ls -l\")\n\ncli.run(\"ls -l\") {\n    output.should contain(\"webtau.cfg.groovy\")\n}","title":"example of command line run","startLine":"cli-basics","endLine":"cli-basics-end","excludeStartEnd":true,"highlight":[3],"meta":{"stickySlide":"left"},"type":"Snippet"},{"highlightPath":"cli-basics-ls/out.matched.txt","lines":["total 1032","drwxr-xr-x   4 mykolagolubyev  staff     128 Oct 27 16:39 auth","drwxr-xr-x  13 mykolagolubyev  staff     416 Oct 27 10:21 basicScenarios","drwxr-xr-x   4 mykolagolubyev  staff     128 Oct 27 10:21 clicommands","drwxr-xr-x   3 mykolagolubyev  staff      96 Oct 15 14:58 listeners","drwxr-xr-x   8 mykolagolubyev  staff     256 Oct 31 23:01 pages","drwxr-xr-x   3 mykolagolubyev  staff      96 Oct 31 22:59 personas","drwxr-xr-x   8 mykolagolubyev  staff     256 Oct 27 10:21 scenarios","drwxr-xr-x   3 mykolagolubyev  staff      96 Jul 29 13:24 test","drwxr-xr-x   3 mykolagolubyev  staff      96 Oct 23 20:21 utils","-rw-r--r--   1 mykolagolubyev  staff    1071 Oct 31 20:38 webtau.cfg.groovy","-rw-r--r--   1 mykolagolubyev  staff  500422 Oct 31 23:20 webtau.report.html"],"highlight":[10],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"Our admin CLI tool works similar ","type":"SimpleText"},{"code":"ls","type":"InlinedCode"},{"text":" and list games available in the system:","type":"SimpleText"}]},{"title":"Admin tool output","lines":["\u001B[36mList of games\u001B[0m","\u001B[35m6391a57f-7b59-4997-8459-1a8f88d3c0ab \u001B[33mSlay The Spire \u001B[32mcard rpg \u001B[33m20.0\u001B[0m","\u001B[35m20cb8232-6515-4c2d-9046-acc990ab4c2d \u001B[33mCivilization 6 \u001B[32mstrategy \u001B[33m60.0\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"We still develop the tool and it is not available in ","type":"SimpleText"},{"code":"PATH","type":"InlinedCode"},{"text":" yet, so we will need to use a relative path to run it.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Exposing the path to tests will make our tests brittle in the similar way how exposing UI elements definition does:","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"any time we change the tool location we will have to change tests using the tool.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Similar to UI Page Object idea, we declare CLI tools our tests need access to in a separate file/class:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package clicommands\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass CliCommands {\n    static final def adminTool = cli.command( // lazy declaration of our CLI command\n            \"java -jar ../../../../game-store-cli/target/admin-tool-jar-with-dependencies.jar\") // command line location is subject to change and should not be exposed to a test\n}","title":"Extracted CLI command definition","excludeRegexp":["Server","backend"],"commentsType":"inline","type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.gamestore\n\nimport static clicommands.CliCommands.* // convenient access to all declared command line tools\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('list games using CLI') {\n    // cleaning up DB\n    db.update(\"delete from GAME\")\n\n    // run our command line\n    adminTool.run {\n        output.should contain(\"List of games\")\n        // expect a title to be present, and nothing else\n        output.numberOfLines.should == 1\n    }\n\n    http.post(\"/api/game\", [title: \"Slay The Spire\", type: \"card rpg\", priceUsd: 20]) // pre-create data we need for the test using http layer\n    http.post(\"/api/game\", [title: \"Civilization 6\", type: \"strategy\", priceUsd: 60])\n\n    adminTool.run {\n        output.should contain(\"Slay The Spire\") // make sure output contains games we created\n        output.should contain(\"Civilization 6\")\n    }\n}","title":"Admin CLI tool test","commentsType":"inline","excludeRegexp":["cli.doc","hide","stop line"],"type":"Snippet"}]},{"title":"TableData","id":"tabledata","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We have seen ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" usage when we worked with Database and when we validated complex REST API output.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Let's take a closer look at it.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"TableData","type":"InlinedCode"},{"text":" is a core webtau data type. Think of it as a list of maps with extra functionality.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"You can assign ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" to a variable, pass it around, return from functions and use for assertions.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Data is available at runtime, and it is not a compile-time construct.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Here is an example of usage of extra ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" features to generate test data:","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('table data demo') {\n    def increment = cell.above + 1 // create increment cell function to auto increase value\n    def tableData = [\"id\"      | \"name\" | \"score\"   | \"type\"               | \"disabled\"] {\n                    ____________________________________________________________________________\n                     cell.guid | \"A\"    | 100        | \"T0R\"               | false // cell.guid generates guid\n                     cell.guid | \"B\"    | cell.above | \"MBR\"               | true  // cell.above reuses value from the row above\n                     cell.guid | \"C\"    | increment  | permute(\"PO\", \"AC\") | permute(true, false) } // permute generates multiple rows based on the values passed\n\n    println(\"table data:\")\n    println(tableData)\n    println(tableData.collect { it.score }) // standard collection operations are available on table data\n}","title":"table data quick overview","startLine":"table-data-permute","endLine":"table-data-permute-end","excludeStartEnd":true,"commentsType":"inline","type":"Snippet"},{"title":"Webtau Output","startLine":"table data demo","endLine":"100, 100","lines":["\u001B[34mtable data demo \u001B[35m(tableDataDemo.groovy)\u001B[0m","table data:",":id                                    |name|score|type |disabled:",".______________________________________.____._____._____.________.","|\"f982944c-3799-4738-b169-dfd85d588599\"|\"A\" |100  |\"T0R\"|false   |",".______________________________________.____._____._____.________|","|\"61a70270-afe4-4180-80d2-d5ab1b561758\"|\"B\" |100  |\"MBR\"|true    |",".______________________________________.____._____._____.________|","|\"e7cf8880-927d-4142-80db-2987c34b631e\"|\"C\" |101  |\"PO\" |true    |",".______________________________________.____._____._____.________|","|\"93033ad0-9d1e-4951-bad6-b76257df4a0c\"|\"C\" |102  |\"AC\" |true    |",".______________________________________.____._____._____.________|","|\"765b44c2-b0f7-4289-8641-425b56183778\"|\"C\" |103  |\"PO\" |false   |",".______________________________________.____._____._____.________|","|\"e003ace6-3d83-4861-a845-2adbfb1fcc8d\"|\"C\" |104  |\"AC\" |false   |",".______________________________________.____._____._____.________|","","[100, 100, 101, 102, 103, 104]"],"type":"CliOutput"}]},{"title":"Can I Use TableData With JUnit?","id":"can-i-use-tabledata-with-junit","type":"Section","content":[{"type":"Paragraph","content":[{"text":"It is worth noting that ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" is not specific to Groovy command line runner.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"In fact it can be used for example as JUnit5 test factory:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package com.example.junit5\n\nimport org.junit.jupiter.api.TestFactory\n\nclass DynamicTestsGroovyTest {\n    @TestFactory // Junit5 test factory that expects Stream<DynamicTest>\n    def \"test factory example\"() {\n        [\"price\" | \"quantity\" | \"outcome\"] {\n        ___________________________________\n              10 |  30        |  300\n             -10 |  30        | -300\n        }.test { // test is a what generates DynamicTest from each row\n            PriceCalculator.calculate(price, quantity).should == outcome\n        }\n    }\n}","title":"Table Data as Test Factory (Groovy)","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Moreover, ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" is not specific to Groovy and you can use Java syntax to define an instance:","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.junit5;\n\nimport org.junit.jupiter.api.DynamicTest;\nimport org.junit.jupiter.api.TestFactory;\nimport org.testingisdocumenting.webtau.data.table.TableData;\nimport org.testingisdocumenting.webtau.junit5.DynamicTests;\n\nimport java.util.stream.Stream;\n\nimport static org.testingisdocumenting.webtau.WebTauCore.*; // convenient single import for unit tests\n\nclass DynamicTestsJavaTest {\n    TableData useCases = table(\"price\", \"quantity\", \"outcome\", // java table definition\n                               ______________________________,\n                                   10 ,         30,       300,\n                                  -10 ,         30,      -300);\n    @TestFactory\n    public Stream<DynamicTest> testFactoryExample() {\n        return DynamicTests.fromTable(useCases, r -> { // generate DynamicTest per row\n            int price = r.get(\"price\");\n            int quantity = r.get(\"quantity\");\n            int outcome = r.get(\"outcome\");\n\n            actual(PriceCalculator.calculate(price, quantity)).should(equal(outcome));\n        });\n    }\n}","title":"Table Data as Test Factory (Java)","commentsType":"inline","type":"Snippet"}]},{"title":"Can I Use WebTau With JUnit?","id":"can-i-use-webtau-with-junit","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Since we are talking about JUnit and Java, let me show you an example of REST API test using JUnit5 and Java syntax:","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.junit5;\n\nimport org.junit.jupiter.api.Test;\nimport org.testingisdocumenting.webtau.junit5.WebTau;\n\nimport java.util.Map;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*; // convenient import for Java\n\n@WebTau // optional annotation to include this test into web report\npublic class PostGetJavaTest {\n    @Test\n    public void registerNewGame() {\n        Map<String, Object> payload = aMapOf( // define payload as a map\n                \"id\", \"g1\",\n                \"title\", \"Slay The Spire\",\n                \"type\", \"card rpg\",\n                \"priceUsd\", 20);\n\n        http.post(\"/api/game\", payload); // same post as in Groovy\n\n        http.get(\"/api/game/g1\", (header, body) -> {\n            body.get(\"title\").should(equal(\"Slay The Spire\")); // validating title field in the response\n        });\n    }\n}","title":"HTTP Post Get (Java)","commentsType":"inline","meta":{"stickySlide":"left 70%"},"type":"Snippet"},{"type":"Paragraph","content":[{"text":"In case of JUnit runner, webtau reads config values from ","type":"SimpleText"},{"code":"webtau.properties","type":"InlinedCode"},{"text":" resource file:","type":"SimpleText"}]},{"lang":"properties","snippet":"url=http://localhost:8080","title":"src/test/resources/webtau.properties","type":"Snippet"}]},{"title":"Reporting","id":"reporting","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As I mentioned at the beginning, webtau captures a lot of information. Information is printed to the console, but","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"also stored in a rich HTML report.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Generated report is a self-contained HTML file that can be emailed, slacked or copied to a network drive. You don't need","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to have a server to look at the report. Open it in a browser, and you will get an interactive mini app.","type":"SimpleText"}]},{"annotationsPath":"game-store-report-summary.json","imageSrc":"/blog/game-store-report-summary.png","timestamp":1604379675113,"shapes":[{"id":"circle1","type":"circle","text":"1","color":"a","x":366,"y":123,"r":15},{"id":"circle2","type":"circle","text":"2","color":"a","x":366,"y":293,"r":15},{"id":"circle3","type":"circle","text":"3","color":"a","x":366,"y":463,"r":15},{"id":"circle4","type":"circle","text":"4","color":"a","x":366,"y":633,"r":15},{"id":"circle5","type":"circle","text":"5","color":"a","x":366,"y":803,"r":15},{"id":"circle6","type":"circle","text":"6","color":"a","x":868,"y":496,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Report Summary page consist of","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Tests Runtime","type":"SimpleText"}]},{"text":" - shows overall time spend","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Tests success ratio","type":"SimpleText"}]},{"text":" - how many failed vs passed","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"HTTP Coverage","type":"SimpleText"}]},{"text":" - how many REST API operations are covered (webtau uses optional Open API spec url to discover all the operations)","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Tests run Ratio","type":"SimpleText"}]},{"text":" - how many skipped vs ran","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"HTTP calls time","type":"SimpleText"}]},{"text":" - high level stats on HTTP based APIs","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Let's click on (","type":"SimpleText"},{"code":"6","type":"InlinedCode"},{"text":") to get more details about skipped operations:","type":"SimpleText"}]},{"annotationsPath":"game-store-skipped-operations.json","imageSrc":"/blog/game-store-skipped-operations.png","timestamp":1604379676326,"shapes":[{"id":"circle7","type":"circle","text":"1","color":"a","x":333,"y":16,"r":15},{"id":"circle8","type":"circle","text":"2","color":"a","x":16,"y":120,"r":15},{"id":"circle9","type":"circle","text":"3","color":"a","x":808,"y":496,"r":15},{"id":"circle10","type":"circle","text":"4","color":"a","x":50,"y":862,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Report switched from ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Tests","type":"SimpleText"}]},{"text":" view to ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"HTTP Calls","type":"SimpleText"}]},{"text":" view (","type":"SimpleText"},{"code":"1","type":"InlinedCode"},{"text":").","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"You can see the list of operations we yet to test on the left (","type":"SimpleText"},{"code":"2","type":"InlinedCode"},{"text":").","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Number of items on the left matches the number in the summary card (","type":"SimpleText"},{"code":"3","type":"InlinedCode"},{"text":").","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"We can use panel at the bottom (","type":"SimpleText"},{"code":"4","type":"InlinedCode"},{"text":") to switch between skipped, total, passed operations or tests.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's navigate from ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Summary","type":"SimpleText"}]},{"text":" tab to ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Overal HTTP Performance","type":"SimpleText"}]},{"text":" tab. The screen shows high level picture of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"how performant our server is under test load. While it is not a true performance test, it may give you an initial glance into","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"things that may need a closer look.","type":"SimpleText"}]},{"annotationsPath":"game-store-overall-http-performance.json","imageSrc":"/blog/game-store-overall-http-performance.png","timestamp":1604379677275,"shapes":[{"id":"circle11","type":"circle","text":"1","color":"a","x":657,"y":34,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"HTTP Operations Performance","type":"SimpleText"}]},{"text":" tab provides a performance information based on Open API defined operations.","type":"SimpleText"}]},{"annotationsPath":"game-store-operations-http-performance.json","imageSrc":"/blog/game-store-operations-http-performance.png","timestamp":1604379678037,"shapes":[{"id":"circle12","type":"circle","text":"1","color":"a","x":869,"y":34,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Let's get back to ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"tests","type":"SimpleText"}]},{"text":" view (","type":"SimpleText"},{"code":"1","type":"InlinedCode"},{"text":") and select a test (","type":"SimpleText"},{"code":"2","type":"InlinedCode"},{"text":").","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"First screen we are going to see is a test ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Summary","type":"SimpleText"}]},{"text":" (","type":"SimpleText"},{"code":"3","type":"InlinedCode"},{"text":") with high level information on time taken.","type":"SimpleText"}]},{"annotationsPath":"game-store-report-test-summary.json","imageSrc":"/blog/game-store-report-test-summary.png","timestamp":1604379678975,"shapes":[{"id":"circle13","type":"circle","text":"1","color":"a","x":231,"y":16,"r":15},{"id":"circle14","type":"circle","text":"2","color":"a","x":191,"y":622,"r":15},{"id":"circle15","type":"circle","text":"3","color":"a","x":396,"y":34,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"If a test performed any HTTP calls, you going to see the ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"HTTP Calls","type":"SimpleText"}]},{"text":" tab (","type":"SimpleText"},{"code":"1","type":"InlinedCode"},{"text":"). It contains every HTTP call performed","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with captured request, response and assertions (","type":"SimpleText"},{"code":"2","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"3","type":"InlinedCode"},{"text":") information.","type":"SimpleText"}]},{"annotationsPath":"game-store-report-http-call.json","imageSrc":"/blog/game-store-report-http-call.png","timestamp":1604379679911,"shapes":[{"id":"circle16","type":"circle","text":"1","color":"a","x":491,"y":34,"r":15},{"id":"circle17","type":"circle","text":"2","color":"a","x":1000,"y":280,"r":15},{"id":"circle18","type":"circle","text":"3","color":"a","x":987,"y":377,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"If a test performed any CLI calls, you going to see the ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"CLI Calls","type":"SimpleText"}]},{"text":" tab (","type":"SimpleText"},{"code":"1","type":"InlinedCode"},{"text":"). It contains every CLI call performed","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with captured command, output and assertions (","type":"SimpleText"},{"code":"2","type":"InlinedCode"},{"text":") information.","type":"SimpleText"}]},{"annotationsPath":"game-store-report-cli-call.json","imageSrc":"/blog/game-store-report-cli-call.png","timestamp":1604379680908,"shapes":[{"id":"circle19","type":"circle","text":"1","color":"a","x":585,"y":34,"r":15},{"id":"circle20","type":"circle","text":"2","color":"a","x":447,"y":200,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Every test also has ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Steps","type":"SimpleText"}]},{"text":" tab (","type":"SimpleText"},{"code":"1","type":"InlinedCode"},{"text":") that contains every step test performed, time it took, and what Persona if any","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"performed the step (","type":"SimpleText"},{"code":"2","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"3","type":"InlinedCode"},{"text":")","type":"SimpleText"}]},{"annotationsPath":"game-store-report-steps.json","imageSrc":"/blog/game-store-report-steps.png","timestamp":1604379681871,"shapes":[{"id":"circle21","type":"circle","text":"1","color":"a","x":576,"y":34,"r":15},{"id":"circle22","type":"circle","text":"2","color":"a","x":366,"y":75,"r":15},{"id":"circle23","type":"circle","text":"3","color":"a","x":366,"y":357,"r":15}],"width":1200.0,"height":877.0,"type":"AnnotatedImage"}]},{"title":"REPL","id":"repl","type":"Section","content":[{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"REPL stands for read-eval-print-loop. It is an interactive computer programming environment that helps with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"prototyping.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"You may have already used REPL if you used","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Jupyter Notebook","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"iPython","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"R","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"MatLab","type":"SimpleText"}]}]}]},{"revealLineStop":[0,1,2,3,4],"meta":{"stickySlide":"left 30%"},"lines":["\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m 2 + 2","\u001B[1m===>\u001B[m 4","\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m a = 5","\u001B[1m===>\u001B[m 5","\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m a + 3","\u001B[1m===>\u001B[m 8"],"type":"CliOutput"},{"stickySlide":"top 30%","type":"Meta"},{"type":"Paragraph","content":[{"text":"Question: Why are we talking about REPL in the context of end to end testing?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"We want to have a fast feedback loop.","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Browser, Servers, DB setup takes time","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Preserving context","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"End to end tests - slow feedback","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"REPL - speedup feedback loop","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The faster feedback the happier you are","type":"SimpleText"}]}]}]}]},{"title":"REPL Browser","id":"repl-browser","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Writing UI tests can be time-consuming. One of the reason is it takes time to open a browser,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"run your test, add an extra line to the test, repeat.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Instead we can run webtau in repl mode like this","type":"SimpleText"}]},{"command":"webtau repl","paramsToHighlight":[],"type":"CliCommand"},{"type":"Paragraph","content":[{"text":"after that we can execute one command at a time, preserving context","type":"SimpleText"}]},{"revealLineStop":[0,3,4,7,8,14,15,18,19,23,24],"lines":["\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m browser.open(\"https://google.com\")","\u001B[34mpreparing \u001B[33mchrome\u001B[34m WebDriver\u001B[0m","\u001B[33m> \u001B[34mopening \u001B[35mhttps://google.com\u001B[0m","\u001B[32m. \u001B[34mopened \u001B[35mhttps://google.com\u001B[33m (\u001B[32m459ms\u001B[33m)\u001B[0m","\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m $('input[title=\"Search\"]')","\u001B[32melement is found: \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","\u001B[33m           getText(): \u001B[32m\u001B[0m","\u001B[33mgetUnderlyingValue(): \u001B[32m\u001B[0m","\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m $('input[title=\"Search\"]').setValue(\"test\\n\")","\u001B[33m> \u001B[34msetting value \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","  \u001B[33m> \u001B[34mclearing \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","  \u001B[32m. \u001B[34mcleared \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[33m (\u001B[32m37ms\u001B[33m)\u001B[0m","  \u001B[33m> \u001B[34msending keys \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","  \u001B[32m. \u001B[34msent keys \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[33m (\u001B[32m1s 987ms\u001B[33m)\u001B[0m","\u001B[32m. \u001B[34mset value \u001B[32mtest\\n \u001B[33mto \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[33m (\u001B[32m2s 45ms\u001B[33m)\u001B[0m","\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m $('input[title=\"Search\"]')","\u001B[32melement is found: \u001B[35mby css \u001B[1m\u001B[35minput[title=\"Search\"]\u001B[0m","\u001B[33m           getText(): \u001B[32m\u001B[0m","\u001B[33mgetUnderlyingValue(): \u001B[32mtest\u001B[0m","\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m $('h3')","\u001B[32melement is found: \u001B[35mby css \u001B[1m\u001B[35mh3\u001B[0m","\u001B[33m           getText(): \u001B[32mSpeedtest by Ookla - The Global Broadband Speed Test\u001B[0m","\u001B[33mgetUnderlyingValue(): \u001B[32mSpeedtest by Ookla - The Global Broadband Speed Test\u001B[0m","\u001B[33m               count: \u001B[32m15\u001B[0m","\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m $('h3').count.waitTo >= 0","\u001B[33m> \u001B[34mwaiting \u001B[33mto \u001B[36mcount \u001B[33mof \u001B[35mby css \u001B[1m\u001B[35mh3 \u001B[32mto be greater than or equal to 0\u001B[0m","\u001B[32m. \u001B[36mcount \u001B[33mof \u001B[35mby css \u001B[1m\u001B[35mh3 \u001B[32mgreater than or equal 0","    matches:","    ","    count:   actual: 15 <java.lang.Integer>","           expected: greater than or equal to 0 <java.lang.Integer>\u001B[33m (\u001B[32m7ms\u001B[33m)\u001B[0m"],"type":"CliOutput"}]},{"title":"REPL Database","id":"repl-database","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Database layer can be used to semi-automatically validate state of your system during experimentation.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Or it can be used to quickly wipe or setup the data. I personally use it during active development to iterate faster.","type":"SimpleText"}]},{"title":"DB REPL","revealLineStop":[0],"lines":["\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m db.query(\"select * from Game\")","\u001B[33m> \u001B[34mrunning DB query \u001B[32mselect * from Game \u001B[33mon \u001B[0m\u001B[1mprimary-db\u001B[0m","\u001B[32m. \u001B[34mran DB query \u001B[32mselect * from Game \u001B[33mon \u001B[0m\u001B[1mprimary-db\u001B[33m (\u001B[32m29ms\u001B[33m)\u001B[0m","\u001B[33mID  \u001B[33m, \u001B[0m\u001B[33mPRICE_USD\u001B[33m, \u001B[0m\u001B[33mTITLE           \u001B[33m, \u001B[0m\u001B[33mTYPE      \u001B[0m","\"g1\"\u001B[33m, \u001B[0m\u001B[36m    20.00\u001B[0m\u001B[33m, \u001B[0m\"Slay The Spire\"\u001B[33m, \u001B[0m\"card rpg\"","\"g2\"\u001B[33m, \u001B[0m\u001B[36m    40.00\u001B[0m\u001B[33m, \u001B[0m\"Doom\"          \u001B[33m, \u001B[0m\"fps\"     "],"type":"CliOutput"}]},{"title":"REPL Test Selection","id":"repl-test-selection","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The true power of webtau REPL mode comes from combining Test runs and experimentation in one go.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"We can run webtau in repl mode and at the same time pass the test files we want to work with:","type":"SimpleText"}]},{"command":"webtau scenarios/gamestore/adminCliTool.groovy scenarios/gamestore/userPreferencesRest.groovy scenarios/gamestore/userPreferencesGraphQL.groovy scenarios/gamestore/userPreferencesUi.groovy repl","paramsToHighlight":[],"meta":{"stickySlide":"top 30%"},"type":"CliCommand"},{"title":"Test files listing","revealLineStop":[0],"meta":{"stickySlide":"left"},"lines":["\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m ls","\u001B[34mTest files:\u001B[0m","\u001B[33m0\u001B[35m scenarios/gamestore/adminCliTool.groovy\u001B[0m","\u001B[33m1\u001B[35m scenarios/gamestore/userPreferencesRest.groovy\u001B[0m","\u001B[33m2\u001B[35m scenarios/gamestore/userPreferencesGraphQL.groovy\u001B[0m","\u001B[33m3\u001B[35m scenarios/gamestore/userPreferencesUi.groovy\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"Once you list all test files, you can select one by ","type":"SimpleText"},{"url":"https://testingisdocumenting.org/webtau/REPL/test-runs#test-file-selection","isFile":false,"type":"Link","content":[{"text":"either index or text","type":"SimpleText"}]}]},{"title":"Test file selection","revealLineStop":[0],"lines":["\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m s \"userPreferencesRest\"","\u001B[34mTest scenarios of \u001B[35mscenarios/gamestore/userPreferencesRest.groovy\u001B[34m:\u001B[0m","\u001B[33m0\u001B[35m save preferences without auth\u001B[0m","\u001B[33m1\u001B[35m save preferences with explicit auth\u001B[0m","\u001B[33m2\u001B[35m save preferences with personas auth\u001B[0m","\u001B[33m3\u001B[35m read preferences with personas auth\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"After test file selection, you can run one or more scenarios on demand.","type":"SimpleText"}]},{"title":"Test ran, context is preserved","revealLineStop":[0],"endLine":"Bob","excludeRegexp":["before first test"],"lines":["\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m r \"save preferences with personas auth\"","\u001B[0m","\u001B[34mrunning: \u001B[35mscenarios/gamestore/userPreferencesRest.groovy \u001B[33msave preferences with personas auth\u001B[0m","\u001B[34msave preferences with personas auth \u001B[35m(userPreferencesRest.groovy)\u001B[0m","\u001B[33m> \u001B[33mAlice \u001B[0m\u001B[34mexecuting HTTP PUT \u001B[35mhttp://localhost:8080/api/user-preferences\u001B[0m","\u001B[33mrequest\u001B[36m (application/json):\u001B[0m","\u001B[33m{\u001B[0m","  \u001B[35m\"favoriteGenre\": \u001B[32m\"RPG\"\u001B[0m","\u001B[33m}\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[0m\u001B[1mbody.userId \u001B[32mequals \"uid-alice\"","      matches:","      ","      body.userId:   actual: \"uid-alice\" <java.lang.String>","                   expected: \"uid-alice\" <java.lang.String>\u001B[33m (\u001B[32m18ms\u001B[33m)\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[0m\u001B[1mbody.favoriteGenre \u001B[32mequals \"RPG\"","      matches:","      ","      body.favoriteGenre:   actual: \"RPG\" <java.lang.String>","                          expected: \"RPG\" <java.lang.String>\u001B[33m (\u001B[32m0ms\u001B[33m)\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[0m\u001B[1mheader.statusCode \u001B[32mequals 200","      matches:","      ","      header.statusCode:   actual: 200 <java.lang.Integer>","                         expected: 200 <java.lang.Integer>\u001B[33m (\u001B[32m1ms\u001B[33m)\u001B[0m","  \u001B[33m> \u001B[33mAlice \u001B[0m\u001B[34mvalidating \u001B[36mrequest and response\u001B[0m","  \u001B[32m. \u001B[33mAlice \u001B[0m\u001B[34mvalidated \u001B[36mrequest and response\u001B[33m (\u001B[32m149ms\u001B[33m)\u001B[0m","\u001B[33mresponse\u001B[36m (application/json):\u001B[0m","\u001B[33m{\u001B[0m","  \u001B[35m\"userId\": \u001B[32m\u001B[1m\u001B[32m__\"uid-alice\"__\u001B[33m,\u001B[0m","  \u001B[35m\"favoriteGenre\": \u001B[32m\u001B[1m\u001B[32m__\"RPG\"__\u001B[0m","\u001B[33m}\u001B[0m","\u001B[32m. \u001B[33mAlice \u001B[0m\u001B[34mexecuted HTTP PUT \u001B[35mhttp://localhost:8080/api/user-preferences\u001B[33m (\u001B[32m320ms\u001B[33m)\u001B[0m","\u001B[33m> \u001B[33mBob \u001B[0m\u001B[34mexecuting HTTP PUT \u001B[35mhttp://localhost:8080/api/user-preferences\u001B[0m"],"type":"CliOutput"},{"type":"Paragraph","content":[{"text":"When I write tests, I keep re-running (","type":"SimpleText"},{"code":"r","type":"InlinedCode"},{"text":") a current test under development, then experiment with a few lines in REPL mode,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"do some checks, update the test file and re-run it (","type":"SimpleText"},{"code":"r","type":"InlinedCode"},{"text":"). Webtau will reload test file and pickup your changes.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"After each test run, context is preserved, browser is open in the last location, DB is up to date, and REST/GraphQL APIs are primed.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Here is an example of running a ","type":"SimpleText"},{"code":"db.","type":"InlinedCode"},{"text":" query after a test run:","type":"SimpleText"}]},{"title":"Experiments after a test run","revealLineStop":[0],"lines":["\u001B[1mwebtau:\u001B[m000\u001B[1m>\u001B[m db.query(\"select * from user_preferences\")","\u001B[33m> \u001B[34mrunning DB query \u001B[32mselect * from user_preferences \u001B[33mon \u001B[0m\u001B[1mprimary-db\u001B[0m","\u001B[32m. \u001B[34mran DB query \u001B[32mselect * from user_preferences \u001B[33mon \u001B[0m\u001B[1mprimary-db\u001B[33m (\u001B[32m30ms\u001B[33m)\u001B[0m","\u001B[33mUSER_ID    \u001B[33m, \u001B[0m\u001B[33mFAVORITE_GENRE\u001B[0m","\"user-a\"   \u001B[33m, \u001B[0m\"RPG\"         ","\"uid-alice\"\u001B[33m, \u001B[0m\"RPG\"         ","\"uid-bob\"  \u001B[33m, \u001B[0m\"Strategy\"    ","\u001B[0m"],"type":"CliOutput"}]},{"title":"Testing is Documenting","id":"testing-is-documenting","type":"Section","content":[{"type":"Paragraph","content":[{"text":"When we document things, we try them out and make sure they work as intended.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"When we test things, we follow happy paths and edge cases.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Happy path tests often cover what our users will do. Happy path tests also often match the things we document.","type":"SimpleText"}]},{"presentationBulletListType":"HorizontalStripes","presentationParagraph":"default","stickySlide":"top 50%","type":"Meta"},{"type":"Paragraph","content":[{"text":"Documentation is hard:","type":"SimpleText"}]},{"presentationParagraph":"","type":"Meta"},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"id":"pen-tool","type":"Icon"},{"text":" Mostly manual labor","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"id":"archive","type":"Icon"},{"text":" Often becomes outdated","type":"SimpleText"}]}]}]},{"presentationBulletListType":"HorizontalStripes","stickySlide":"clear top 30%","type":"Meta"},{"type":"Paragraph","content":[{"text":"Question: How do we make documentation easier to write and maintain?","type":"SimpleText"}]},{"presentationParagraph":"","stickySlide":"top 40%","type":"Meta"},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"Artifacts capture","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"We already have things in our codebase that we can use to help with our product documentation. Example","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"code snippets, GraphQL schema files, basic config files.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"By writing happy path tests we can add a few more to the list:","type":"SimpleText"}]},{"presentationBulletListType":"RevealBoxes","type":"Meta"},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"CLI Outputs","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"HTTP responses","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Screenshots","type":"SimpleText"}]}]}]},{"stickySlide":"clear","type":"Meta"},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"The major part of this content was generated by running tests","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"Webtau console outputs your saw, the REST/GraphQL API response, Game Store and Webtau Report screenshots, all of it was","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"automatially generated by running tests.","type":"SimpleText"}]}]},{"title":"Capturing Test Artifacts","id":"capturing-test-artifacts","type":"Section","content":[{"type":"Paragraph","content":[{"text":"When I was showing your snippets of code before I was hidding some code from your.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Let's take a look.","type":"SimpleText"}]},{"lang":"groovy","snippet":"scenario('db write and http list games') {\n    db.update(\"delete from Game\")\n\n    def GAME = db.table(\"GAME\")\n    GAME << [\"ID\" | \"TITLE\"           | \"TYPE\"     | \"PRICE_USD\"] {\n             ____________________________________________________\n             \"g1\" | \"Slay The Spire\"  | \"card rpg\" | 20\n             \"g2\" | \"Civilization 6\"  | \"strategy\" | 60  }\n\n    http.get(\"/api/game\") {\n        body.should == [ \"*id\" | \"title\" ] {\n                       ___________________________\n                          \"g2\" | \"Civilization 6\"\n                          \"g1\" | \"Slay The Spire\" }\n    }\n    http.doc.capture(\"game-store-list-after-db\")\n}","title":"HTTP doc capture","startLine":"db-insert","endLine":"scenario-end","excludeStartEnd":true,"highlight":[15],"excludeRegexp":["//"],"type":"Snippet"},{"type":"Paragraph","content":[{"code":"http.doc.capture","type":"InlinedCode"},{"text":" generates a directory with captured response, request, url, assertions, etc","type":"SimpleText"}]},{"scaleRatio":0.5,"meta":{"stickySlide":"left 40%"},"imageSrc":"/blog/articles/img/ue2e-ide-doc-artifacts.png","timestamp":1604443298292,"shapes":[],"width":467.0,"height":607.0,"type":"AnnotatedImage"},{"lang":"txt","snippet":"/api/game","title":"game-store-list-after-db/request.url.txt","meta":{"stickySlide":"top 20%"},"type":"Snippet"},{"lang":"json","snippet":"[ {\n  \"id\" : \"g1\",\n  \"title\" : \"Slay The Spire\",\n  \"type\" : \"card rpg\",\n  \"priceUsd\" : 20.0\n}, {\n  \"id\" : \"g2\",\n  \"title\" : \"Civilization 6\",\n  \"type\" : \"strategy\",\n  \"priceUsd\" : 60.0\n} ]","title":"game-store-list-after-db/response.json","meta":{"stickySlide":"top 70%"},"type":"Snippet"},{"lang":"json","snippet":"[\"root[0].id\",\"root[0].title\",\"root[1].id\",\"root[1].title\"]","title":"game-store-list-after-db/paths.json","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To capture screenshots webtau has ","type":"SimpleText"},{"code":"browser.doc.capture","type":"InlinedCode"}]},{"lang":"groovy","snippet":"scenario('filter by price') {\n    landing.reopen()\n    landing.filterBelow60.setValue(true)\n\n    landing.titles.waitTo == ['Doom', 'Slay The Spire']\n    browser.doc.withAnnotations(\n            browser.doc.badge(landing.filterText).toTheRight(),\n            browser.doc.badge(landing.labelBelow60).toTheRight())\n            .capture('admin-ui-filter')\n}","title":"UI doc capture","startLine":"filter by price","highlight":[5],"excludeRegexp":["hide","//"],"meta":{"stickySlide":"left 50%"},"type":"Snippet"},{"annotationsPath":"admin-ui-filter.json","title":"admin-ui-filter.json","caption":"admin-ui-filter.png","meta":{"stickySlide":"top 40%"},"imageSrc":"/blog/admin-ui-filter.png","timestamp":1604986282688,"shapes":[{"id":"circle1","type":"circle","text":"1","color":"a","x":224,"y":88,"r":15},{"id":"circle2","type":"circle","text":"2","color":"a","x":345,"y":88,"r":15}],"width":1000.0,"height":677.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"In addition to the screenshot ","type":"SimpleText"},{"code":".png","type":"InlinedCode"},{"text":" file webtau also captures annotations placement and type:","type":"SimpleText"}]},{"lang":"json","snippet":"{\n  \"shapes\" : [ {\n    \"id\" : \"circle1\",\n    \"type\" : \"circle\",\n    \"text\" : \"1\",\n    \"color\" : \"a\",\n    \"x\" : 224,\n    \"y\" : 88,\n    \"r\" : 15\n  }, {\n    \"id\" : \"circle2\",\n    \"type\" : \"circle\",\n    \"text\" : \"2\",\n    \"color\" : \"a\",\n    \"x\" : 345,\n    \"y\" : 88,\n    \"r\" : 15\n  } ],\n  \"pixelRatio\" : 2\n}","title":"admin-ui-filter.json","type":"Snippet"},{"type":"Paragraph","content":[{"text":"In case of ","type":"SimpleText"},{"code":"CLI","type":"InlinedCode"},{"text":" ","type":"SimpleText"},{"code":"cli.doc.capture","type":"InlinedCode"},{"text":" captures the command that was run, its output and assertions performed","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.gamestore\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('list games using CLI') {\n    db.update(\"delete from GAME\")\n\n    adminTool.run {\n        output.should contain(\"List of games\")\n        output.numberOfLines.should == 1\n    }\n\n    http.post(\"/api/game\", [title: \"Civilization 6\", type: \"strategy\", priceUsd: 60])\n\n    adminTool.run {\n        output.should contain(\"Civilization 6\")\n    }\n    cli.doc.capture(\"list-games-cli\")\n}","title":"CLI doc capture","excludeRegexp":["//"],"highlight":[17],"meta":{"stickySlide":"left 40%"},"type":"Snippet"},{"lang":"txt","snippet":"java -jar ../../../../game-store-cli/target/admin-tool-jar-with-dependencies.jar","title":"list-games-cli/command.txt","meta":{"stickySlide":"top"},"type":"Snippet"},{"title":"list-games-cli/out.txt","lines":["\u001B[36mList of games\u001B[0m","\u001B[35m6391a57f-7b59-4997-8459-1a8f88d3c0ab \u001B[33mSlay The Spire \u001B[32mcard rpg \u001B[33m20.0\u001B[0m","\u001B[35m20cb8232-6515-4c2d-9046-acc990ab4c2d \u001B[33mCivilization 6 \u001B[32mstrategy \u001B[33m60.0\u001B[0m"],"type":"CliOutput"}]},{"title":"Example of Generated Documentation","id":"example-of-generated-documentation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"I used the captured information to generate the content of this blog/presentation. At my work I use captured artifacts","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to produce user guides. This approach makes guides to be always up-to date and validated.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Here is an example of Game Store manual created with captured artifacts and ","type":"SimpleText"},{"url":"https://testingisdocumenting.org/znai/","isFile":false,"type":"Link","content":[{"text":"Znai","type":"SimpleText"}]},{"text":" documentation system.","type":"SimpleText"}]},{"scaleRatio":0.5,"border":true,"imageSrc":"/blog/game-store-docs-web-ui.png","timestamp":1604461671567,"shapes":[],"width":1322.0,"height":841.0,"type":"AnnotatedImage"},{"scaleRatio":0.5,"border":true,"imageSrc":"/blog/game-store-docs-rest-api.png","timestamp":1604461672368,"shapes":[],"width":1322.0,"height":841.0,"type":"AnnotatedImage"},{"scaleRatio":0.5,"border":true,"imageSrc":"/blog/game-store-docs-cli.png","timestamp":1604461673113,"shapes":[],"width":1322.0,"height":841.0,"type":"AnnotatedImage"}]},{"title":"Summary","id":"summary","type":"Section","content":[{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We tested Game Store on multiple layers, using one layer to set-up and re-inforce tests on the other layers.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We used consistent matchers and concepts like ","type":"SimpleText"},{"code":"should","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"waitTo","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"Persona","type":"InlinedCode"},{"text":" across layers.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We saw how each step and assertions is captured by webtau and written to console and rich HTML report.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We saw how REPL can improve feedback loop and make you write tests faster.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We saw how writing tests can generate artifacts to help you with writing User facing documentation.","type":"SimpleText"}]}]}]}]},{"title":"To Get Started","id":"to-get-started","type":"Section","content":[{"presentationParagraph":"default","stickySlide":"top","type":"Meta"},{"type":"Paragraph","content":[{"text":"WebTau - GitHub: ","type":"SimpleText"},{"url":"https://github.com/testingisdocumenting/webtau","isFile":false,"type":"Link","content":[{"text":"https://github.com/testingisdocumenting/webtau","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"type":"HardLineBreak"},{"text":"WebTau - User Guide: ","type":"SimpleText"},{"url":"https://testingisdocumenting.org/webtau","isFile":false,"type":"Link","content":[{"text":"https://testingisdocumenting.org/webtau","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"Znai - Github: ","type":"SimpleText"},{"url":"https://github.com/testingisdocumenting/znai","isFile":false,"type":"Link","content":[{"text":"https://github.com/testingisdocumenting/znai","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"type":"HardLineBreak"},{"text":"Znai - User Guide: ","type":"SimpleText"},{"url":"https://testingisdocumenting.org/znai","isFile":false,"type":"Link","content":[{"text":"https://testingisdocumenting.org/znai","type":"SimpleText"}]}]}]}],"lastModifiedTime":1605119499502,"tocItem":{"sectionTitle":"Entry","pageTitle":"Ultimate End To End Test","pageMeta":{"date":["2020-10-30"],"summary":["Test across multiple layers like REST/GraphQL API, Web UI, CLI, Database. Use REPL to tighten feedback loop. "]},"dirName":"entry","fileName":"ultimate-end-to-end-test","viewOnRelativePath":"articles/ultimate-end-to-end-test.md","pageSectionIdTitles":[{"title":"WebTau","id":"webtau"},{"title":"Testing Game Store","id":"testing-game-store"},{"title":"WebTau Introduction","id":"webtau-introduction"},{"title":"Basic Configuration","id":"basic-configuration"},{"title":"Game Store REST API","id":"game-store-rest-api"},{"title":"HTTP Explicit Auth","id":"http-explicit-auth"},{"title":"Personas","id":"personas"},{"title":"HTTP Implicit Auth","id":"http-implicit-auth"},{"title":"GraphQL","id":"graphql"},{"title":"GraphQL Explicit Auth","id":"graphql-explicit-auth"},{"title":"GraphQL Persona Auth","id":"graphql-persona-auth"},{"title":"Personas Re-use","id":"personas-re-use"},{"title":"Browser","id":"browser"},{"title":"Game Store UI","id":"game-store-ui"},{"title":"UI Page Object","id":"ui-page-object"},{"title":"WaitTo","id":"waitto"},{"title":"Browser Explicit Auth","id":"browser-explicit-auth"},{"title":"Browser Implicit Auth","id":"browser-implicit-auth"},{"title":"Browser WebSocket","id":"browser-websocket"},{"title":"Database","id":"database"},{"title":"CLI Command","id":"cli-command"},{"title":"TableData","id":"tabledata"},{"title":"Can I Use TableData With JUnit?","id":"can-i-use-tabledata-with-junit"},{"title":"Can I Use WebTau With JUnit?","id":"can-i-use-webtau-with-junit"},{"title":"Reporting","id":"reporting"},{"title":"REPL","id":"repl"},{"title":"REPL Browser","id":"repl-browser"},{"title":"REPL Database","id":"repl-database"},{"title":"REPL Test Selection","id":"repl-test-selection"},{"title":"Testing is Documenting","id":"testing-is-documenting"},{"title":"Capturing Test Artifacts","id":"capturing-test-artifacts"},{"title":"Example of Generated Documentation","id":"example-of-generated-documentation"},{"title":"Summary","id":"summary"},{"title":"To Get Started","id":"to-get-started"}]}}]