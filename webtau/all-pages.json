[{"type":"Page","content":[{"title":"Finders","id":"finders","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Finders in webtau is the initial web element selection that could select one or more elements.","type":"SimpleText"}]}]},{"title":"By CSS","id":"by-css","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"$","type":"InlinedCode"},{"text":" to select an element by a given ","type":"SimpleText"},{"code":"css","type":"InlinedCode"},{"text":" selector.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def welcomeMessage = $('#welcome')\nwelcomeMessage.should == 'hello'","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If more than one element is matched, the first one will be used for actions and assertions.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def menu = $('ul li a')\nmenu.should == 'book'","type":"Snippet"},{"type":"Paragraph","content":[{"text":"While ","type":"SimpleText"},{"code":"click","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"sendKeys","type":"InlinedCode"},{"text":" will always work on a first element only, the matchers can work with a list of things.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def menu = $('ul li a')\nmenu.should == ['book', 'orders', 'help']","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: declaring element this way will not trigger element search right away.","type":"SimpleText"}]},{"paths":["div.div[0]","div.div[1].ul.li[0].a"],"meta":{"rightSide":true},"xmlAsJson":{"tagName":"ul","attributes":[],"children":[{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/book\""}],"children":[{"tagName":"","text":"book"}]}]},{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/orders\""}],"children":[{"tagName":"","text":"orders"}]}]},{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/help\""}],"children":[{"tagName":"","text":"help"}]}]}]},"type":"Xml"}]},{"title":"Filters","id":"filters","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can use filters to narrow down elements selected by finders like ","type":"SimpleText"},{"code":"css","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Filter comes in a way of ","type":"SimpleText"},{"code":"get","type":"InlinedCode"},{"text":" method. Parameter is one of the following","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Element number","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Element text","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Element regexp","type":"SimpleText"}]}]}]},{"lang":"groovy","snippet":"def ordersMenu = $('ul li a').get(2)\nordersMenu.should == 'orders'","title":"Number","type":"Snippet"},{"lang":"groovy","snippet":"def ordersMenu = $('ul li a').get('orders')\nordersMenu.should == 'orders'","title":"Text","type":"Snippet"},{"lang":"groovy","snippet":"def ordersMenu = $('ul li a').get(~/ord/)\nordersMenu.should == 'orders'","title":"Regexp","type":"Snippet"},{"paths":["div.div[1].ul.li[1].a"],"meta":{"rightSide":true},"xmlAsJson":{"tagName":"ul","attributes":[],"children":[{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/book\""}],"children":[{"tagName":"","text":"book"}]}]},{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/orders\""}],"children":[{"tagName":"","text":"orders"}]}]},{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/help\""}],"children":[{"tagName":"","text":"help"}]}]}]},"type":"Xml"}]},{"title":"Chaining","id":"chaining","type":"Section","content":[{"type":"Paragraph","content":[{"text":"After you filtered, you can use finders again to find nested elements.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def ordersMenu = $('ul li').get(2).find('a')\nordersMenu.should == 'orders'","title":"Nested css selector","type":"Snippet"},{"paths":["div.div[1].ul.li[1].a"],"meta":{"rightSide":true},"xmlAsJson":{"tagName":"ul","attributes":[],"children":[{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/book\""}],"children":[{"tagName":"","text":"book"}]}]},{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/orders\""}],"children":[{"tagName":"","text":"orders"}]}]},{"tagName":"li","attributes":[],"children":[{"tagName":"a","attributes":[{"name":"href","value":"\"/help\""}],"children":[{"tagName":"","text":"help"}]}]}]},"type":"Xml"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Finders And Filters","pageMeta":{"type":["two-sides"]},"fileName":"finders-and-filters","dirName":"UI","pageSectionIdTitles":[{"title":"Finders","id":"finders"},{"title":"By CSS","id":"by-css"},{"title":"Filters","id":"filters"},{"title":"Chaining","id":"chaining"}]}},{"type":"Page","content":[{"title":"Create","id":"create","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use language specific DSL to create ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" instance:","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"[\"Col A\" | \"Col B\" | \"Col C\"] {\n________________________________\n   \"v1a\" |   \"v1b\" | \"v1c\"\n   \"v2a\" |   \"v2b\" | \"v2c\" }","entry":"createTableWithUnderscore","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"table(\"Col A\", \"Col B\", \"Col C\",\n      ________________________________,\n        \"v1a\",   \"v1b\", \"v1c\",\n        \"v2a\",   \"v2b\", \"v2c\")","entry":"createTableDataInOneGo","bodyOnly":true,"removeReturn":true,"removeSemicolon":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: The example above assumes ","type":"SimpleText"},{"code":"import static org.testingisdocumenting.webtau.WebTauCore.*","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"import static org.testingisdocumenting.webtau.WebTauDsl.*","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Additionally ","type":"SimpleText"},{"code":"WebTauCore","type":"InlinedCode"},{"text":" has header-separating","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"lines defined using underscores ","type":"SimpleText"},{"code":"___","type":"InlinedCode"},{"text":" of various lengths, which you can optionally use for aesthetics.","type":"SimpleText"}]}]}],"type":"Tabs"},{"type":"Paragraph","content":[{"text":"Using ","type":"SimpleText"},{"code":"____","type":"InlinedCode"},{"text":" underscore is optional and is there for aesthetics only","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"[\"Col A\" | \"Col B\" | \"Col C\"] {\n   \"v1a\" |   \"v1b\" | \"v1c\"\n   \"v2a\" |   \"v2b\" | \"v2c\" }","entry":"createTableWithoutUnderscore","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"table(\"Col A\", \"Col B\", \"Col C\").values(\n        \"v1a\",   \"v1b\", \"v1c\",\n        \"v2a\",   \"v2b\", \"v2c\")","entry":"createTableDataSeparateValues","bodyOnly":true,"removeReturn":true,"removeSemicolon":true,"type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Permutations","id":"permutations","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"permute(v1, v2)","type":"InlinedCode"},{"text":" to automatically generate multiple rows.","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"[\"Col A\"              | \"Col B\"         | \"Col C\"] {\n___________________________________________________________\n permute(true, false) | \"v1b\"           | permute('a', 'b')\n \"v2a\"                | permute(10, 20) | \"v2c\" }","entry":"createTableDataWithPermute","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"table(\"Col A\"              , \"Col B\"         , \"Col C\",\n      ________________________________________________________________,\n       permute(true, false), \"v1b\"           , permute('a', 'b'),\n       \"v2a\"               , permute(10, 20) , \"v2c\")","entry":"createTableDataWithPermute","bodyOnly":true,"removeReturn":true,"removeSemicolon":true,"type":"Snippet"}]}],"type":"Tabs"},{"table":{"columns":[{"title":"Col A"},{"title":"Col B"},{"title":"Col C"}],"data":[[[{"type":"Paragraph","content":[{"text":"true","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"v1b","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"a","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"v1b","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"a","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"true","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"v1b","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"b","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"v1b","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"b","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"v2a","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"10","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"v2c","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"v2a","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"20","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"v2c","type":"SimpleText"}]}]]]},"type":"Table"}]},{"title":"Cell Above Value Reference","id":"cell-above-value-reference","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"cell.above","type":"InlinedCode"},{"text":" to refer to the previous row value","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"[\"Name\" | \"Start Date\"              | \"Games To Play\" ] {\n ______________________________________________________\n \"John\" | LocalDate.of(2016, 6, 20) | 10\n \"Bob\"  | cell.above                |  8\n \"Mike\" | cell.above                | 14\n\n \"Drew\" | LocalDate.of(2016, 6, 22) | 10\n \"Pete\" | cell.above                | 11\n \"Max\"  | cell.above                |  3 }","entry":"createTableDataWithAboveRef","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"table(\"Name\", \"Start Date\"             , \"Games To Play\",\n      ________________________________________________,\n      \"John\", LocalDate.of(2016, 6, 20), 10,\n      \"Bob\" , cell.above               ,  8,\n      \"Mike\", cell.above               , 14,\n\n      \"Drew\", LocalDate.of(2016, 6, 22), 10,\n      \"Pete\", cell.above               , 11,\n      \"Max\" , cell.above               ,  3)","entry":"createTableDataWithAboveRef","bodyOnly":true,"removeReturn":true,"removeSemicolon":true,"type":"Snippet"}]}],"type":"Tabs"},{"table":{"columns":[{"title":"Name"},{"title":"Start Date"},{"title":"Games To Play"}],"data":[[[{"type":"Paragraph","content":[{"text":"John","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-20","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"10","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"Bob","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-20","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"8","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"Mike","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-20","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"14","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"Drew","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-22","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"10","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"Pete","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-22","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"11","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"Max","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-22","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"3","type":"SimpleText"}]}]]]},"type":"Table"}]},{"title":"Cell Above Math","id":"cell-above-math","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"cell.above.plus|minus","type":"InlinedCode"},{"text":" to generate a derived value based on the previous row value","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"[\"Name\" | \"Start Date\"              | \"Games To Play\" ] {\n ______________________________________________________\n \"John\" | LocalDate.of(2016, 6, 20) | 10\n \"Bob\"  | cell.above                | cell.above + 1\n \"Mike\" | cell.above                | cell.above + 1 }","entry":"createTableDataWithAboveRefAndMath","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"table(\"Name\", \"Start Date\"             , \"Games To Play\",\n     ________________________________________________________________,\n      \"John\", LocalDate.of(2016, 6, 20), 10,\n      \"Bob\" , cell.above               , cell.above.plus(1),\n      \"Mike\", cell.above               , cell.above.plus(1))","entry":"createTableDataWithAboveRefAndMath","bodyOnly":true,"removeReturn":true,"removeSemicolon":true,"type":"Snippet"}]}],"type":"Tabs"},{"table":{"columns":[{"title":"Name"},{"title":"Start Date"},{"title":"Games To Play"}],"data":[[[{"type":"Paragraph","content":[{"text":"John","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-20","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"10","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"Bob","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-20","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"11","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"Mike","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2016-06-20","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"12","type":"SimpleText"}]}]]]},"type":"Table"},{"type":"Paragraph","content":[{"text":"Extract ","type":"SimpleText"},{"code":"cell.above.operation","type":"InlinedCode"},{"text":" to make your intentions clearer","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"def increment = cell.above + 1\n\n[\"Name\" | \"Start Date\"              | \"Games To Play\" ] {\n ______________________________________________________\n \"John\" | LocalDate.of(2016, 6, 20) | 10\n \"Bob\"  | cell.above                | increment\n \"Mike\" | cell.above                | increment }","entry":"createTableDataWithAboveRefAndMathExtracted","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"TableDataCellValueGenerator<?> increment = cell.above.plus(1)\n\ntable(\"Name\", \"Start Date\"             , \"Games To Play\",\n     ________________________________________________________________,\n      \"John\", LocalDate.of(2016, 6, 20), 10,\n      \"Bob\" , cell.above               , increment,\n      \"Mike\", cell.above               , increment)","entries":["createIncrementExample","createTableDataWithAboveRefAndMathExtracted"],"bodyOnly":true,"removeReturn":true,"removeSemicolon":true,"type":"Snippet"}]}],"type":"Tabs"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"Reference","pageTitle":"Table Data","pageMeta":{},"fileName":"table-data","dirName":"reference","pageSectionIdTitles":[{"title":"Create","id":"create"},{"title":"Permutations","id":"permutations"},{"title":"Cell Above Value Reference","id":"cell-above-value-reference"},{"title":"Cell Above Math","id":"cell-above-math"}]}},{"type":"Page","content":[{"title":"Open","id":"open","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To open a page use ","type":"SimpleText"},{"code":"browser.open","type":"InlinedCode"},{"text":". Browser will load a page only if the current url doesn't match the passed one.","type":"SimpleText"}]},{"lang":"groovy","snippet":"search.submit('query')\n\nbrowser.open(\"/search\") // page is not be ing refreshed\nsearch.searchMessage.should == 'searching for query'","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: relative url will be automatically expanded to the full url based on the ","type":"SimpleText"},{"url":"/webtau/UI/basic-configuration","isFile":false,"type":"Link","content":[{"text":"configuration","type":"SimpleText"}]}]}]},{"title":"Reopen","id":"reopen","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"brower.reopen","type":"InlinedCode"},{"text":" to force open the page even if the page url already matches the passed one.","type":"SimpleText"}]},{"lang":"groovy","snippet":"search.submit('name')\n\nbrowser.reopen(\"/search\") // page is going to be refreshed\nsearch.searchMessage.should == ''","commentsType":"inline","type":"Snippet"}]},{"title":"Refresh","id":"refresh","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"browser.refresh","type":"InlinedCode"},{"text":" to refresh current page.","type":"SimpleText"}]},{"lang":"groovy","snippet":"search.submit('name')\n\nbrowser.reopen(\"/search\") // page is going to be refreshed\nsearch.searchMessage.should == ''","commentsType":"inline","type":"Snippet"}]},{"title":"Restart","id":"restart","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"browser.restart","type":"InlinedCode"},{"text":" to restart a browser and open last opened url.","type":"SimpleText"}]},{"lang":"groovy","snippet":"browser.open('/local-storage')\nbrowser.localStorage.setItem('favoriteColor', 'pretty')\n\nbrowser.refresh()\n$('#favorite-color').should == 'pretty'\n\nbrowser.restart()\n$('#favorite-color').should == ''","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: restarting creates a clean instance of a browser. Local storage is going to be reset.","type":"SimpleText"}]}]},{"title":"Assert URL","id":"assert-url","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"browser.url","type":"InlinedCode"},{"text":" to assert on or wait for url changes.","type":"SimpleText"}]},{"lang":"txt","snippet":"http://example.com/resource/id?type=full&debug=true#subId","title":"sample url","type":"Snippet"},{"lang":"groovy","snippet":"browser.url.path.should == '/resource/id'\nbrowser.url.query.should == 'type=full&debug=true'\nbrowser.url.ref.should == 'subId'","title":"asserting url parts","entry":"should expose url parts with should","bodyOnly":true,"type":"Snippet"},{"lang":"groovy","snippet":"browser.url.should == 'http://example.com/resource/id?type=full&debug=true#subId'","title":"asserting full url","entry":"full part should be optional and default during assertion","bodyOnly":true,"type":"Snippet"},{"lang":"groovy","snippet":"browser.url.path.waitTo == '/resource/id'\nbrowser.url.query.waitTo == 'type=full&debug=true'\nbrowser.url.ref.waitTo == 'subId'","title":"waiting on url parts","entry":"should expose url parts with wait","bodyOnly":true,"type":"Snippet"}]},{"title":"Persist URL","id":"persist-url","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"browser.saveCurrentUrl","type":"InlinedCode"},{"text":" to save url in a local cache and ","type":"SimpleText"},{"code":"browser.openSavedUrl","type":"InlinedCode"},{"text":" to open a page later.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"It can be handy in multipart tests where first part creates an entity and the second part","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"updates the created entity.","type":"SimpleText"}]},{"lang":"groovy","snippet":"browser.open('/resource-creation')\n\n$('#new').click()\nbrowser.saveCurrentUrl()","type":"Snippet"},{"type":"Paragraph","content":[{"text":"In order to simplify tests development of a second part you can run first part once, save URL,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and iterate on a second part by opening a page using saved URL.","type":"SimpleText"}]},{"lang":"groovy","snippet":"browser.openSavedUrl()\n// continue resource related manipulations","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: url is stored in a local cache file and will survive tests restart.","type":"SimpleText"}]}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"UI","pageTitle":"Navigation","pageMeta":{},"fileName":"navigation","dirName":"UI","pageSectionIdTitles":[{"title":"Open","id":"open"},{"title":"Reopen","id":"reopen"},{"title":"Refresh","id":"refresh"},{"title":"Restart","id":"restart"},{"title":"Assert URL","id":"assert-url"},{"title":"Persist URL","id":"persist-url"}]}},{"type":"Page","content":[{"title":"WebTau Runner","id":"webtau-runner","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can use webtau ","type":"SimpleText"},{"code":"http.","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"browser.","type":"InlinedCode"},{"text":" methods as in a junit 5 tests, but to enable reporting you need to use","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"@Webtau","type":"InlinedCode"},{"text":" annotation","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"package com.example.tests.junit5\n\nimport org.testingisdocumenting.webtau.junit5.WebTau\nimport org.junit.jupiter.api.*\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\n@WebTau\n@TestMethodOrder(MethodOrderer.OrderAnnotation) // forcing methods execution order\n@DisplayName(\"customer CRUD\")\nclass CustomerCrudSeparatedGroovyTest {\n    private static def customerPayload = [firstName: 'FN',\n                                          lastName : 'LN']\n    private static def changedCustomerPayload = [*: customerPayload, lastName: 'NLN']\n\n    private static def id\n\n    @BeforeAll\n    @DisplayName(\"create customer\") // optional friendly name for reporting purposes\n    static void createCustomer() {\n        id = http.post(\"/customers\", customerPayload) {\n            body.id // using body prefix is required in this case as id conflicts with class field name\n        }\n\n        id.shouldNot == 0\n    }\n\n    @Test\n    @Order(1)\n    @DisplayName(\"read customer\")\n    void read() {\n        http.get(\"/customers/$id\") {\n            body.should == customerPayload\n        }\n    }\n\n    @Test\n    @Order(2) // order dependence saves from creating customer on every test\n    @DisplayName(\"update customer\")\n    void update() {\n        http.put(\"/customers/$id\", changedCustomerPayload) {\n            body.should == changedCustomerPayload\n        }\n\n        http.get(\"/customers/$id\") {\n            body.should == changedCustomerPayload\n        }\n    }\n\n    @Test\n    @Order(3) // but you can still run each method independently\n    @DisplayName(\"delete customer\")\n    void delete() {\n        http.delete(\"/customers/$id\") {\n            header.statusCode.should == 204\n        }\n\n        http.get(\"/customers/$id\") {\n            header.statusCode.should == 404\n        }\n\n        id = -1 // marking as deleted to let cleanup step know that no delete is required\n    }\n\n    @AfterAll\n    static void cleanup() { // optional (since we create new ids all the time) step to keep your environment clean\n        if (id == -1) {\n            return\n        }\n\n        http.delete(\"/customers/$id\")\n    }\n}","commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"package com.example.tests.junit5;\n\nimport org.testingisdocumenting.webtau.junit5.WebTau;\nimport org.junit.jupiter.api.*;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*;\n\n@WebTau\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class) // forcing methods execution order\n@DisplayName(\"customer CRUD\")\npublic class CustomerCrudSeparatedJavaTest {\n    private static final Map<String, Object> customerPayload = createCustomerPayload();\n    private static final Map<String, Object> changedCustomerPayload = createChangedCustomerPayload();\n\n    private static int id;\n\n    @BeforeAll\n    @DisplayName(\"create customer\") // optional friendly name for reporting purposes\n    static void createCustomer() {\n        id = http.post(\"/customers\", customerPayload, ((header, body) -> {\n            return body.get(\"id\");\n        }));\n\n        actual(id).shouldNot(equal(0));\n    }\n\n    @Test\n    @Order(1)\n    @DisplayName(\"read customer\")\n    void read() {\n        http.get(\"/customers/\" + id, ((header, body) -> {\n            body.should(equal(customerPayload));\n        }));\n    }\n\n    @Test\n    @Order(2) // order dependence saves from creating customer on every test\n    @DisplayName(\"update customer\")\n    void update() {\n        http.put(\"/customers/\" + id, changedCustomerPayload, ((header, body) -> {\n            body.should(equal(changedCustomerPayload));\n        }));\n\n        http.get(\"/customers/\" + id, ((header, body) -> {\n            body.should(equal(changedCustomerPayload));\n        }));\n    }\n\n    @Test\n    @Order(3) // but you can still run each method independently\n    @DisplayName(\"delete customer\")\n    void delete() {\n        http.delete(\"/customers/\" + id, ((header, body) -> {\n            header.statusCode().should(equal(204));\n        }));\n\n        http.get(\"/customers/\" + id, ((header, body) -> {\n            header.statusCode().should(equal(404));\n        }));\n\n        id = -1; // marking as deleted to let cleanup step know that no delete is required\n    }\n\n    @AfterAll\n    static void cleanup() { // optional (since we create new ids all the time) step to keep your environment clean\n        if (id == -1) {\n            return;\n        }\n\n        http.delete(\"/customers/\" + id);\n    }\n\n    private static Map<String, Object> createCustomerPayload() {\n        Map<String, Object> payload = new LinkedHashMap<>();\n        payload.put(\"firstName\", \"FN\");\n        payload.put(\"lastName\", \"LN\");\n\n        return payload;\n    }\n\n    private static Map<String, Object> createChangedCustomerPayload() {\n        Map<String, Object> payload = createCustomerPayload();\n        payload.put(\"lastName\", \"NLN\");\n\n        return payload;\n    }\n}","commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"BeforeAll/AfterAll","id":"beforeallafterall","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"@BeforeAll","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"@AfterAll","type":"InlinedCode"},{"text":" to prepare and cleanup resources required for multiple test methods.","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"package com.example.tests.junit5\n\nimport org.testingisdocumenting.webtau.junit5.WebTau\nimport org.junit.jupiter.api.AfterAll\nimport org.junit.jupiter.api.BeforeAll\nimport org.junit.jupiter.api.DisplayName\nimport org.junit.jupiter.api.Test\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.http\n\n@WebTau\n@DisplayName(\"customer query\")\nclass CustomerQueryGroovyTest {\n    private static def id1 // keep track of created ids to assert and cleanup later\n    private static def id2\n    private static def id3\n\n    @BeforeAll\n    @DisplayName(\"create customers\")\n    static void createCustomers() {\n        id1 = createCustomer(\"CQ_FN1\", \"CQ_LN1\")\n        id2 = createCustomer(\"CQ_FN1\", \"CQ_LN2\")\n        id3 = createCustomer(\"CQ_FN2\", \"CQ_LN2\")\n    }\n\n    @Test\n    @DisplayName(\"query by first name\")\n    void queryByFirstName() {\n        http.get(\"/customers/search/first-name\", [name: \"CQ_FN1\"]) {\n            body.should == [\"*id\" | \"firstName\" | \"lastName\"] { // star(*) marks key column so assertion is order agnostic\n                           __________________________________\n                             id1  | \"CQ_FN1\"    | \"CQ_LN1\"\n                             id2  | \"CQ_FN1\"    | \"CQ_LN2\" }\n        }\n    }\n\n    @Test\n    @DisplayName(\"query by last name\")\n    void queryByLastName() {\n        http.get(\"/customers/search/last-name\", [name: \"CQ_LN2\"]) {\n            body.should == [\"*id\" | \"firstName\" | \"lastName\"] {\n                           __________________________________\n                             id2  | \"CQ_FN1\"    | \"CQ_LN2\"\n                             id3  | \"CQ_FN2\"    | \"CQ_LN2\" }\n        }\n    }\n\n    @AfterAll\n    @DisplayName(\"clean up\")\n    static void cleanup() {\n        [id1, id2, id3].each { http.delete(\"/customers/$it\") }\n    }\n\n    private static def createCustomer(String firstName, String lastName) {\n        return http.post(\"/customers\", [firstName: firstName, lastName: lastName]) { id }\n    }\n}","commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"package com.example.tests.junit5;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Map;\nimport java.util.stream.Stream;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*;\n\n@DisplayName(\"customer query\")\nclass CustomerQueryJavaTest {\n    private static Integer id1; // keep track of created ids to assert and cleanup later\n    private static Integer id2;\n    private static Integer id3;\n\n    @BeforeAll\n    @DisplayName(\"create customers\")\n    static void createCustomers() {\n        id1 = createCustomer(\"CQ_FN1\", \"CQ_LN1\");\n        id2 = createCustomer(\"CQ_FN1\", \"CQ_LN2\");\n        id3 = createCustomer(\"CQ_FN2\", \"CQ_LN2\");\n    }\n\n    @Test\n    @DisplayName(\"query by first name\")\n    void queryByFirstName() {\n        http.get(\"/customers/search/first-name\", http.query(\"name\", \"CQ_FN1\"), (header, body) -> {\n            body.should(equal(table(\"*id\", \"firstName\", \"lastName\", // star(*) marks key column so assertion is order agnostic\n                                   ________________________________,\n                                      id1, \"CQ_FN1\"   , \"CQ_LN1\",\n                                      id2, \"CQ_FN1\"   , \"CQ_LN2\")));\n        });\n    }\n\n    @Test\n    @DisplayName(\"query by last name\")\n    void queryByLastName() {\n        http.get(\"/customers/search/last-name\", http.query(\"name\", \"CQ_LN2\"), (header, body) -> {\n            body.should(equal(table(\"*id\", \"firstName\", \"lastName\",\n                                    ________________________________,\n                                      id2, \"CQ_FN1\"   , \"CQ_LN2\",\n                                      id3, \"CQ_FN2\"   , \"CQ_LN2\")));\n        });\n    }\n\n    @AfterAll\n    @DisplayName(\"clean up\")\n    static void cleanup() {\n        Stream.of(id1, id2, id3).forEach(id -> http.delete(\"/customers/\" + id));\n    }\n\n    private static int createCustomer(String firstName, String lastName) {\n        Map<String, Object> payload = aMapOf(\n                \"firstName\", firstName,\n                \"lastName\", lastName);\n\n        return http.post(\"/customers\", payload, ((header, body) -> {\n            return body.get(\"id\");\n        }));\n    }\n}","commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Maven Import","id":"maven-import","type":"Section","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-junit5</artifactId>\n    <version>1.21-SNAPSHOT</version>\n</dependency>","type":"Snippet"}]},{"title":"TestFactory","id":"testfactory","type":"Section","content":[{"type":"Paragraph","content":[{"text":"With the additional annotation ","type":"SimpleText"},{"code":"@TestFactory","type":"InlinedCode"},{"text":" you can use ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" as an easy-to-read source of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"similar but independent tests where each row is treated as its own test (comparable to JUnit 4's","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parameterized tests), optionally with a descriptive label.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Here are examples of parameterized tests with and without labels, and how an IDE uses the label for display purposes:","type":"SimpleText"}]},{"lang":"groovy","snippet":"@TestFactory\ndef \"individual tests use generated display labels\"() {\n    [\"price\" | \"quantity\" | \"outcome\"] {\n    _________________________________\n      10     |  30        |  300\n      -10    |  30        | -300\n    }.test {\n        PriceCalculator.calculate(price, quantity).should == outcome\n    }\n}","title":"Parameterized tests without explicit label","entry":"individual tests use generated display labels","type":"Snippet"},{"lang":"groovy","snippet":"@TestFactory\ndef \"individual tests can use an optional display label to clarify the use case\"() {\n    [\"label\"           | \"price\" | \"quantity\" | \"outcome\"] {\n    ___________________________________________________\n      \"positive price\" | 10      |  30        |  300\n      \"negative price\" | -10     |  30        | -300\n    }.test {\n        PriceCalculator.calculate(price, quantity).should == outcome\n    }\n}","title":"Parameterized tests with explicit label","entry":"individual tests can use an optional display label to clarify the use case","type":"Snippet"},{"imageSrc":"/webtau/img/intellij-parameterized-tests.png","timestamp":1584552021067,"shapes":[],"width":402.0,"height":156.0,"type":"AnnotatedImage"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Generic Runners","pageTitle":"JUnit 5","pageMeta":{},"fileName":"JUnit-5","dirName":"generic-runners","pageSectionIdTitles":[{"title":"WebTau Runner","id":"webtau-runner"},{"title":"BeforeAll/AfterAll","id":"beforeallafterall"},{"title":"Maven Import","id":"maven-import"},{"title":"TestFactory","id":"testfactory"}]}},{"type":"Page","content":[{"title":"Special Values","id":"special-values","type":"Section","content":[{"lang":"groovy","snippet":"http.get(\"/end-point\") {\n    price.should == 100\n    assert price instanceof DataNode\n}","entry":"use groovy closure as validation","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Values that you access inside validation block are special values of ","type":"SimpleText"},{"code":"DataNode","type":"InlinedCode"},{"text":" type. When you assert them using ","type":"SimpleText"},{"code":"should","type":"InlinedCode"},{"text":" statement","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"they act as proxies that record every assertion that you do.","type":"SimpleText"}]}]},{"title":"Extracting Values","id":"extracting-values","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As you have seen in ","type":"SimpleText"},{"url":"/webtau/REST/CRUD","isFile":false,"type":"Link","content":[{"text":"CRUD example","type":"SimpleText"}]},{"text":" you can return values back from a validation block.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def id = http.get(\"/end-point\") {\n    return id\n}\n\nassert id == 10\nassert id.getClass() == Integer","entry":"can return simple value from get","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"When you return a value from a validation block, it automatically gets converted to its correspondent primitive.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: asserting that value after returning will not track and associated assertions with the call anymore. Use it only","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to get values required for consequent test calls.","type":"SimpleText"}]}]},{"title":"Properties On Lists","id":"properties-on-lists","type":"Section","content":[{"data":{"id":10,"price":100,"amount":30,"list":[1,2,3],"object":{"k1":"v1","k2":"v2","k3":"v3"},"complexList":[{"id":"id1","k1":"v1","k2":30},{"id":"id2","k1":"v11","k2":40}]},"paths":[],"type":"Json"},{"type":"Paragraph","content":[{"text":"If you have a list of objects like ","type":"SimpleText"},{"code":"complexList","type":"InlinedCode"},{"text":" above, you can access all its children property value with ","type":"SimpleText"},{"code":"complexList.k2","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"groovy","snippet":"http.get(\"/end-point\") {\n    complexList.k2.should == [30, 40]\n}","entry":"groovy children key shortcut","bodyOnly":true,"type":"Snippet"}]},{"title":"Path based properties access","id":"path-based-properties-access","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Primarily for Java users, webtau supports the ability to query properties of a ","type":"SimpleText"},{"code":"DataNode","type":"InlinedCode"},{"text":" via a path instead of chaining","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"get(String name)","type":"InlinedCode"},{"text":" calls.  For example, to obtain a simple property:","type":"SimpleText"}]},{"lang":"java","snippet":"http.get(\"/end-point\", (header, body) -> {\n    body.get(\"object.k1\").should(equal(\"v1\"));\n});","entry":"canQueryNodeByPath","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"It is also possible to query arrays, including the ability to query for the Nth element from the end:","type":"SimpleText"}]},{"lang":"java","snippet":"http.get(\"/end-point\", (header, body) -> {\n    body.get(\"complexList[0].k1\").should(equal(\"v1\"));\n    body.get(\"complexList[-1].k1\").should(equal(\"v11\"));\n});","entry":"canQuerySpecificListElementByPath","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Similarly to the Groovy example in ","type":"SimpleText"},{"url":"/webtau/REST/data-node#properties-on-lists","isFile":false,"type":"Link","content":[{"text":"Properties On Lists","type":"SimpleText"}]},{"text":", it is possible to access","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"all children property values:","type":"SimpleText"}]},{"lang":"java","snippet":"http.get(\"/end-point\", (header, body) -> {\n    body.get(\"complexList.k1\").should(equal(Arrays.asList(\"v1\", \"v11\")));\n});","entry":"canQueryListByNodePath","bodyOnly":true,"type":"Snippet"}]},{"title":"If-Else Logic","id":"if-else-logic","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Even though values that you access inside validation block are special values of ","type":"SimpleText"},{"code":"DataNode","type":"InlinedCode"},{"text":" type, you can still","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"perform simple ","type":"SimpleText"},{"code":"if-else","type":"InlinedCode"},{"text":" like logic checks on them. Accessing the values will mark them as \"touched\" for data coverage statistic.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def zipCode = http.get(\"/address\") {\n    return addressType == \"complex\" ? address.zipCode : \"NA\"\n}\n\nzipCode.should == \"12345\"","entry":"if-else logic","bodyOnly":true,"title":"simple if-else logic","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Warning: Comparison of complex values is not properly implemented due to current Groovy API implementation details","type":"SimpleText"}]}]},{"title":"Each","id":"each","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Special values inside assertion block have convenient methods","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"each","type":"InlinedCode"},{"text":" to iterate over a list","type":"SimpleText"}]},{"lang":"groovy","snippet":"http.get(\"/end-point\") {\n    list.each { it.shouldBe > 0 }\n}","entry":"groovy each on simple list","bodyOnly":true,"title":"List of simple values","type":"Snippet"},{"lang":"groovy","snippet":"http.get(\"/end-point\") {\n    complexList.each { k2.shouldBe > 0 }\n}","entry":"groovy each on complex list","bodyOnly":true,"title":"List of complex values","type":"Snippet"}]},{"title":"Find","id":"find","type":"Section","content":[{"type":"Paragraph","content":[{"code":"find","type":"InlinedCode"},{"text":" to find a single value","type":"SimpleText"}]},{"lang":"groovy","snippet":"def found = http.get(\"/end-point\") {\n    return list.find { it > 1 }\n}\n\nassert found == 2\nassert found.getClass() == Integer","entry":"groovy find on list","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"and ","type":"SimpleText"},{"code":"findAll","type":"InlinedCode"},{"text":" to find all the values matching predicate","type":"SimpleText"}]},{"lang":"groovy","snippet":"def found = http.get(\"/end-point\") {\n    return list.findAll { it > 1 }\n}\n\nassert found == [2, 3]\nassert found[0].getClass() == Integer","entry":"groovy findAll on list","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: While values inside a predicate are normal values, the result of ","type":"SimpleText"},{"code":"find","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"findAll","type":"InlinedCode"},{"text":" is still ","type":"SimpleText"},{"code":"DataNode","type":"InlinedCode"}]},{"lang":"groovy","snippet":"def id = http.get(\"/end-point\") {\n    def found = complexList.find {\n        assert k1.getClass() == String\n        k1 == 'v1'\n    }\n    assert found.getClass() == GroovyDataNode\n\n    return found.id\n}\n\nassert id.getClass() == String","entry":"groovy find on list of objects","bodyOnly":true,"type":"Snippet"}]},{"title":"Collect","id":"collect","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"collect","type":"InlinedCode"},{"text":" to transform a collection of items","type":"SimpleText"}]},{"lang":"groovy","snippet":"def transformed = http.get(\"/end-point\") {\n    return list.collect { \"world#${it}\" }\n}\n\nassert transformed == ['world#1', 'world#2', 'world#3']\nassert transformed[0] instanceof GString","entry":"groovy transform list","bodyOnly":true,"type":"Snippet"}]},{"title":"Combine","id":"combine","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Methods ","type":"SimpleText"},{"code":"find","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"collect","type":"InlinedCode"},{"text":" can be chained","type":"SimpleText"}]},{"lang":"groovy","snippet":"def sum = http.get(\"/end-point\") {\n    return complexList\n            .findAll { k1.startsWith('v1') }\n            .collect { k2 }\n            .sum()\n}\n\nassert sum == 70","entry":"groovy findAll, collect, and sum","bodyOnly":true,"type":"Snippet"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"REST","pageTitle":"Data Node","pageMeta":{},"fileName":"data-node","dirName":"REST","pageSectionIdTitles":[{"title":"Special Values","id":"special-values"},{"title":"Extracting Values","id":"extracting-values"},{"title":"Properties On Lists","id":"properties-on-lists"},{"title":"Path based properties access","id":"path-based-properties-access"},{"title":"If-Else Logic","id":"if-else-logic"},{"title":"Each","id":"each"},{"title":"Find","id":"find"},{"title":"Collect","id":"collect"},{"title":"Combine","id":"combine"}]}},{"type":"Page","content":[{"title":"Universal Set Value","id":"universal-set-value","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"setValue","type":"InlinedCode"},{"text":" on a declared page element to set its value.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"It will work on all the standard input types out of the box.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Define all the input fields inside a page object. In combination with universal ","type":"SimpleText"},{"code":"setValue","type":"InlinedCode"},{"text":" it will make your tests robust.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Given a html snippet","type":"SimpleText"}]},{"lang":"html","snippet":"<html>\n<body>\n<div id=\"form\">\n    <input id=\"name\"/>\n    <input id=\"startDate\" type=\"date\"/>\n    <select id=\"rank\">\n        <option/>\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n        <option value=\"D\">D</option>\n        <option value=\"E\">E</option>\n    </select>\n</div>\n</body>\n</html>","title":"HTML form","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Page object can be defined as","type":"SimpleText"}]},{"lang":"groovy","snippet":"package pages\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*\n\nclass FormPage {\n    def name = $('#name')\n    def rank = $('#rank')\n    def startDate = $('#startDate')\n}","title":"Form page object","type":"Snippet"}]},{"title":"Default Input","id":"default-input","type":"Section","content":[{"lang":"groovy","snippet":"form.name.setValue('Full Automation')","title":"set value to input","type":"Snippet"}]},{"title":"Date Input","id":"date-input","type":"Section","content":[{"lang":"groovy","snippet":"form.startDate.setValue('2016-06-21')","title":"set value to date input","type":"Snippet"}]},{"title":"Select","id":"select","type":"Section","content":[{"lang":"groovy","snippet":"form.rank.setValue('B')","title":"set value to select","type":"Snippet"}]},{"title":"Universal Assert","id":"universal-assert","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Form element value can be asserted the same way as any regular element.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Underlying value will be extracted based on the element type","type":"SimpleText"}]},{"lang":"groovy","snippet":"form.name.should == 'Full Automation'\nform.rank.should == 'B'\nform.startDate.should == '2016-06-21'","title":"universal assert","type":"Snippet"}]},{"title":"Custom Form Elements","id":"custom-form-elements","type":"Section","content":[{"type":"Paragraph","content":[{"text":"One of the benefits of universal ","type":"SimpleText"},{"code":"set","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"assert","type":"InlinedCode"},{"text":" is that your test is focused on the data and not implementation details.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"But what if you decided to use a custom component to enter the data?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To hide implementation details from your test you should define a custom input handler for your UI component.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's consider a form component that you can start interacting with only after you clicked it. And after the value","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is entered, the input box disappears again.","type":"SimpleText"}]},{"lang":"html","snippet":"<div id=\"answer\" class=\"special-selector\" onclick=\"activate('answer')\"> \n <div class=\"current-value\">\n   current value \n </div> \n <input class=\"value-input\" value=\"\" onblur=\"valueEntered('answer')\"> \n</div>","title":"Custom input","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Our test should still be written in terms of data entering and validation.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def customFormElement = $('#answer')\n\ncustomFormElement.setValue('hello')\ncustomFormElement.should == 'hello'","title":"set value to custom component","type":"Snippet"},{"type":"Paragraph","content":[{"text":"In order to achieve this we need to register a custom handler.","type":"SimpleText"}]},{"lang":"groovy","snippet":"import formHandlers.CustomInput\n\nurl = \"http://localhost:8180\"\n\npageElementGetSetValueHandlers = [CustomInput]","title":"webtau.cfg","type":"Snippet"},{"lang":"groovy","snippet":"package formHandlers\n\nimport org.testingisdocumenting.webtau.browser.page.HtmlNode\nimport org.testingisdocumenting.webtau.browser.page.PageElement\nimport org.testingisdocumenting.webtau.browser.page.PageElementStepExecutor\nimport org.testingisdocumenting.webtau.browser.page.value.handlers.PageElementGetSetValueHandler\nimport org.testingisdocumenting.webtau.reporter.TokenizedMessage\n\nclass CustomInput implements PageElementGetSetValueHandler {\n    @Override\n    boolean handles(HtmlNode htmlNode, PageElement pageElement) {\n        return htmlNode.attributes.class =~ /special-selector/\n    }\n\n    @Override\n    void setValue(PageElementStepExecutor stepExecutor,\n                  TokenizedMessage pathDescription,\n                  HtmlNode htmlNode,\n                  PageElement pageElement,\n                  Object value) {\n        pageElement.click()\n        pageElement.find('input').sendKeys(\"${value}\\t\")\n    }\n\n    @Override\n    String getValue(HtmlNode htmlNode, PageElement pageElement) {\n        return pageElement.find('.current-value').getUnderlyingValue()\n    }\n}","title":"Custom input handler","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Forms","pageMeta":{},"fileName":"forms","dirName":"UI","pageSectionIdTitles":[{"title":"Universal Set Value","id":"universal-set-value"},{"title":"Default Input","id":"default-input"},{"title":"Date Input","id":"date-input"},{"title":"Select","id":"select"},{"title":"Universal Assert","id":"universal-assert"},{"title":"Custom Form Elements","id":"custom-form-elements"}]}},{"type":"Page","content":[{"title":"WebTau Runner","id":"webtau-runner","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can use webtau ","type":"SimpleText"},{"code":"http.","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"browser.","type":"InlinedCode"},{"text":" methods as in a junit 4 tests, but to enable reporting you need to use","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"@RunWith(WebTauRunner.class)","type":"InlinedCode"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"package com.example.tests.junit4\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.* // convenient single import for DSL methods and props like http\n\n@RunWith(WebTauRunner)  // runner is required to have this test to be a part of generated html report\nclass CustomerCrudSingleGroovyTest {\n    private def customerPayload = [firstName: 'FN',\n                                   lastName: 'LN']\n    private def changedCustomerPayload = [*:customerPayload, lastName: 'NLN']\n\n    @Test\n    void crud() {\n        def id = http.post(\"/customers\", customerPayload) {\n            return id\n        }\n\n        http.get(\"/customers/$id\") {\n            body.should == customerPayload\n        }\n\n        http.put(\"/customers/$id\", changedCustomerPayload) {\n            body.should == changedCustomerPayload\n        }\n\n        http.get(\"/customers/$id\") {\n            body.should == changedCustomerPayload\n        }\n\n        http.delete(\"/customers/$id\") {\n            statusCode.should == 204\n        }\n\n        http.get(\"/customers/$id\") {\n            statusCode.should == 404\n        }\n    }\n}","title":"CRUD test in a single method","commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"package com.example.tests.junit4;\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport java.util.Map;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*; // convenient single import for DSL methods and props like http and equal, aMapOf, etc\n\n@RunWith(WebTauRunner.class) // runner is required to have this test to be a part of generated html report\npublic class CustomerCrudSingleJavaTest {\n    private Map<String, Object> customerPayload = createCustomerPayload();\n    private Map<String, Object> changedCustomerPayload = createChangedCustomerPayload();\n\n    @Test\n    public void crud() {\n        int id = http.post(\"/customers\", customerPayload, ((header, body) -> {\n            return body.get(\"id\");\n        }));\n\n        http.get(\"/customers/\" + id, ((header, body) -> {\n            body.should(equal(customerPayload));\n        }));\n\n        http.put(\"/customers/\" + id, changedCustomerPayload, ((header, body) -> {\n            body.should(equal(changedCustomerPayload));\n        }));\n\n        http.get(\"/customers/\" + id, ((header, body) -> {\n            body.should(equal(changedCustomerPayload));\n        }));\n\n        http.delete(\"/customers/\" + id, ((header, body) -> {\n            header.statusCode().should(equal(204));\n        }));\n\n        http.get(\"/customers/\" + id, ((header, body) -> {\n            header.statusCode().should(equal(404));\n        }));\n    }\n\n    private Map<String, Object> createCustomerPayload() {\n        return aMapOf(\n                \"firstName\", \"FN\",\n                \"lastName\", \"LN\");\n    }\n\n    private Map<String, Object> createChangedCustomerPayload() {\n        Map<String, Object> payload = createCustomerPayload();\n        payload.put(\"lastName\", \"NLN\");\n\n        return payload;\n    }\n}","title":"CRUD test in a single method","commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Before/After","id":"beforeafter","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"@Before","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"@After","type":"InlinedCode"},{"text":" standard ","type":"SimpleText"},{"code":"JUnit 4","type":"InlinedCode"},{"text":" annotations to implement init and cleanup logic for each test.","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"package com.example.tests.junit4\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner\nimport org.junit.After\nimport org.junit.Before\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\n@RunWith(WebTauRunner.class)\nclass CustomerCrudBeforeAfterGroovyTest {\n    private def customerPayload = [firstName: 'FN',\n                                   lastName: 'LN']\n    private def changedCustomerPayload = [*:customerPayload, lastName: 'NLN']\n\n    private int customerId\n\n    @Before\n    void \"create customer\"() {\n        customerId = http.post(\"/customers\", customerPayload) {\n            return id // We deliberately named field as \"customerId\" to avoid conflict with response field. Alternatively you can use body.id to avoid the conflict\n        }\n    }\n\n    @Test\n    void \"query customer\"() {\n        http.get(\"/customers/$customerId\") {\n            body.should == customerPayload\n        }\n    }\n\n    @Test\n    void \"update customer\"() {\n        http.put(\"/customers/$customerId\", changedCustomerPayload) {\n            body.should == changedCustomerPayload\n        }\n\n        http.get(\"/customers/$customerId\") {\n            body.should == changedCustomerPayload\n        }\n    }\n\n    @After\n    void \"delete customer\"() {\n        http.delete(\"/customers/$customerId\") {\n            statusCode.should == 204\n        }\n\n        http.get(\"/customers/$customerId\") {\n            statusCode.should == 404\n        }\n    }\n}","title":"CRUD test with @Before and @After annotations","commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"package com.example.tests.junit4;\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport java.util.Map;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*;\n\n@RunWith(WebTauRunner.class)\npublic class CustomerCrudBeforeAfterJavaTest {\n    private Map<String, Object> customerPayload = createCustomerPayload();\n    private Map<String, Object> changedCustomerPayload = createChangedCustomerPayload();\n    private int customerId;\n\n    @Before\n    public void createCustomer() {\n        customerId = http.post(\"/customers\", customerPayload, ((header, body) -> {\n            return body.get(\"id\");\n        }));\n    }\n\n    @Test\n    public void queryCustomer() {\n        http.get(\"/customers/\" + customerId, ((header, body) -> {\n            body.should(equal(customerPayload));\n        }));\n    }\n\n    @Test\n    public void updateCustomer() {\n        http.put(\"/customers/\" + customerId, changedCustomerPayload, ((header, body) -> {\n            body.should(equal(changedCustomerPayload));\n        }));\n\n        http.get(\"/customers/\" + customerId, ((header, body) -> {\n            body.should(equal(changedCustomerPayload));\n        }));\n    }\n\n    @After\n    public void deleteCustomer() {\n        http.delete(\"/customers/\" + customerId, (header, body) -> {\n            header.statusCode().should(equal(204));\n        });\n\n        http.get(\"/customers/\" + customerId, ((header, body) -> {\n            header.statusCode().should(equal(404));\n        }));\n    }\n\n    private Map<String, Object> createCustomerPayload() {\n        return aMapOf(\n                \"firstName\", \"FN\",\n                \"lastName\", \"LN\");\n    }\n\n    private Map<String, Object> createChangedCustomerPayload() {\n        Map<String, Object> payload = createCustomerPayload();\n        payload.put(\"lastName\", \"NLN\");\n\n        return payload;\n    }\n}","title":"CRUD test with @Before and @After annotations","commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"BeforeClass/AfterClass","id":"beforeclassafterclass","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"@BeforeClass","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"@AfterClass","type":"InlinedCode"},{"text":" to prepare and cleanup resources required for multiple test methods.","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"package com.example.tests.junit4\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner\nimport org.junit.AfterClass\nimport org.junit.BeforeClass\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.http\n\n@RunWith(WebTauRunner.class)\nclass CustomerQueryGroovyTest {\n    private static def id1 // keep track of created ids to assert and cleanup later\n    private static def id2\n    private static def id3\n\n    @BeforeClass\n    static void createCustomers() {\n        id1 = createCustomer(\"CQ_FN1\", \"CQ_LN1\")\n        id2 = createCustomer(\"CQ_FN1\", \"CQ_LN2\")\n        id3 = createCustomer(\"CQ_FN2\", \"CQ_LN2\")\n    }\n\n    @Test\n    void queryByFirstName() {\n        http.get(\"/customers/search/first-name\", [name: \"CQ_FN1\"]) {\n            body.should == [\"*id\" | \"firstName\" | \"lastName\"] { // star(*) marks key column so assertion is order agnostic\n                            __________________________________\n                             id1  | \"CQ_FN1\"    | \"CQ_LN1\"\n                             id2  | \"CQ_FN1\"    | \"CQ_LN2\" }\n        }\n    }\n\n    @Test\n    void queryByLastName() {\n        http.get(\"/customers/search/last-name\", [name: \"CQ_LN2\"]) {\n           body.should == [\"*id\" | \"firstName\" | \"lastName\"] {\n                          __________________________________\n                            id2  | \"CQ_FN1\"    | \"CQ_LN2\"\n                            id3  | \"CQ_FN2\"    | \"CQ_LN2\" }\n        }\n    }\n\n    @AfterClass\n    static void cleanup() {\n        [id1, id2, id3].each { http.delete(\"/customers/$it\") }\n    }\n\n    private static def createCustomer(String firstName, String lastName) {\n        return http.post(\"/customers\", [firstName: firstName, lastName: lastName]) { id }\n    }\n}","commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"package com.example.tests.junit4;\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport java.util.Map;\nimport java.util.stream.Stream;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*;\n\n@RunWith(WebTauRunner.class)\npublic class CustomerQueryJavaTest {\n    private static Integer id1; // keep track of created ids to assert and cleanup later\n    private static Integer id2;\n    private static Integer id3;\n\n    @BeforeClass\n    public static void createCustomers() {\n        id1 = createCustomer(\"CQ_FN1\", \"CQ_LN1\");\n        id2 = createCustomer(\"CQ_FN1\", \"CQ_LN2\");\n        id3 = createCustomer(\"CQ_FN2\", \"CQ_LN2\");\n    }\n\n    @Test\n    public void queryByFirstName() {\n        http.get(\"/customers/search/first-name\", http.query(\"name\", \"CQ_FN1\"), (header, body) -> {\n            body.should(equal(table(\"*id\", \"firstName\", \"lastName\", // star(*) marks key column so assertion is order agnostic\n                                   ________________________________,\n                                      id1, \"CQ_FN1\"   , \"CQ_LN1\",\n                                      id2, \"CQ_FN1\"   , \"CQ_LN2\")));\n        });\n    }\n\n    @Test\n    public void queryByLastName() {\n        http.get(\"/customers/search/last-name\", http.query(\"name\", \"CQ_LN2\"), (header, body) -> {\n            body.should(equal(table(\"*id\", \"firstName\", \"lastName\",\n                                    ________________________________,\n                                      id2, \"CQ_FN1\"   , \"CQ_LN2\",\n                                      id3, \"CQ_FN2\"   , \"CQ_LN2\")));\n        });\n    }\n\n    @AfterClass\n    public static void cleanup() {\n        Stream.of(id1, id2, id3).forEach(id -> http.delete(\"/customers/\" + id));\n    }\n\n    private static int createCustomer(String firstName, String lastName) {\n        Map<String, Object> payload = aMapOf(\n                \"firstName\", firstName,\n                \"lastName\", lastName);\n\n        return http.post(\"/customers\", payload, ((header, body) -> {\n            return body.get(\"id\");\n        }));\n    }\n}","commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Maven Import","id":"maven-import","type":"Section","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-junit4</artifactId>\n    <version>1.21-SNAPSHOT</version>\n</dependency>","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Generic Runners","pageTitle":"JUnit 4","pageMeta":{},"fileName":"JUnit-4","dirName":"generic-runners","pageSectionIdTitles":[{"title":"WebTau Runner","id":"webtau-runner"},{"title":"Before/After","id":"beforeafter"},{"title":"BeforeClass/AfterClass","id":"beforeclassafterclass"},{"title":"Maven Import","id":"maven-import"}]}},{"type":"Page","content":[{"title":"Select","id":"select","type":"Section","content":[{"lang":"cfg","snippet":"waitTimeout = 2500\nurl = http://my-server\n\nenvironments {\n   dev {\n       url = \"http://localhost:8080\"\n   }\n}\n","lineNumber":"","title":"webtau.cfg","type":"Snippet"},{"command":"webtau --env=dev","paramsToHighlight":[],"type":"CliCommand"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Configuration","pageTitle":"Environments","pageMeta":{},"fileName":"environments","dirName":"configuration","pageSectionIdTitles":[{"title":"Select","id":"select"}]}},{"type":"Page","content":[{"title":"Installation Of Groovy Runner","id":"installation-of-groovy-runner","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Download and unzip ","type":"SimpleText"},{"url":"https://repo.maven.apache.org/maven2/org/testingisdocumenting/webtau/webtau-dist/1.21-SNAPSHOT/webtau-dist-1.21-SNAPSHOT-webtau.zip","isFile":false,"type":"Link","content":[{"text":"webtau","type":"SimpleText"}]},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Add it to your ","type":"SimpleText"},{"code":"PATH","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"title":"Minimal Groovy Setup","id":"minimal-groovy-setup","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Generate webtau examples","type":"SimpleText"}]},{"command":"webtau --example","paramsToHighlight":[],"type":"CliCommand"},{"type":"Paragraph","content":[{"text":"Navigate into ","type":"SimpleText"},{"code":"todo","type":"InlinedCode"},{"text":" example","type":"SimpleText"}]},{"command":"cd examples/todo","paramsToHighlight":[],"type":"CliCommand"},{"lang":"groovy","snippet":"import static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('fetch todo item') {\n    http.get('/todos/1') {\n        title.should == 'delectus aut autem'\n        completed.should == false\n    }\n}","title":"todolist.groovy","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To run test","type":"SimpleText"}]},{"command":"webtau todolist.groovy --url=https://jsonplaceholder.typicode.com","paramsToHighlight":["url"],"type":"CliCommand"},{"type":"Paragraph","content":[{"text":"Note: using ","type":"SimpleText"},{"code":"import","type":"InlinedCode"},{"text":" is optional and is mainly for IDE auto completion. Imports are added implicitly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"during command line run.","type":"SimpleText"}]},{"level":2,"title":"Groovy Config File","id":"groovy-config-file","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Url parameter can be moved to a ","type":"SimpleText"},{"code":"webtau.cfg","type":"InlinedCode"},{"text":" file.","type":"SimpleText"}]},{"lang":"cfg","snippet":"url = \"https://jsonplaceholder.typicode.com/\"","title":"webtau.cfg","type":"Snippet"},{"type":"Paragraph","content":[{"url":"/webtau/configuration/environments","isFile":false,"type":"Link","content":[{"text":"Specify multiple environments","type":"SimpleText"}]},{"text":" to streamline test execution.","type":"SimpleText"}]}]},{"title":"Minimal JUnit Setup","id":"minimal-junit-setup","type":"Section","content":[{"tabsContent":[{"name":"Groovy","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-groovy</artifactId>\n    <version>1.21-SNAPSHOT</version>\n</dependency>","title":"Maven Dependency","type":"Snippet"}]},{"name":"Java","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau</artifactId>\n    <version>1.21-SNAPSHOT</version>\n</dependency>","title":"Maven Dependency","type":"Snippet"}]}],"type":"Tabs"},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"package com.example.tests.junit4\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*\n\n@RunWith(WebTauRunner)\nclass TodoListGroovyIT {\n    @Test\n    void \"fetch todo item\"() {\n        http.get('/todos/1') {\n            title.should == 'delectus aut autem'\n            completed.should == false\n        }\n    }\n}","title":"JUnit 4 example","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"package com.example.tests.junit4;\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*;\n\n@RunWith(WebTauRunner.class)\npublic class TodoListJavaIT {\n    @Test\n    public void fetchTodoItem() {\n        http.get(\"/todos/1\", (header, body) -> {\n            body.get(\"title\").should(equal(\"delectus aut autem\"));\n            body.get(\"completed\").should(equal(false));\n        });\n    }\n}","title":"JUnit 4 example","type":"Snippet"}]}],"type":"Tabs"},{"level":2,"title":"Junit Config File","id":"junit-config-file","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Add ","type":"SimpleText"},{"code":"webtau.properties","type":"InlinedCode"},{"text":" to test class path","type":"SimpleText"}]},{"lang":"properties","snippet":"url = https://jsonplaceholder.typicode.com/","title":"webtau.properties","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"Getting Started","pageMeta":{},"fileName":"getting-started","dirName":"REST","pageSectionIdTitles":[{"title":"Installation Of Groovy Runner","id":"installation-of-groovy-runner"},{"title":"Minimal Groovy Setup","id":"minimal-groovy-setup"},{"title":"Minimal JUnit Setup","id":"minimal-junit-setup"}]}},{"type":"Page","content":[{"title":"Location","id":"location","type":"Section","content":[{"type":"Paragraph","content":[{"text":"By default report is generated at ","type":"SimpleText"},{"code":"<workingdir>/webtau.report.html","type":"InlinedCode"},{"text":". To change the location use ","type":"SimpleText"},{"code":"--reportPath","type":"InlinedCode"},{"text":" option.","type":"SimpleText"}]}]},{"title":"Summary","id":"summary","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Out of the box report provides high level information like number of failed tests and HTTP Operations coverage.","type":"SimpleText"}]},{"fit":true,"imageSrc":"/webtau/doc-artifacts/reports/report-summary.png","timestamp":1584552020274,"shapes":[],"width":2400.0,"height":1594.0,"type":"AnnotatedImage"}]},{"title":"Test Summary","id":"test-summary","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Selected test to see a summary information about test run","type":"SimpleText"}]},{"fit":true,"imageSrc":"/webtau/doc-artifacts/reports/report-test-summary.png","timestamp":1584552020308,"shapes":[],"width":2400.0,"height":1594.0,"type":"AnnotatedImage"}]},{"title":"Navigation","id":"navigation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Report is a self contained single page application.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Url tracks your navigation through screens, so you can share url with your teammates to narrow down a problem.","type":"SimpleText"}]}]},{"title":"Additional Reports","id":"additional-reports","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To generate custom reports, or upload report data to your server, specify ","type":"SimpleText"},{"code":"reportGenerator","type":"InlinedCode"},{"text":" config property.","type":"SimpleText"}]},{"lang":"cfg","snippet":"import scenarios.rest.report.Report\n\nurl = \"http://localhost:8080\"\n\nreportGenerator = Report.&generateReport","title":"webtau.cfg","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Where ","type":"SimpleText"},{"code":"Report.&generateReport","type":"InlinedCode"},{"text":" is implemented as following","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest.report\n\nimport org.testingisdocumenting.webtau.console.ConsoleOutputs\nimport org.testingisdocumenting.webtau.console.ansi.Color\nimport org.testingisdocumenting.webtau.reporter.WebTauReport\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.cfg\n\nclass Report {\n    static void generateReport(WebTauReport report) {\n        def reportPath = cfg.workingDir.resolve('report.txt')\n\n        ConsoleOutputs.out('generating report: ', Color.PURPLE, reportPath)\n        reportPath.toFile().text = report.tests.size()\n    }\n}","title":"scenarios/rest/report/Report.groovy","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"Report","pageMeta":{},"fileName":"report","dirName":"REST","pageSectionIdTitles":[{"title":"Location","id":"location"},{"title":"Summary","id":"summary"},{"title":"Test Summary","id":"test-summary"},{"title":"Navigation","id":"navigation"},{"title":"Additional Reports","id":"additional-reports"}]}},{"type":"Page","content":[{"title":"Specifying Test Metadata","id":"specifying-test-metadata","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To attach custom metadata to a test use ","type":"SimpleText"},{"code":"metadata","type":"InlinedCode"},{"text":" from ","type":"SimpleText"},{"code":"WebTauGroovyDsl","type":"InlinedCode"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nmetadata([owner: \"team A\"]) // setting owner for all the scenarios below\n\nscenario(\"one\") {\n}\n\nscenario(\"two\") {\n}\n\nscenario(\"three\") {\n    metadata([owner: \"team B\"]) // owner is overridden for scenario \"three\"\n}\n\nscenario(\"four\") {\n}","title":"test metadata","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"code":"metadata","type":"InlinedCode"},{"text":" can be called multiple times outside of ","type":"SimpleText"},{"code":"scenario","type":"InlinedCode"},{"text":". It will be applied to all the scenarios below.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nmetadata([owner: \"team A\"]) // setting owner for scenarios \"one\" and \"two\"\n\nscenario(\"one\") {\n}\n\nscenario(\"two\") {\n}\n\nmetadata([owner: \"team B\"]) // setting owner for scenarios \"three\" and \"four\"\n\nscenario(\"three\") {\n}\n\nscenario(\"four\") {\n}","title":"multiple top-level metadata","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Unlike previous example, \"team B\" will be set for scenario \"three\" and \"four\".","type":"SimpleText"}]}]},{"title":"Metadata Encapsulation","id":"metadata-encapsulation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can encapsulate repeated metadata into a separate file.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nSupport.teamA()\n\nscenario(\"one\") {\n}\n\nscenario(\"two\") {\n}\n\nscenario(\"three\") {\n    Support.teamB()\n}\n\nscenario(\"four\") {\n}","title":"encapsulated metadata","type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nclass Support {\n    static void owner(String name) {\n        metadata([owner: name])\n    }\n\n    static void severity(int level) {\n        metadata([severity: level])\n    }\n\n    static void teamA() {\n        owner(\"team A\")\n    }\n\n    static void teamB() {\n        owner(\"team B\")\n    }\n\n    static void critical() {\n        severity(100)\n    }\n\n    static void low() {\n        severity(1)\n    }\n}","title":"Support.groovy","type":"Snippet"}]},{"title":"Report","id":"report","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Test metadata will be available in a generated report as well as in test listeners.","type":"SimpleText"}]},{"annotationsPath":"doc-artifacts/reports/report-test-metadata.json","imageSrc":"/webtau/doc-artifacts/reports/report-test-metadata.png","timestamp":1584552020985,"shapes":[{"id":"circle3","type":"circle","text":"1","color":"a","x":632,"y":128,"r":20}],"width":1200.0,"height":797.0,"type":"AnnotatedImage"},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"If metadata is present, it will be displayed at the test summary page","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Groovy Specific Runner","pageTitle":"Test Metadata","pageMeta":{},"fileName":"test-metadata","dirName":"groovy-specific-runner","pageSectionIdTitles":[{"title":"Specifying Test Metadata","id":"specifying-test-metadata"},{"title":"Metadata Encapsulation","id":"metadata-encapsulation"},{"title":"Report","id":"report"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Webtau offers a number of ways of specifying query parameters:","type":"SimpleText"}]},{"lang":"groovy","snippet":"// Query params in the URL\nhttp.get(\"params?a=1&b=text\") {\n    // assertions go here\n}\n\n// Query params with map based helper - best suited for Groovy\nhttp.get(\"params\", http.query([a: 1, b: 'text'])) {\n    // assertions go here\n}\n\n// Query params with varargs based helper - best suited for Java\nhttp.get(\"params\", http.query('a', '1', 'b', 'text')) {\n    // assertions go here\n}","entry":"query params example","bodyOnly":true,"type":"Snippet"}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"REST","pageTitle":"Query Parameters","pageMeta":{},"fileName":"query-parameters","dirName":"REST","pageSectionIdTitles":[]}},{"type":"Page","content":[{"title":"Timeouts","id":"timeouts","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Default timeout in milliseconds for ","type":"SimpleText"},{"code":"waitTo","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"waitToNot","type":"InlinedCode"}]},{"columns":[{"content":[{"lang":"","snippet":"waitTimeout = 25000\n","lineNumber":"","type":"Snippet"}]},{"content":[{"lang":"","snippet":"--waitTimeout=25000\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"title":"Window Size","id":"window-size","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Browser window size can be set using ","type":"SimpleText"},{"code":"windowWidth","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"windowHeight","type":"InlinedCode"}]},{"lang":"groovy","snippet":"url = \"http://localhost:8180\"\n\nwindowWidth = 1280\nwindowHeight = 800","type":"Snippet"}]},{"title":"Documentation Artifacts","id":"documentation-artifacts","type":"Section","content":[{"type":"Paragraph","content":[{"text":"By default all generated documentation artifacts (e.g. screenshots) are created in the current directory.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"To override","type":"SimpleText"}]},{"lang":"groovy","snippet":"url = \"http://localhost:8180\"\n\ndocPath = \"screenshots\"","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Advanced Configuration","pageMeta":{},"fileName":"advanced-configuration","dirName":"UI","pageSectionIdTitles":[{"title":"Timeouts","id":"timeouts"},{"title":"Window Size","id":"window-size"},{"title":"Documentation Artifacts","id":"documentation-artifacts"}]}},{"type":"Page","content":[{"title":"Test Encapsulation","id":"test-encapsulation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Robust tests should not depend on implementation details.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"UI has plenty of those:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"UI Elements placement","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Actions","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"UI test should not depend on any of them.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Move elements placement and available actions outside of UI test.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Multiple tests can then reuse that information.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"And more importantly you will have only one place to change if UI changes.","type":"SimpleText"}]}]},{"title":"Definition","id":"definition","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To define ","type":"SimpleText"},{"code":"PageObject","type":"InlinedCode"},{"text":" create a class.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package pages\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*\n\nclass SearchPage {\n    def welcomeMessage = $('#welcome')\n    def searchMessage = $('#message')\n    def box = $('#search-box')\n    def results = $('#results .result')\n    def numberOfResults = results.count\n\n    def submit(query) {\n        browser.open(\"/search\")\n\n        box.setValue(query)\n        box.sendKeys(\"\\n\")\n    }\n}","type":"Snippet"}]},{"title":"Grouping","id":"grouping","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To make it easier to refer ","type":"SimpleText"},{"code":"PageObjects","type":"InlinedCode"},{"text":" from different tests combine them in one file","type":"SimpleText"}]},{"lang":"groovy","snippet":"package pages\n\nclass Pages {\n    static final def search = new SearchPage()\n    static final def calculation = new CalculationPage()\n    static final def form = new FormPage()\n}","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Use static import to have seamless access to all of them","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\nimport static pages.Pages.*\n\nscenario(\"search by specific query\") {\n    search.submit(\"search this\")\n    search.numberOfResults.should == 2\n}","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Page Object","pageMeta":{},"fileName":"page-object","dirName":"UI","pageSectionIdTitles":[{"title":"Test Encapsulation","id":"test-encapsulation"},{"title":"Definition","id":"definition"},{"title":"Grouping","id":"grouping"}]}},{"type":"Page","content":[{"title":"Dynamic Scenarios","id":"dynamic-scenarios","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Every time you call ","type":"SimpleText"},{"code":"scenario","type":"InlinedCode"},{"text":" method a new scenario is being registered.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Define scenarios in a loop to have dynamic scenarios based on provided data.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\n[1, 2, 3].each { number ->\n    scenario(\"number $number\") {\n        println number\n    }\n}","title":"dynamic scenarios","type":"Snippet"}]},{"title":"CSV","id":"csv","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"data.csv","type":"InlinedCode"},{"text":" to conveniently build your scenarios from an external ","type":"SimpleText"},{"code":"CSV","type":"InlinedCode"},{"text":" data set.","type":"SimpleText"}]},{"lang":"csv","snippet":"title, input, output\nhello, 10, 20\nworld, 30, 40","title":"examples/use-cases.csv","type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\ndata.csv('use-cases.csv').each { row ->\n    scenario(\"use case ${row.title}\") {\n        println row.input\n        println row.output\n    }\n}","title":"CSV-driven tests","type":"Snippet"}]},{"title":"Table Data","id":"table-data","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" if you want to derive data and/or have a convenience of collocating data and tests","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\ndef lever = 10\n\ndef useCases = ['title'  | 'input'    | 'output'] {\n               ____________________________________\n                'hello'  | lever      | lever + 10\n                'world'  | lever + 30 | lever + 40 }\n\nuseCases.each { row ->\n    scenario(\"use case ${row.title}\") {\n        println row.input\n        println row.output\n    }\n}","title":"TableData-driven tests","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Groovy Specific Runner","pageTitle":"Data Driven Scenarios","pageMeta":{},"fileName":"data-driven-scenarios","dirName":"groovy-specific-runner","pageSectionIdTitles":[{"title":"Dynamic Scenarios","id":"dynamic-scenarios"},{"title":"CSV","id":"csv"},{"title":"Table Data","id":"table-data"}]}},{"type":"Page","content":[{"title":"Living Document","id":"living-document","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In your test you can capture input and output and save it to a file.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"By using documentation systems you can use the captured artifacts to render business friendly documentation of your business logic.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"As system evolves, so do your tests and so does your documentation. Essentially you will have a living document describing your system.","type":"SimpleText"}]}]},{"title":"Capture Input","id":"capture-input","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"doc.capture","type":"InlinedCode"},{"text":" to save any value to a file.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Example below assumes ","type":"SimpleText"},{"code":"core","type":"InlinedCode"},{"text":" static import.","type":"SimpleText"}]},{"lang":"java","snippet":"import static org.testingisdocumenting.webtau.WebTauCore.*;","includeRegexp":"import.*Core","type":"Snippet"},{"lang":"java","snippet":"TableData allEmployees = table(    \"id\", \"level\", \"monthsAtCompany\",\n                               ____________________________________,\n                                \"alice\",       5,   1,\n                                  \"bob\",       3,   0,\n                                \"smith\",       4,   1,\n                                  \"cat\",       4,   0);\naddEmployees(allEmployees);\n\ndoc.capture(PeopleDaoWithDocTest.class, \"all-employees\", allEmployees); // capture all employees for documentation purposes","title":"capturing a value","entry":"initEmployees","commentsType":"inline","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Captures value to a file using passed test class to determine the root location of the file. In maven like build systems it will most likely be ","type":"SimpleText"},{"code":"target/test-classes","type":"InlinedCode"},{"text":" of a module containing the class.","type":"SimpleText"}]}]},{"title":"Capture Expected Output","id":"capture-expected-output","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"doc.expected.capture","type":"InlinedCode"},{"text":" to save most recent expected value.","type":"SimpleText"}]},{"lang":"java","snippet":"actual(dao.thisWeekJoiners()).should(equal(table(   \"*id\", \"level\", \"monthsAtCompany\",\n                                                ____________________________________,\n                                                    \"bob\",       3,   0,\n                                                    \"cat\",       4,   0)));\n\ndoc.expected.capture(PeopleDaoWithDocTest.class, \"new-joiners\"); // capture expected new joiners for documentation purposes","title":"capturing most recent expected","entry":"validateNewJoiners","commentsType":"inline","bodyOnly":true,"type":"Snippet"}]},{"title":"Znai Example","id":"znai-example","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Since this documentation is rendered using ","type":"SimpleText"},{"url":"https://github.org/testingisdocumenting/znai","isFile":false,"type":"Link","content":[{"text":"Znai","type":"SimpleText"}]},{"text":" here is an example of how to use the captured artifacts.","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://github.org/testingisdocumenting/znai","isFile":false,"type":"Link","content":[{"text":"Znai","type":"SimpleText"}]},{"text":" has ","type":"SimpleText"},{"code":":include-table:","type":"InlinedCode"},{"text":" plugin to render a table giving a json or CSV file.","type":"SimpleText"}]},{"lang":"text","snippet":":include-table: all-employees.json\n:include-table: new-joiners.json\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Below is the example of the business logic rendered as documentation.","type":"SimpleText"}]},{"type":"ThematicBreak"},{"type":"Paragraph","content":[{"text":"Our HR system consider all employees that has been in the company less than a month as new joiners.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"For example, giving employees:","type":"SimpleText"}]},{"table":{"columns":[{"title":"id"},{"title":"level"},{"title":"monthsAtCompany"}],"data":[[[{"type":"Paragraph","content":[{"text":"alice","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"5","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"bob","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"3","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"0","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"smith","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"4","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"cat","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"4","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"0","type":"SimpleText"}]}]]]},"type":"Table"},{"type":"Paragraph","content":[{"text":"System will list following employees as new joiners:","type":"SimpleText"}]},{"table":{"columns":[{"title":"id"},{"title":"level"},{"title":"monthsAtCompany"}],"data":[[[{"type":"Paragraph","content":[{"text":"bob","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"3","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"0","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"cat","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"4","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"0","type":"SimpleText"}]}]]]},"type":"Table"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"JVM Business Logic","pageTitle":"Documentation Artifacts","pageMeta":{},"fileName":"documentation-artifacts","dirName":"JVM-business-logic","pageSectionIdTitles":[{"title":"Living Document","id":"living-document"},{"title":"Capture Input","id":"capture-input"},{"title":"Capture Expected Output","id":"capture-expected-output"},{"title":"Znai Example","id":"znai-example"}]}},{"type":"Page","content":[{"title":"Contain","id":"contain","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"contain","type":"InlinedCode"},{"text":" matcher to test scenarios like search or list of recently created entries.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This way you don't have to assume an existing state of your backend under test.","type":"SimpleText"}]},{"title":"Response","data":[{"id":1,"firstName":"FN1","lastName":"LN1"},{"id":2,"firstName":"FN2","lastName":"LN2"},{"id":3,"firstName":"FN3","lastName":"LN3"}],"paths":[],"type":"Json"},{"type":"Paragraph","content":[{"text":"Given the response, we want to make sure there is an entry with a specified ","type":"SimpleText"},{"code":"firstName","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"lastName","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest.springboot\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"list Customers and assert that it contains a specified entry\") {\n    http.get(\"/customers\") {\n        body.should contain([firstName: 'FN1', lastName: 'LN1'])\n    }\n}","type":"Snippet"}]},{"title":"List Of Objects","id":"list-of-objects","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If you want to make sure that all the values in the list are what you need - use ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest.springboot\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"list Customers and assert with a Table Data\") {\n    http.post(\"/customers\", [firstName: \"FN1\", lastName: \"LN1\"])\n    http.post(\"/customers\", [firstName: \"FN2\", lastName: \"LN2\"])\n    http.post(\"/customers\", [firstName: \"FN3\", lastName: \"LN3\"])\n\n    http.get(\"/customers?sortBy=firstName\") {\n        body.should == ['firstName' | 'lastName'] {\n                        __________________________\n                              'FN1' |      'LN1'\n                              'FN2' |      'LN2'\n                              'FN3' |      'LN3' }\n    }\n\n    http.doc.capture('list-match')\n}","type":"Snippet"}]},{"title":"Order Agnostic Match","id":"order-agnostic-match","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"*key","type":"InlinedCode"},{"text":" column(s) if list order is not guaranteed","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest.springboot\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"list Customers and assert with a Table Data using key column\") {\n    def id1 = createCustomer firstName: \"FN1\", lastName: \"LN1\"\n    def id2 = createCustomer firstName: \"FN2\", lastName: \"LN2\"\n    def id3 = createCustomer firstName: \"FN3\", lastName: \"LN3\"\n\n    http.get(\"/customers\") {\n        body.should == ['*id' | 'firstName' | 'lastName'] {\n                        _________________________________\n                          id2 |       'FN2' |      'LN2'\n                          id1 |       'FN1' |      'LN1'\n                          id3 |       'FN3' |      'LN3'}\n    }\n}\n\ndef createCustomer(Map payload) {\n    def id = http.post(\"/customers\", payload) { id }\n    http.doc.capture('create-customer')\n\n    return id\n}","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"Complex Types","pageMeta":{},"fileName":"complex-types","dirName":"REST","pageSectionIdTitles":[{"title":"Contain","id":"contain"},{"title":"List Of Objects","id":"list-of-objects"},{"title":"Order Agnostic Match","id":"order-agnostic-match"}]}},{"type":"Page","content":[{"title":"Terminate All","id":"terminate-all","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"terminateAll","type":"InlinedCode"},{"text":" if you need to stop a current scenario and all the scenarios after that. Consequent scenarios will be marked","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as skipped in the produced report.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"first test\") {\n    terminateAll('hard stop of the rest of the tests')\n}\n\nscenario(\"second test\") {\n    browser.open(\"/app\")\n}\n\nscenario(\"third test\") {\n    http.get(\"/weather\") {\n        temperature.shouldBe < 100\n    }\n}","title":"tests termination","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Test two and three in the example above will not be executed. Browser will not be opened and REST API will not be called.","type":"SimpleText"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Groovy Specific Runner","pageTitle":"Tests Hard Stops","pageMeta":{},"fileName":"tests-hard-stops","dirName":"groovy-specific-runner","pageSectionIdTitles":[{"title":"Terminate All","id":"terminate-all"}]}},{"type":"Page","content":[{"title":"Overrides","id":"overrides","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Any config file parameter can be overridden with a command line parameter.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, given this config file:","type":"SimpleText"}]},{"lang":"cfg","snippet":"waitTimeout = 2500\nurl = http://my-server\n","lineNumber":"","title":"webtau.cfg","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Values can be overridden as follows:","type":"SimpleText"}]},{"command":"webtau --waitTimeout=25000 --url=http://another-server","paramsToHighlight":[],"type":"CliCommand"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Configuration","pageTitle":"Cli","pageMeta":{},"fileName":"cli","dirName":"configuration","pageSectionIdTitles":[{"title":"Overrides","id":"overrides"}]}},{"type":"Page","content":[{"title":"sscenario","id":"sscenario","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Define tests with ","type":"SimpleText"},{"code":"sscenario","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"singleScenario","type":"InlinedCode"},{"text":" to only run those tests and skip all the other tests defined in all the test files.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Useful during tests creation or debugging.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('step one') {\n    http.post('/reset') {\n        // ...\n    }\n}\n\nsscenario('step two') {\n    // test that you want to focus on\n}\n\nsingleScenario('step three') {\n    // test that you want to focus on\n}\n\nscenario('step four') {\n    http.put('/extra') {\n        // ...\n    }\n}","title":"Selective tests run","highlight":["sscenario","singleScenario"],"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: ","type":"SimpleText"},{"code":"webtau","type":"InlinedCode"},{"text":" command line will exit with non zero code if there are ","type":"SimpleText"},{"code":"sscenario","type":"InlinedCode"},{"text":" tests present","type":"SimpleText"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Groovy Specific Runner","pageTitle":"Selective Run","pageMeta":{},"fileName":"selective-run","dirName":"groovy-specific-runner","pageSectionIdTitles":[{"title":"sscenario","id":"sscenario"}]}},{"type":"Page","content":[{"title":"File System Content","id":"file-system-content","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In following examples backend expects a file passed as ","type":"SimpleText"},{"code":"multipart/form-data","type":"InlinedCode"},{"text":". File content is expected to be stored in ","type":"SimpleText"},{"code":"file","type":"InlinedCode"},{"text":" field.","type":"SimpleText"},{"type":"HardLineBreak"},{"text":"Backend responds with received file name and file description.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To ","type":"SimpleText"},{"code":"POST","type":"InlinedCode"},{"text":" form data, you need to use the same ","type":"SimpleText"},{"code":"http.post","type":"InlinedCode"},{"text":" statement as you saw in previous examples.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Second parameter should be ","type":"SimpleText"},{"code":"http.formData","type":"InlinedCode"},{"text":" instead of a map payload we used for ","type":"SimpleText"},{"code":"JSON","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"groovy","snippet":"def imagePath = testResourcePath(\"src/test/resources/image.png\")\n\nhttp.post(\"/file-upload\", http.formData(file: imagePath)) {\n    fileName.should == 'image.png'\n}","entry":"file upload example simple","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"http.formFile","type":"InlinedCode"},{"text":" to override file name that is being sent to the backend.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def imagePath = testResourcePath(\"src/test/resources/image.png\")\n\nhttp.post(\"/file-upload\", http.formData(file: http.formFile('myFileName.png', imagePath))) {\n    fileName.should == 'myFileName.png'\n}","entry":"file upload example with file name override","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Multiple form fields can be specified like in the example below.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def imagePath = testResourcePath(\"src/test/resources/image.png\")\n\nhttp.post(\"/file-upload\", http.formData(file: imagePath, fileDescription: 'new report')) {\n    fileName.should == 'image.png'\n    description.should == 'new report'\n}","entry":"file upload example multiple fields","bodyOnly":true,"type":"Snippet"}]},{"title":"In-Memory Content","id":"in-memory-content","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If your test already has content, you can explicitly pass it as is.","type":"SimpleText"}]},{"lang":"groovy","snippet":"byte[] fileContent = [1, 2, 3, 4] as byte[]\n\nhttp.post(\"/file-upload\", http.formData(file: fileContent)) {\n    fileName.should == 'backend-generated-name-as-no-name-provided'\n}","entry":"file upload example with in-memory content","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: no file name is passed and this particular backend generated file name on your behalf.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"http.formFile","type":"InlinedCode"},{"text":" to provide a file name","type":"SimpleText"}]},{"lang":"groovy","snippet":"byte[] fileContent = [1, 2, 3, 4] as byte[]\n\nhttp.post(\"/file-upload\", http.formData(\n        file: http.formFile('myFileName.dat', fileContent))) {\n    fileName.should == 'myFileName.dat'\n}","entry":"file upload example with in-memory content and file name","bodyOnly":true,"type":"Snippet"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"REST","pageTitle":"Files Upload","pageMeta":{},"fileName":"files-upload","dirName":"REST","pageSectionIdTitles":[{"title":"File System Content","id":"file-system-content"},{"title":"In-Memory Content","id":"in-memory-content"}]}},{"type":"Page","content":[{"title":"Asserting Text","id":"asserting-text","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If response contains a pdf file you can assert its content using ","type":"SimpleText"},{"code":"pdf(body)","type":"InlinedCode"},{"text":" function.","type":"SimpleText"}]},{"lang":"groovy","snippet":"http.get(\"/report\") {\n    pdf(body).pageText(0).should contain('Quarterly earnings:')\n}","entry":"download pdf and assert page text using contains","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"If more than one assertion needs to be made, assign ","type":"SimpleText"},{"code":"pdf","type":"InlinedCode"},{"text":" result to a local variable.","type":"SimpleText"}]},{"lang":"groovy","snippet":"http.get(\"/report\") {\n    def pdf = pdf(body)\n    pdf.pageText(0).should contain('Quarterly earnings:')\n    pdf.pageText(1).should == 'Intentional blank page\\n'\n}","entry":"download pdf and assert page text using equal and contains","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: use pdf assertions for sanity checks like presence of correct client names or account numbers. Leave comprehensive pdf generation test to unit tests.","type":"SimpleText"}]}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"REST","pageTitle":"PDF","pageMeta":{},"fileName":"PDF","dirName":"REST","pageSectionIdTitles":[{"title":"Asserting Text","id":"asserting-text"}]}},{"type":"Page","content":[{"title":"Test Listener Interface","id":"test-listener-interface","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To define a custom test listener you need to implement the ","type":"SimpleText"},{"code":"TestListener","type":"InlinedCode"},{"text":" interface","type":"SimpleText"}]},{"lang":"java","snippet":"package org.testingisdocumenting.webtau.reporter;\n\n/**\n * Lowest common denominator for Groovy Standalone Tests, JUnit4, JUnit5\n */\npublic interface TestListener {\n    /**\n     * before any test is ran\n     */\n    default void beforeFirstTest() {}\n\n    /**\n     * before test code is invoked\n     * @param test test\n     */\n    default void beforeTestRun(WebTauTest test) {}\n\n    /**\n     * after test code is invoked\n     * @param test test\n     */\n    default void afterTestRun(WebTauTest test) {}\n\n    /**\n     * after all the tests are invoked\n     * @param report report\n     */\n    default void afterAllTests(WebTauReport report) {}\n\n    /**\n     * after test is ran but before its first statement.\n     * executed code in this listener is considered to be part of a test.\n     * @param test test\n     */\n    default void beforeFirstTestStatement(WebTauTest test) {}\n\n    /**\n     * right before test considered to be complete. May not be executed if the test didn't reach the last statement.\n     * executed code in this listener is considered to be part of a test.\n     * @param test test\n     */\n    default void afterLastTestStatement(WebTauTest test) {}\n}","title":"TestListener.java","type":"Snippet"}]},{"title":"Config","id":"config","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Once you have an implementation, use the ","type":"SimpleText"},{"code":"testListeners","type":"InlinedCode"},{"text":" key in your config file to use it","type":"SimpleText"}]},{"lang":"cfg","snippet":"import listeners.MetadataValidationTestListener\n\ntestListeners = [MetadataValidationTestListener]","title":"webtau.cfg","type":"Snippet"},{"lang":"groovy","snippet":"package listeners\n\nimport org.testingisdocumenting.webtau.reporter.TestListener\nimport org.testingisdocumenting.webtau.reporter.WebTauTest\n\nclass MetadataValidationTestListener implements TestListener {\n    @Override\n    void afterLastTestStatement(WebTauTest test) {\n        if (!test.metadata.has('owner')) {\n            throw new RuntimeException('owner for <' + test.scenario + '> is not set')\n        }\n    }\n}","title":"listeners/MetadataValidationTestListener.groovy","type":"Snippet"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"Groovy Specific Runner","pageTitle":"Test Listeners","pageMeta":{},"fileName":"test-listeners","dirName":"groovy-specific-runner","pageSectionIdTitles":[{"title":"Test Listener Interface","id":"test-listener-interface"},{"title":"Config","id":"config"}]}},{"type":"Page","content":[{"title":"Implicit Page Open Logic","id":"implicit-page-open-logic","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can register a custom callback that will be called implicitly every time a web page is opened.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"One of the typical use cases is to inject cookies or values into a local storage before tests logic begins.","type":"SimpleText"}]}]},{"title":"Auto Login","id":"auto-login","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To register an open handler you need to define ","type":"SimpleText"},{"code":"browserPageNavigationHandlerProvider","type":"InlinedCode"},{"text":" config value.","type":"SimpleText"}]},{"lang":"cfg","snippet":"url = \"http://localhost:8180\"\n\ndef userNameKey = 'userName'\nbrowserPageNavigationHandler = { passedUrl, fullUrl, currentUrl ->\n    if (browser.localStorage.getItem(userNameKey)) {\n        return\n    }\n\n    browser.localStorage.setItem(userNameKey, 'LoggedIn User')\n    browser.reopen(fullUrl)\n}","title":"webtau.cfg","type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"page open handlers\") {\n    browser.open('/logged-in-user')\n    $('#welcome').should == 'Welcome LoggedIn User'\n}\n\nscenario(\"page open handlers during re-open\") {\n    browser.localStorage.clear()\n\n    browser.reopen('/logged-in-user')\n    $('#welcome').should == 'Welcome LoggedIn User'\n}","title":"Handler will be called before first assertion","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: usage of ","type":"SimpleText"},{"code":"localStorage","type":"InlinedCode"},{"text":" is just an example. You can use ","type":"SimpleText"},{"code":"cookies","type":"InlinedCode"},{"text":", call external services using ","type":"SimpleText"},{"code":"http.","type":"InlinedCode"},{"text":" or load","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"credentials from a file system.","type":"SimpleText"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Page Open Handlers","pageMeta":{},"fileName":"page-open-handlers","dirName":"UI","pageSectionIdTitles":[{"title":"Implicit Page Open Logic","id":"implicit-page-open-logic"},{"title":"Auto Login","id":"auto-login"}]}},{"type":"Page","content":[{"title":"Text","id":"text","type":"Section","content":[{"lang":"groovy","snippet":"def message = $('#message')\nmessage.should == 'Select option'","title":"exact text","type":"Snippet"},{"lang":"groovy","snippet":"def message = $('#message')\nmessage.should == ~/option/","title":"regexp text","type":"Snippet"},{"lang":"groovy","snippet":"def menu = $('#menu ul li')\nmenu.should == ['Hello', 'Text', 'World']","title":"list of text","type":"Snippet"},{"lang":"groovy","snippet":"def menu = $('#menu ul li')\nmenu.should contain('Text')","title":"contain text in list","type":"Snippet"},{"lang":"groovy","snippet":"def menu = $('#menu ul li')\nmenu.should == ['Hello', ~/T..t/, 'World']","title":"list of text and regexp","type":"Snippet"},{"meta":{"rightSide":true},"xmlAsJson":{"tagName":"div","attributes":[],"children":[{"tagName":"div","attributes":[{"name":"id","value":"\"message\""}],"children":[{"tagName":"","text":"Select option"}]},{"tagName":"div","attributes":[{"name":"id","value":"\"menu\""}],"children":[{"tagName":"ul","attributes":[],"children":[{"tagName":"li","attributes":[],"children":[{"tagName":"","text":"Hello"}]},{"tagName":"li","attributes":[],"children":[{"tagName":"","text":"Text"}]},{"tagName":"li","attributes":[],"children":[{"tagName":"","text":"World"}]}]}]}]},"paths":[],"type":"Xml"}]},{"title":"Numbers","id":"numbers","type":"Section","content":[{"lang":"groovy","snippet":"def total = $('#total')\ntotal.should == 300.6","title":"exact number","type":"Snippet"},{"lang":"groovy","snippet":"def total = $('#total')\ntotal.shouldBe > 200","title":"greater than","type":"Snippet"},{"lang":"groovy","snippet":"def total = $('#total')\ntotal.shouldBe >= 300","title":"greater than or equal","type":"Snippet"},{"lang":"groovy","snippet":"def split = $('#split ul li')\nsplit.should == [100, 28, 172.6]","title":"list of numbers","type":"Snippet"},{"lang":"groovy","snippet":"def split = $('#split ul li')\nsplit.should == [100, lessThan(100), greaterThanOrEqual(150)]","title":"list of exact and greater/less","type":"Snippet"},{"meta":{"rightSide":true},"xmlAsJson":{"tagName":"div","attributes":[],"children":[{"tagName":"div","attributes":[{"name":"id","value":"\"total\""}],"children":[{"tagName":"","text":"300.6"}]},{"tagName":"div","attributes":[{"name":"id","value":"\"split\""}],"children":[{"tagName":"ul","attributes":[],"children":[{"tagName":"li","attributes":[],"children":[{"tagName":"","text":"100"}]},{"tagName":"li","attributes":[],"children":[{"tagName":"","text":"28"}]},{"tagName":"li","attributes":[],"children":[{"tagName":"","text":"172.6"}]}]}]}]},"paths":[],"type":"Xml"}]},{"title":"State","id":"state","type":"Section","content":[{"lang":"groovy","snippet":"def button = $(\"#action\")\nbutton.should beDisabled()\nbutton.shouldNot beEnabled()","title":"enabled/disabled","type":"Snippet"},{"lang":"groovy","snippet":"def feedback = $(\"#feedback\")\nfeedback.should beHidden()\nfeedback.shouldNot beVisible()","title":"visible/hidden","type":"Snippet"},{"lang":"html","snippet":"<div> \n <button id=\"action\" disabled>Click me</button> \n <div id=\"feedback\" style=\"display: none;\"></div> \n</div>","meta":{"rightSide":true},"type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Matchers","pageMeta":{"type":["two-sides"]},"fileName":"matchers","dirName":"UI","pageSectionIdTitles":[{"title":"Text","id":"text"},{"title":"Numbers","id":"numbers"},{"title":"State","id":"state"}]}},{"type":"Page","content":[{"title":"Validation","id":"validation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Webtau supports validation of responses against an ","type":"SimpleText"},{"url":"https://www.openapis.org/","isFile":false,"type":"Link","content":[{"text":"OpenAPI specification","type":"SimpleText"}]},{"text":".  This feature can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"be enabled by specifying the ","type":"SimpleText"},{"code":"openApiSpecUrl","type":"InlinedCode"},{"text":" configuration option.  This should be the URL to the specification against","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which to validate.","type":"SimpleText"}]},{"lang":"cfg","snippet":"url = \"http://localhost:8080\"\nopenApiSpecUrl = 'api-spec.json'","title":"Configuration","type":"Snippet"}]},{"title":"Current limitations","id":"current-limitations","type":"Section","content":[{"type":"Paragraph","content":[{"text":"OpenAPI specification support is still in its early stage.  It is fully functional but there are a few limitations to be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"aware of:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"webtau currently only supports OpenAPI specification v2","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"specification matching is currently done based on the path and method","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"any HTTP requests which do not match any operation in the specification will not fail tests but will produce a warning","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"on the console","type":"SimpleText"}]}]}]}]},{"title":"Validations report","id":"validations-report","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The validation errors are reported in the same manner as assertion errors.  They are available in the output from the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"command line webtau runner:","type":"SimpleText"}]},{"lang":"bash","snippet":"> executing HTTP POST http://localhost:8080/customers\n {\n  \"id\": 1,\n  \"firstName\": \"FN\",\n  \"lastName\": \"LN\",\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:8080/customers/1\"\n    },\n    \"customer\": {\n      \"href\": \"http://localhost:8080/customers/1\"\n    }\n  }\n }\nX failed executing HTTP POST http://localhost:8080/customers : \nAPI spec validation failure: ERROR - Response status 201 not defined for path ''.: []\n[x] failed\njava.lang.AssertionError: \nAPI spec validation failure: ERROR - Response status 201 not defined for path ''.: []\n\tat scenarios.rest.springboot.customerCrud$_run_closure1.doCall(customerCrud.groovy:8)\n\tat scenarios.rest.springboot.customerCrud$_run_closure1.doCall(customerCrud.groovy)\n\n\n\nTotal: 1,  Passed: 0,  Skipped: 0,  Failed: 1,  Errored: 0\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"They are also available in the HTML report:","type":"SimpleText"}]},{"fit":true,"imageSrc":"/webtau/img/rest-crud-openapi-spec-validation-error.png","timestamp":1584552020241,"shapes":[],"width":2242.0,"height":620.0,"type":"AnnotatedImage"}]},{"title":"Validation Configuration","id":"validation-configuration","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To ignore additional properties in responses set ","type":"SimpleText"},{"code":"openApiIgnoreAdditionalProperties","type":"InlinedCode"},{"text":" to ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"As any other config value it can be done via command line, config file or system properties.","type":"SimpleText"}]}]},{"title":"Disable Validation","id":"disable-validation","type":"Section","content":[{"lang":"groovy","snippet":"import org.testingisdocumenting.webtau.openapi.OpenApi","includeRegexp":"import.*Open","title":"Additional import","type":"Snippet"},{"lang":"groovy","snippet":"OpenApi.withoutValidation {\n    http.post(\"/employee\", [firstName: 'First']) {\n        // ...\n    }\n}","title":"Disable request and response validation","type":"Snippet"},{"lang":"groovy","snippet":"OpenApi.responseOnlyValidation() {\n    http.post(\"/employee\", [firstName: 'First']) {\n        // ...\n    }\n}","title":"Disable request validation","type":"Snippet"},{"lang":"groovy","snippet":"OpenApi.requestOnlyValidation() {\n    http.post(\"/employee\", [firstName: 'First', lastName: 'Second']) {\n        // ...\n    }\n}","title":"Disable response validation","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"OpenAPI Spec","pageMeta":{},"fileName":"openAPI-spec","dirName":"REST","pageSectionIdTitles":[{"title":"Validation","id":"validation"},{"title":"Current limitations","id":"current-limitations"},{"title":"Validations report","id":"validations-report"},{"title":"Validation Configuration","id":"validation-configuration"},{"title":"Disable Validation","id":"disable-validation"}]}},{"type":"Page","content":[{"title":"Scenarios","id":"scenarios","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You document ","type":"SimpleText"},{"code":"REST endpoints","type":"InlinedCode"},{"text":" so users can use them to achieve various goals.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"You also need to make sure that documented scenarios work as advertised.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To automate the process, capture executed scenarios and use them inside your documentation.","type":"SimpleText"}]}]},{"title":"Capturing Test Artifacts","id":"capturing-test-artifacts","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To capture ","type":"SimpleText"},{"code":"REST","type":"InlinedCode"},{"text":" artifacts use ","type":"SimpleText"},{"code":"http.doc.capture","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.http\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.scenario\n\nscenario(\"extracting id after POST to use inside GET request\") {\n    def id = http.post(\"/employee\", [firstName: 'FN', lastName: 'LN']) {\n        return id\n    }\n    http.doc.capture('employee-post')\n\n    http.get(\"/employee/$id\") {\n        firstName.should == 'FN'\n        lastName.should == 'LN'\n    }\n    http.doc.capture('employee-get') // capture previous HTTP call into <docDir>/employee-get\n}","title":"test.groovy","commentsType":"inline","type":"Snippet"},{"type":"Paragraph","content":[{"text":"An ","type":"SimpleText"},{"code":"employee-get","type":"InlinedCode"},{"text":" directory will be created containing a number of test artifacts.","type":"SimpleText"}]}]},{"title":"Test Artifacts Location","id":"test-artifacts-location","type":"Section","content":[{"type":"Paragraph","content":[{"text":"By default, the directory will be created in the current working directory.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"To change it add ","type":"SimpleText"},{"code":"docPath","type":"InlinedCode"},{"text":" to your ","type":"SimpleText"},{"code":"webtau.cfg","type":"InlinedCode"},{"text":" file.","type":"SimpleText"}]},{"lang":"cfg","snippet":"url = \"http://localhost:8180\"\n\ndocPath = \"doc-artifacts\"","title":"webtau.cfg","type":"Snippet"}]},{"title":"Test Artifacts","id":"test-artifacts","type":"Section","content":[{"type":"Paragraph","content":[{"text":"A number of artifacts will be created depending on the exact call being captured.","type":"SimpleText"}]},{"level":2,"title":"Request and response payloads","id":"request-and-response-payloads","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Request bodies are captured in either ","type":"SimpleText"},{"code":"request.json","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"request.pdf","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"request.data","type":"InlinedCode"},{"text":" depending on the type.","type":"SimpleText"}]},{"title":"employee-post/request.json","data":{"firstName":"FN","lastName":"LN"},"paths":[],"type":"Json"},{"type":"Paragraph","content":[{"text":"Similarly, response bodies are captured in either ","type":"SimpleText"},{"code":"response.json","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"response.pdf","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"response.data","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"title":"employee-get/response.json","data":{"firstName":"FN","lastName":"LN"},"paths":[],"type":"Json"},{"level":2,"title":"Request and response headers","id":"request-and-response-headers","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Just like payloads, request and response headers are captured in ","type":"SimpleText"},{"code":"request.header.txt","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"response.header.txt","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"respectively. These files contain a header per line with the name and values colon separated.  The values","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"are redacted for any potentially sensitive headers.","type":"SimpleText"}]},{"title":"redacted request.header.txt","data":"testheader: testValue\nauthorization: ................","paths":[],"type":"Json"},{"level":2,"title":"Response body assertions","id":"response-body-assertions","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Any assertions you perform on the response body in your scenarios are captured in a ","type":"SimpleText"},{"code":"paths.json","type":"InlinedCode"},{"text":" file.  This","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"contains an array with the list of paths within the body whose values were asserted.","type":"SimpleText"}]},{"title":"employee-get/paths.json","data":["root.firstName","root.lastName"],"paths":[],"type":"Json"},{"level":2,"title":"Request URLs","id":"request-urls","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The actual request URL is captured in two forms into two different files:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"request.fullurl.txt","type":"InlinedCode"},{"text":" - contains the full URL","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"request.url.txt","type":"InlinedCode"},{"text":" - contains only the part specified in the http call in the scenario","type":"SimpleText"}]}]}]},{"lang":"txt","snippet":"/params?a=1&b=text","title":"request.url.txt","type":"Snippet"},{"lang":"txt","snippet":"http://127.0.0.1:60519/params?a=1&b=text","title":"request.fullurl.txt","type":"Snippet"}]},{"title":"Document REST calls","id":"document-rest-calls","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If you have user facing scenario tests, capture them and refer to them inside your documentation.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Set your documentation build pipeline like below.","type":"SimpleText"}]},{"diagram":{"isInvertedTextColorByStyleId":{},"svg":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: Generated Pages: 1 -->\n<svg width=\"392pt\" height=\"47pt\"\n viewBox=\"0.00 0.00 391.85 47.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 43)\">\n<title>Generated</title>\n<polygon fill=\"transparent\" stroke=\"transparent\" points=\"-4,4 -4,-43 387.85,-43 387.85,4 -4,4\"/>\n<!-- build -->\n<g id=\"node1\" class=\"node\">\n<title>build</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"0,-0.5 0,-38.5 54,-38.5 54,-0.5 0,-0.5\"/>\n<text text-anchor=\"middle\" x=\"27\" y=\"-16.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Build</text>\n</g>\n<!-- deploy -->\n<g id=\"node2\" class=\"node\">\n<title>deploy</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"90,-0.5 90,-38.5 149.13,-38.5 149.13,-0.5 90,-0.5\"/>\n<text text-anchor=\"middle\" x=\"119.56\" y=\"-16.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Deploy</text>\n</g>\n<!-- build&#45;&gt;deploy -->\n<g id=\"edge1\" class=\"edge\">\n<title>build&#45;&gt;deploy</title>\n<path fill=\"none\" stroke=\"black\" d=\"M54.19,-19.5C62.14,-19.5 71.05,-19.5 79.65,-19.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"79.89,-23 89.89,-19.5 79.89,-16 79.89,-23\"/>\n</g>\n<!-- testrun -->\n<g id=\"node3\" class=\"node\">\n<title>testrun</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"185.13,-0.5 185.13,-38.5 252.59,-38.5 252.59,-0.5 185.13,-0.5\"/>\n<text text-anchor=\"middle\" x=\"218.86\" y=\"-16.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Test Run</text>\n</g>\n<!-- deploy&#45;&gt;testrun -->\n<g id=\"edge2\" class=\"edge\">\n<title>deploy&#45;&gt;testrun</title>\n<path fill=\"none\" stroke=\"black\" d=\"M149.23,-19.5C157.29,-19.5 166.23,-19.5 174.93,-19.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"174.95,-23 184.95,-19.5 174.95,-16 174.95,-23\"/>\n</g>\n<!-- documentation -->\n<g id=\"node4\" class=\"node\">\n<title>documentation</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"288.59,-0.5 288.59,-38.5 383.85,-38.5 383.85,-0.5 288.59,-0.5\"/>\n<text text-anchor=\"middle\" x=\"336.22\" y=\"-16.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Documentation</text>\n</g>\n<!-- testrun&#45;&gt;documentation -->\n<g id=\"edge3\" class=\"edge\">\n<title>testrun&#45;&gt;documentation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M252.61,-19.5C260.56,-19.5 269.29,-19.5 278,-19.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"278.18,-23 288.18,-19.5 278.18,-16 278.18,-23\"/>\n</g>\n</g>\n</svg>\n","stylesByNodeId":{"testrun":["h"]},"id":"dag1"},"idsToHighlight":[],"wide":false,"urls":{},"type":"GraphVizDiagram"},{"type":"Paragraph","content":[{"text":"Combine REST requests and responses with Open API generated specs for complete documentation.","type":"SimpleText"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"Documentation","pageMeta":{},"fileName":"documentation","dirName":"REST","pageSectionIdTitles":[{"title":"Scenarios","id":"scenarios"},{"title":"Capturing Test Artifacts","id":"capturing-test-artifacts"},{"title":"Test Artifacts Location","id":"test-artifacts-location"},{"title":"Test Artifacts","id":"test-artifacts"},{"title":"Document REST calls","id":"document-rest-calls"}]}},{"type":"Page","content":[{"title":"Dependency","id":"dependency","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can use maven to add webtau as a dependency to you project (for autocompletion or to use with JUnit like runners).","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-groovy</artifactId>\n    <version>1.21-SNAPSHOT</version>\n</dependency>","type":"Snippet"}]},{"name":"Java","content":[{"lang":"xml","snippet":"<dependency>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau</artifactId>\n    <version>1.21-SNAPSHOT</version>\n</dependency>","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Plugin","id":"plugin","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use maven plugin to run pure groovy tests as part of your build.","type":"SimpleText"}]},{"lang":"xml","snippet":"<plugin>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-maven-plugin</artifactId>\n    <version>1.21-SNAPSHOT</version>\n    <executions>\n        <execution>\n            <phase>test</phase>\n            <goals>\n                <goal>run</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <workingDir>${project.basedir}/src/main/groovy</workingDir>\n        <env>integration</env>\n        <url>http://optional-base-url</url>\n        <tests>\n            <directory>${project.basedir}/src/main/groovy</directory>\n            <includes>\n                <include>scenarios/simple*.groovy</include>\n            </includes>\n        </tests>\n    </configuration>\n</plugin>","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"env","type":"InlinedCode"},{"text":" to specify ","type":"SimpleText"},{"url":"/webtau/configuration/environments","isFile":false,"type":"Link","content":[{"text":"environment to use","type":"SimpleText"}]},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Alternatively you can use ","type":"SimpleText"},{"code":"url","type":"InlinedCode"},{"text":" to override base url.","type":"SimpleText"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"Maven","pageMeta":{},"fileName":"maven","dirName":"REST","pageSectionIdTitles":[{"title":"Dependency","id":"dependency"},{"title":"Plugin","id":"plugin"}]}},{"type":"Page","content":[{"title":"Installation Of Groovy Runner","id":"installation-of-groovy-runner","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Download and unzip ","type":"SimpleText"},{"url":"https://repo.maven.apache.org/maven2/org/testingisdocumenting/webtau/webtau-dist/1.21-SNAPSHOT/webtau-dist-1.21-SNAPSHOT-webtau.zip","isFile":false,"type":"Link","content":[{"text":"webtau","type":"SimpleText"}]},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Add it to your ","type":"SimpleText"},{"code":"PATH","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"title":"Bare Minimum","id":"bare-minimum","type":"Section","content":[{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('simple open') {\n    browser.open(\"/search\")\n    $('#welcome').should == 'welcome to super search'\n}","title":"examples/scenarios/ui/basic.groovy","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To run test, navigate to ","type":"SimpleText"},{"code":"examples","type":"InlinedCode"},{"text":" dir and","type":"SimpleText"}]},{"command":"webtau scenarios/ui/basic.groovy --url=https://my-server","paramsToHighlight":["url"],"type":"CliCommand"},{"type":"Paragraph","content":[{"text":"Note: using ","type":"SimpleText"},{"code":"import","type":"InlinedCode"},{"text":" is optional and is mainly for IDE auto completion. Imports are added implicitly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"during command line run.","type":"SimpleText"}]}]},{"title":"Config File","id":"config-file","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Url parameter can be moved to a ","type":"SimpleText"},{"code":"webtau.cfg","type":"InlinedCode"},{"text":" file.","type":"SimpleText"}]},{"lang":"cfg","snippet":"url = \"http://localhost:8180\"","title":"examples/scenarios/ui/webtau.cfg","type":"Snippet"},{"type":"Paragraph","content":[{"url":"/webtau/configuration/environments","isFile":false,"type":"Link","content":[{"text":"Specify multiple environments","type":"SimpleText"}]},{"text":" to streamline test execution.","type":"SimpleText"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Getting Started","pageMeta":{},"fileName":"getting-started","dirName":"UI","pageSectionIdTitles":[{"title":"Installation Of Groovy Runner","id":"installation-of-groovy-runner"},{"title":"Bare Minimum","id":"bare-minimum"},{"title":"Config File","id":"config-file"}]}},{"type":"Page","content":[{"title":"WebTau","id":"webtau","type":"Section","content":[{"type":"Paragraph","content":[{"text":"WebTau (","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Web","type":"SimpleText"}]},{"text":" ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"T","type":"SimpleText"}]},{"text":"est ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"au","type":"SimpleText"}]},{"text":"tomation) - concise and expressive way to create REST API and Web UI tests.","type":"SimpleText"}]},{"width":256.0,"align":"left","imageSrc":"/webtau/webtau-logo.png","timestamp":1584552018357,"shapes":[],"height":256.0,"type":"AnnotatedImage"},{"tabsContent":[{"name":"Groovy","content":[{"columns":[{"content":[{"lang":"groovy","snippet":"package scenarios.rest\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"check weather\") {\n    http.get(\"/weather\") {\n        temperature.shouldBe < 100\n    }\n}","title":"REST API test (Groovy specific runner)","type":"Snippet"},{"lang":"groovy","snippet":"package com.example.tests.junit4\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\n@RunWith(WebTauRunner.class)\nclass WeatherGroovyIT {\n    @Test\n    void checkWeather() {\n        http.get(\"/weather\") {\n            temperature.shouldBe < 100\n        }\n    }\n}","title":"REST API test (JUnit4)","type":"Snippet"}]},{"content":[{"lang":"json","snippet":"{\n  \"temperature\": 88\n}\n","lineNumber":"","title":"Server Response","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"name":"Java","content":[{"columns":[{"content":[{"lang":"java","snippet":"package com.example.tests.junit4;\n\nimport org.testingisdocumenting.webtau.junit4.WebTauRunner;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static org.testingisdocumenting.webtau.WebTauDsl.*;\n\n@RunWith(WebTauRunner.class)\npublic class WeatherJavaIT {\n    @Test\n    public void checkWeather() {\n        http.get(\"/weather\", (header, body) -> {\n            body.get(\"temperature\").shouldBe(lessThan(100));\n        });\n    }\n}","title":"REST API test (JUnit4 Java)","type":"Snippet"}]},{"content":[{"lang":"json","snippet":"{\n  \"temperature\": 88\n}\n","lineNumber":"","title":"Server Response","type":"Snippet"}]}],"config":{},"type":"Columns"}]}],"type":"Tabs"},{"type":"Paragraph","content":[{"text":"Tests can be written in any JVM language with language specific syntactic sugar where applicable.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\nimport static pages.Pages.*\n\nscenario(\"search by specific query\") {\n    search.submit(\"search this\")\n    search.numberOfResults.should == 2\n}","title":"Web UI test","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"","pageTitle":"Index","pageMeta":{},"fileName":"index","dirName":"","pageSectionIdTitles":[{"title":"WebTau","id":"webtau"}]}},{"type":"Page","content":[{"title":"Example","id":"example","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We have an app that exposes create, read, update, and delete operations for customer records. Records are being served","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"under ","type":"SimpleText"},{"code":"/customers","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Here is an example of a ","type":"SimpleText"},{"code":"CRUD","type":"InlinedCode"},{"text":" operations test.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest.springboot\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"CRUD operations for customer\") {\n    def customerPayload = [firstName: \"FN\", lastName: \"LN\"]\n\n    def id = http.post(\"/customers\", customerPayload) {\n        return id // return id value from response body\n    }\n\n    http.get(\"/customers/${id}\") {\n        body.should == customerPayload // only specified properties will be asserted against\n    }\n\n    def changedLastName = \"NLN\"\n    http.put(\"/customers/${id}\", [*:customerPayload, lastName: changedLastName]) {\n        lastName.should == changedLastName // specifying body is optional\n    }\n\n    http.get(\"/customers/${id}\") {\n        firstName.should == \"FN\"\n        lastName.should == changedLastName\n    }\n\n    def changedFirstName = \"NFN\"\n    http.patch(\"/customers/${id}\", [firstName: changedFirstName])\n\n    http.get(\"/customers/${id}\") {\n        firstName.should == changedFirstName\n        lastName.should == changedLastName\n    }\n\n    http.delete(\"/customers/${id}\") {\n        statusCode.should == 204\n    }\n\n    http.get(\"/customers/${id}\") {\n        statusCode.should == 404\n    }\n}","commentsType":"inline","type":"Snippet"}]},{"title":"Implicit statusCode Check","id":"implicit-statuscode-check","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If you don't have an explicit ","type":"SimpleText"},{"code":"statusCode","type":"InlinedCode"},{"text":" validation it will be automatically validated based on the rules below","type":"SimpleText"}]},{"table":{"columns":[{"title":"Method","align":"left"},{"title":"Expected Code","align":"left"}],"data":[[[{"text":"GET","type":"SimpleText"}],[{"text":"200","type":"SimpleText"}]],[[{"text":"POST","type":"SimpleText"}],[{"text":"201","type":"SimpleText"}]],[[{"text":"PUT","type":"SimpleText"}],[{"text":"200","type":"SimpleText"}]],[[{"text":"PUT (no content)","type":"SimpleText"}],[{"text":"204","type":"SimpleText"}]],[[{"text":"DELETE","type":"SimpleText"}],[{"text":"200","type":"SimpleText"}]],[[{"text":"DELETE (no content)","type":"SimpleText"}],[{"text":"204","type":"SimpleText"}]],[[{"text":"PATCH","type":"SimpleText"}],[{"text":"200","type":"SimpleText"}]],[[{"text":"PATCH (no content)","type":"SimpleText"}],[{"text":"204","type":"SimpleText"}]]]},"type":"Table"}]},{"title":"Report","id":"report","type":"Section","content":[{"type":"Paragraph","content":[{"text":"After your test executions a report will be produced.","type":"SimpleText"}]},{"fit":true,"imageSrc":"/webtau/doc-artifacts/reports/report-crud-http-calls.png","timestamp":1584552018500,"shapes":[],"width":2400.0,"height":1594.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Note: asserted values are being tracked and highlighted inside the report","type":"SimpleText"}]}]},{"title":"Spring Boot","id":"spring-boot","type":"Section","content":[{"type":"Paragraph","content":[{"text":"WebTau is framework agnostic. However, to make a concrete example, the ","type":"SimpleText"},{"code":"/customer","type":"InlinedCode"},{"text":" ","type":"SimpleText"},{"code":"CRUD","type":"InlinedCode"},{"text":" endpoint","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is created by using ","type":"SimpleText"},{"url":"https://projects.spring.io/spring-boot/","isFile":false,"type":"Link","content":[{"text":"Spring Boot","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Three files are required to have a working REST endpoint with ","type":"SimpleText"},{"code":"CRUD","type":"InlinedCode"},{"text":" operations.","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Domain object","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.demo.springboot.app.data;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\n\n@Entity\npublic class Customer {\n    private Long id;\n    private String firstName;\n    private String lastName;\n\n    @Id\n    @GeneratedValue\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}","title":"Customer.java","type":"Snippet"}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Repository","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.demo.springboot.app.data;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository<Customer, Long> {\n    Iterable<Customer> findByFirstName(@Param(\"name\") String name);\n\n    Iterable<Customer> findByLastName(@Param(\"name\") String name);\n}","title":"CustomerRepository.java","type":"Snippet"}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Entry point","type":"SimpleText"}]},{"lang":"java","snippet":"package com.example.demo.springboot.app;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@SpringBootApplication(exclude = HypermediaAutoConfiguration.class)\n@EnableJpaRepositories\n@EnableSwagger2\n@Import({springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration.class})\npublic class SpringBootDemoApp {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemoApp.class, args);\n    }\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.any())\n                .paths(PathSelectors.any())\n                .build();\n    }\n}","title":"SpringBootDemoApp.java","type":"Snippet"}]}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"CRUD","pageMeta":{},"fileName":"CRUD","dirName":"REST","pageSectionIdTitles":[{"title":"Example","id":"example"},{"title":"Implicit statusCode Check","id":"implicit-statuscode-check"},{"title":"Report","id":"report"},{"title":"Spring Boot","id":"spring-boot"}]}},{"type":"Page","content":[{"title":"CLI and configuration file options","id":"cli-and-configuration-file-options","type":"Section","content":[{"table":{"columns":[{"title":"name"},{"title":"description"},{"title":"default value"}],"data":[[[{"type":"Paragraph","content":[{"text":"chromeBinPath","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path to chrome binary","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"chromeDriverPath","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path to chrome driver binary","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"config","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"config file path","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"webtau.cfg","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"disableRedirects","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"disable following of redirects from HTTP calls","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"docPath","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path for captured request/responses, screenshots and other generated artifacts for documentation","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"${workingDir}","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"env","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"environment id","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"local","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"envPath","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path items to append to path used for cli tests","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"[]","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"headless","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"run headless mode","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"jsonSchemasDir","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"url of directory containing JSON schemas","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"maxRedirects","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"Maximum number of redirects to follow for an HTTP call","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"20","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"noColor","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"disable ANSI colors","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"numberOfThreads","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"number of threads on which to run test files (one file per thread), -1 will use as many threads as there are files","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"openApiIgnoreAdditionalProperties","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"ignore additional OpenAPI properties","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"openApiSpecUrl","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"url of OpenAPI 2 spec against which to validate http calls","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"removeWebtauFromUserAgent","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"By default webtau appends webtau and its version to the user-agent, this disables that part","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"reportPath","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"report file path","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"${workingDir}/webtau.report.html","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"staleElementRetry","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"number of times to automatically retry for stale element actions","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"5","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"url","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"base url for application under test","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"userAgent","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User agent to send on HTTP requests","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"webtau/null","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"verbosityLevel","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"output verbosity level. 0 - no output; 1 - test names; 2 - first level steps; etc","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2147483647","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"waitTimeout","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"wait timeout in milliseconds","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"5000","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"windowHeight","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"browser window height","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"800","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"windowWidth","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"browser window width","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1000","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"workingDir","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"logical working dir","type":"SimpleText"}]}],null]]},"type":"Table"}]},{"title":"Environment variable options","id":"environment-variable-options","type":"Section","content":[{"table":{"columns":[{"title":"environment variable"},{"title":"description"},{"title":"default value"}],"data":[[[{"type":"Paragraph","content":[{"text":"WEBTAU_CHROME_BIN_PATH","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path to chrome binary","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"WEBTAU_CHROME_DRIVER_PATH","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path to chrome driver binary","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"WEBTAU_CONFIG","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"config file path","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"webtau.cfg","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_DISABLE_REDIRECTS","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"disable following of redirects from HTTP calls","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_DOC_PATH","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path for captured request/responses, screenshots and other generated artifacts for documentation","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"${workingDir}","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_ENV","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"environment id","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"local","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_ENV_PATH","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"path items to append to path used for cli tests","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"[]","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_HEADLESS","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"run headless mode","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_JSON_SCHEMAS_DIR","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"url of directory containing JSON schemas","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"WEBTAU_MAX_REDIRECTS","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"Maximum number of redirects to follow for an HTTP call","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"20","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_NO_COLOR","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"disable ANSI colors","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_NUMBER_OF_THREADS","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"number of threads on which to run test files (one file per thread), -1 will use as many threads as there are files","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_OPEN_API_IGNORE_ADDITIONAL_PROPERTIES","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"ignore additional OpenAPI properties","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_OPEN_API_SPEC_URL","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"url of OpenAPI 2 spec against which to validate http calls","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"WEBTAU_REMOVE_WEBTAU_FROM_USER_AGENT","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"By default webtau appends webtau and its version to the user-agent, this disables that part","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"false","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_REPORT_PATH","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"report file path","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"${workingDir}/webtau.report.html","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_STALE_ELEMENT_RETRY","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"number of times to automatically retry for stale element actions","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"5","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_URL","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"base url for application under test","type":"SimpleText"}]}],null],[[{"type":"Paragraph","content":[{"text":"WEBTAU_USER_AGENT","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User agent to send on HTTP requests","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"webtau/null","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_VERBOSITY_LEVEL","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"output verbosity level. 0 - no output; 1 - test names; 2 - first level steps; etc","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2147483647","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_WAIT_TIMEOUT","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"wait timeout in milliseconds","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"5000","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_WINDOW_HEIGHT","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"browser window height","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"800","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_WINDOW_WIDTH","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"browser window width","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1000","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"WEBTAU_WORKING_DIR","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"logical working dir","type":"SimpleText"}]}],null]]},"type":"Table"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"Configuration","pageTitle":"Options","pageMeta":{},"fileName":"options","dirName":"configuration","pageSectionIdTitles":[{"title":"CLI and configuration file options","id":"cli-and-configuration-file-options"},{"title":"Environment variable options","id":"environment-variable-options"}]}},{"type":"Page","content":[{"title":"Lazy Resource","id":"lazy-resource","type":"Section","content":[{"type":"Paragraph","content":[{"text":"One of the benefits of separating one CRUD ","type":"SimpleText"},{"code":"scenario","type":"InlinedCode"},{"text":" into multiple is to be able to run one test at a time.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"In order to do it we will use ","type":"SimpleText"},{"code":"createLazyResource","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest.springboot\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\ndef customerPayload = [firstName: \"FN\", lastName: \"LN\"]\n\ndef customer = createLazyResource(\"customer\") { // lazy resource to be created on the first access\n    def id = http.post(\"/customers\", customerPayload) {\n        return id\n    }\n\n    return new Customer(id: id, url: \"/customers/${id}\") // definition is below\n}\n\nscenario(\"customer create\") {\n    customer.id.should != null // accessing resource for the first time will trigger POST (in this example)\n}\n\nscenario(\"customer read\") {\n    http.get(customer.url) { // convenient re-use of url defined above\n        body.should == customerPayload\n    }\n}\n\nscenario(\"customer update\") {\n    def changedLastName = \"NLN\"\n    http.put(customer.url, [*:customerPayload, lastName: changedLastName]) {\n        lastName.should == changedLastName\n    }\n\n    http.get(customer.url) {\n        lastName.should == changedLastName\n    }\n}\n\nscenario(\"customer delete\") {\n    http.delete(customer.url) {\n        statusCode.should == 204\n    }\n\n    http.get(customer.url) {\n        statusCode.should == 404\n    }\n}","commentsType":"inline","title":"CRUD separated","type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.rest.springboot\n\nclass Customer {\n    Number id\n    String url // store url of the created entity\n}","commentsType":"inline","title":"Customer lazy resource","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: to run one scenario at a time use ","type":"SimpleText"},{"code":"sscenario","type":"InlinedCode"},{"text":" (additional ","type":"SimpleText"},{"code":"s","type":"InlinedCode"},{"text":" in front). ","type":"SimpleText"},{"url":"/webtau/groovy-specific-runner/selective-run","isFile":false,"type":"Link","content":[{"text":"Read more","type":"SimpleText"}]}]}]},{"title":"Report","id":"report","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As you can see in the report below, each ","type":"SimpleText"},{"code":"CRUD","type":"InlinedCode"},{"text":" operation has its own entry. If you follow this pattern, then you","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can filter tests by ","type":"SimpleText"},{"code":"create","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"update","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"read","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"delete","type":"InlinedCode"},{"text":" to streamline investigation.","type":"SimpleText"}]},{"fit":true,"imageSrc":"/webtau/doc-artifacts/reports/report-crud-separated-http-calls.png","timestamp":1584552018559,"shapes":[],"width":2400.0,"height":1594.0,"type":"AnnotatedImage"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"CRUD Separated","pageMeta":{},"fileName":"CRUD-separated","dirName":"REST","pageSectionIdTitles":[{"title":"Lazy Resource","id":"lazy-resource"},{"title":"Report","id":"report"}]}},{"type":"Page","content":[{"title":"Serial execution","id":"serial-execution","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The default mode for running tests is serially; in other words, scenario files are executed one after the other.","type":"SimpleText"}]}]},{"title":"Parallel execution","id":"parallel-execution","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Webtau supports executing tests in parallel.  In this mode, ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"scenario files","type":"SimpleText"}]},{"text":" are executed in parallel.  ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Individual","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"scenarios","type":"SimpleText"}]},{"text":" are still executed sequentially.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For large test suites, it is therefore advisable to create many small focused scenario files instead of few large files.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To enable parallel execution, specify the ","type":"SimpleText"},{"code":"numberOfThreads","type":"InlinedCode"},{"text":" configuration property either through the configuration file","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"or as a CLI parameter.  This property dictates the maximum number of threads on which to run tests.  Alternatively,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"set ","type":"SimpleText"},{"code":"numberOfThreads","type":"InlinedCode"},{"text":" to ","type":"SimpleText"},{"code":"-1","type":"InlinedCode"},{"text":" and webtau will use as many threads as there are scenario files.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: scenario file execution order is not guaranteed.","type":"SimpleText"}]}]},{"title":"Scenario discovery","id":"scenario-discovery","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Webtau via CLI or Maven plugin supports a number of methods for specifying and discovering scenarios.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The simplest way is to list the scenario files explicitly:","type":"SimpleText"}]},{"tabsContent":[{"name":"CLI","content":[{"command":"webtau scenarios/rest/simpleGet.groovy scnearios/rest/simplePost.groovy","paramsToHighlight":[],"type":"CliCommand"}]},{"name":"Maven","content":[{"lang":"xml","snippet":"<plugin>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-maven-plugin</artifactId>\n    <version>1.21-SNAPSHOT</version>\n    <executions>\n        <execution>\n            <phase>test</phase>\n            <goals>\n                <goal>run</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <workingDir>${project.basedir}/src/main/groovy</workingDir>\n        <env>integration</env>\n        <url>http://optional-base-url</url>\n        <tests>\n            <directory>${project.basedir}/src/main/groovy</directory>\n            <includes>\n                <include>scenarios/simpleGet.groovy</include>\n                <include>scenarios/simplePost.groovy</include>\n            </includes>\n        </tests>\n    </configuration>\n</plugin>","type":"Snippet"}]}],"type":"Tabs"},{"type":"Paragraph","content":[{"text":"Wildcard matching is also supported.  In the CLI version this is normal shell [glob](https://en.wikipedia.org/wiki/Glob_(programming)","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and in Maven it's a standard Maven file inclusion block:","type":"SimpleText"}]},{"tabsContent":[{"name":"CLI","content":[{"command":"webtau scenarios/rest/simple*.groovy","paramsToHighlight":[],"type":"CliCommand"}]},{"name":"Maven","content":[{"lang":"xml","snippet":"<plugin>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-maven-plugin</artifactId>\n    <version>1.21-SNAPSHOT</version>\n    <executions>\n        <execution>\n            <phase>test</phase>\n            <goals>\n                <goal>run</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <workingDir>${project.basedir}/src/main/groovy</workingDir>\n        <env>integration</env>\n        <url>http://optional-base-url</url>\n        <tests>\n            <directory>${project.basedir}/src/main/groovy</directory>\n            <includes>\n                <include>scenarios/simple*.groovy</include>\n            </includes>\n        </tests>\n    </configuration>\n</plugin>","type":"Snippet"}]}],"type":"Tabs"},{"type":"Paragraph","content":[{"text":"It is also possible to include a set of base directories and webtau will then find all ","type":"SimpleText"},{"code":"*.groovy","type":"InlinedCode"},{"text":" files within","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"them, recursively:","type":"SimpleText"}]},{"tabsContent":[{"name":"CLI","content":[{"command":"webtau scenarios/rest","paramsToHighlight":[],"type":"CliCommand"}]},{"name":"Maven","content":[{"lang":"xml","snippet":"<plugin>\n    <groupId>org.testingisdocumenting.webtau</groupId>\n    <artifactId>webtau-maven-plugin</artifactId>\n    <version>1.21-SNAPSHOT</version>\n    <executions>\n        <execution>\n            <phase>test</phase>\n            <goals>\n                <goal>run</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <workingDir>${project.basedir}/src/main/groovy</workingDir>\n        <env>integration</env>\n        <url>http://optional-base-url</url>\n        <tests>\n            <directory>${project.basedir}/src/main/groovy</directory>\n        </tests>\n    </configuration>\n</plugin>","type":"Snippet"}]}],"type":"Tabs"},{"type":"Paragraph","content":[{"text":"In this mode, the HTML report that webtau generates will show paths to the files relative to the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"requested directories.","type":"SimpleText"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"Test Execution","pageMeta":{},"fileName":"test-execution","dirName":"REST","pageSectionIdTitles":[{"title":"Serial execution","id":"serial-execution"},{"title":"Parallel execution","id":"parallel-execution"},{"title":"Scenario discovery","id":"scenario-discovery"}]}},{"type":"Page","content":[{"title":"Base URL","id":"base-url","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Robust tests don't specify the full URL of an application under test.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Instead you only pass a relative URL to functions like ","type":"SimpleText"},{"code":"open","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('simple open') {\n    browser.open(\"/search\")\n    $('#welcome').should == 'welcome to super search'\n}","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Define base URL portion either inside a ","type":"SimpleText"},{"code":"webtau.cfg","type":"InlinedCode"},{"text":" file","type":"SimpleText"}]},{"lang":"groovy","snippet":"url = \"http://localhost:8180\"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"or pass as a command line argument ","type":"SimpleText"},{"code":"--url=http://...","type":"InlinedCode"}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Basic Configuration","pageMeta":{},"fileName":"basic-configuration","dirName":"UI","pageSectionIdTitles":[{"title":"Base URL","id":"base-url"}]}},{"type":"Page","content":[{"title":"Validation","id":"validation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Webtau supports validation of objects against ","type":"SimpleText"},{"url":"https://json-schema.org/","isFile":false,"type":"Link","content":[{"text":"JSON Schema","type":"SimpleText"}]},{"text":".  It is possible to validate either","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the entire body or just a specific field with the ","type":"SimpleText"},{"code":"complyWithSchema","type":"InlinedCode"},{"text":" matcher as shown in the two examples below:","type":"SimpleText"}]},{"lang":"groovy","snippet":"http.get(\"/weather\") {\n    body.should complyWithSchema('valid-schema.json')\n}","title":"Validate entire body against JSON schema","type":"Snippet"},{"lang":"groovy","snippet":"http.get(\"/city/London\") {\n    weather.should complyWithSchema('valid-schema.json')\n}","title":"Validate specific field against JSON schema","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Both examples above validate against the following schema:","type":"SimpleText"}]},{"title":"Correct schema for the example above","data":{"type":"object","required":["temperature"],"properties":{"temperature":{"type":"integer"}}},"paths":[],"type":"Json"}]},{"title":"Error messages","id":"error-messages","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Using the first example above, an invalid schema will generate an error similar to:","type":"SimpleText"}]},{"lang":"","snippet":"invalid schema (examples/scenarios/rest/jsonSchema/validateSchema.groovy)\n> executing HTTP GET http://localhost:8080/weather\n  X failed expecting body to comply with schema invalid-schema.json : \n      body expected to comply with schema invalid-schema.json\n      [#: required key [anotherField] not found, #/temperature: expected type: Boolean, found: Integer]\n{\n  \"temperature\": 88\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The schema used in validation to generate this error is as follows:","type":"SimpleText"}]},{"title":"Incorrect schema for the example above","data":{"type":"object","required":["temperature","anotherField"],"properties":{"temperature":{"type":"boolean"},"anotherField":{"type":"string"}}},"paths":[],"type":"Json"}]},{"title":"Configuration","id":"configuration","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The path to the schema file specified in ","type":"SimpleText"},{"code":"complyWithSchema","type":"InlinedCode"},{"text":" can be relative or absolute.  If it's relative, it'll be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"relative to the ","type":"SimpleText"},{"code":"jsonSchemasDir","type":"InlinedCode"},{"text":" specified in configuration and if not specified then relative to working directory.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"For example:","type":"SimpleText"}]},{"lang":"cfg","snippet":"url = \"http://localhost:8180\"\njsonSchemasDir = 'schemas'","title":"Configuration","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"REST","pageTitle":"JSON Schema","pageMeta":{},"fileName":"JSON-schema","dirName":"REST","pageSectionIdTitles":[{"title":"Validation","id":"validation"},{"title":"Error messages","id":"error-messages"},{"title":"Configuration","id":"configuration"}]}},{"type":"Page","content":[{"title":"Access Local Storage","id":"access-local-storage","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To access local storage use ","type":"SimpleText"},{"code":"browser.localStorage","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Lets consider a simple web page that displays a value from a local storage.","type":"SimpleText"}]},{"lang":"html","snippet":"<div id=\"favorite-color\"> \n</div> \n<script>\n    const element = document.getElementById('favorite-color');\n    element.innerHTML = localStorage.getItem('favoriteColor');\n</script>","title":"Sample web page","type":"Snippet"},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario(\"local storage api\") {\n    browser.open('/local-storage')\n    browser.localStorage.setItem('favoriteColor', 'clean')\n\n    def color = $('#favorite-color')\n\n    browser.reopen('/local-storage')\n    color.should == 'clean'\n\n    browser.localStorage.clear()\n    browser.reopen('/local-storage')\n    color.should == ''\n}","title":"Setting storage after opening page","type":"Snippet"},{"lang":"java","snippet":"public String getItem(String key)\npublic void setItem(String key, String value)\npublic String removeItem(String key)\npublic void clear()\npublic int size()","entries":["getItem","setItem","removeItem","clear","size"],"title":"Local Storage methods","signatureOnly":true,"type":"Snippet"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"UI","pageTitle":"Local Storage","pageMeta":{},"fileName":"local-storage","dirName":"UI","pageSectionIdTitles":[{"title":"Access Local Storage","id":"access-local-storage"}]}},{"type":"Page","content":[{"title":"Data Focused Tests","id":"data-focused-tests","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Webtau simplifies writing REST and UI tests. But if the logic behind REST and UI is written in JVM based language,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"webtau can also simplify testing the logic directly.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Webtau makes tests to be focused on input and output by reducing boilerplate.","type":"SimpleText"}]}]},{"title":"Simplified Input Preparation","id":"simplified-input-preparation","type":"Section","content":[{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"@Test\nvoid \"diversified teams should have various levels and time at company\"() {\n    def employeeData = [ \"id\"    | \"level\" | \"monthsAtCompany\"] {\n                       _______________________________________\n                         \"bob\"   |       2 |  12\n                         \"smith\" |       4 |  34\n                         \"john\"  |       3 |  20 }\n\n    def diversified = peopleManagement.diversityLevel(employees(employeeData))\n    diversified.should == true\n}","entry":"diversified teams should have various levels and time at company","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"@Test\npublic void diversifiedTeamsShouldHaveVariousLevelsAndTimeAtCompany() {\n    TableData employeeData = table(     \"id\", \"level\", \"monthsAtCompany\").values(\n                                       \"bob\",       2, 12,\n                                     \"smith\",       4, 34,\n                                      \"john\",       3, 20);\n\n    boolean diversified = peopleManagement.diversityLevel(employees(employeeData));\n    actual(diversified).should(equal(true));\n}","entry":"diversifiedTeamsShouldHaveVariousLevelsAndTimeAtCompany","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Simplified Output Validation","id":"simplified-output-validation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Complex data and assertions are first class citizens.","type":"SimpleText"}]},{"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"@Test\nvoid \"provides access to new joiners\"() {\n    TableData allEmployees = [\"id\"    | \"level\" | \"monthsAtCompany\"] {\n                              ______________________________________\n                              \"alice\" |       5 |  1\n                              \"bob\"   |       3 |  0\n                              \"smith\" |       4 |  1\n                              \"cat\"   |       4 |  0 }\n\n    addEmployees(allEmployees)\n\n    dao.thisWeekJoiners().should == [\"id\"    | \"level\" | \"monthsAtCompany\"] {\n                                     ______________________________________\n                                     \"bob\"   | 3       | 0\n                                     \"cat\"   | 4       | 0  }\n}","entry":"provides access to new joiners","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"@Test\npublic void providesAccessToNewJoiners() {\n    TableData allEmployees = table(    \"id\", \"level\", \"monthsAtCompany\",\n                                    ____________________________________,\n                                    \"alice\",       5,   1,\n                                      \"bob\",       3,   0,\n                                    \"smith\",       4,   1,\n                                      \"cat\",       4,   0);\n    addEmployees(allEmployees);\n\n    actual(dao.thisWeekJoiners()).should(equal(table(   \"*id\", \"level\", \"monthsAtCompany\",\n                                                        ____________________________________,\n                                                        \"bob\",       3,   0,\n                                                        \"cat\",       4,   0)));\n}","entry":"providesAccessToNewJoiners","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: The examples above assumes ","type":"SimpleText"},{"code":"import static org.testingisdocumenting.webtau.WebTauCore.*","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"import static org.testingisdocumenting.webtau.WebTauDsl.*","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]}],"type":"Tabs"},{"type":"Paragraph","content":[{"text":"For more ","type":"SimpleText"},{"code":"TableData","type":"InlinedCode"},{"text":" features, check ","type":"SimpleText"},{"url":"/webtau/reference/table-data","isFile":false,"type":"Link","content":[{"text":"reference page","type":"SimpleText"}]}]}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"JVM Business Logic","pageTitle":"Data Driven","pageMeta":{},"fileName":"data-driven","dirName":"JVM-business-logic","pageSectionIdTitles":[{"title":"Data Focused Tests","id":"data-focused-tests"},{"title":"Simplified Input Preparation","id":"simplified-input-preparation"},{"title":"Simplified Output Validation","id":"simplified-output-validation"}]}},{"type":"Page","content":[{"title":"Standard Header","id":"standard-header","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Standard headers like ","type":"SimpleText"},{"code":"Content-Type","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Accept","type":"InlinedCode"},{"text":" are set on your behalf.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"When payload content is present then values are based on the content type you are sending.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"When no payload is present, it defaults to ","type":"SimpleText"},{"code":"application/json","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"title":"Common Header","id":"common-header","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If each http request requires the same header you can specify that header using ","type":"SimpleText"},{"code":"httpHeaderProvider","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Common example is specifying authentication header.","type":"SimpleText"}]},{"lang":"cfg","snippet":"import scenarios.rest.headers.auth.Auth\n\nurl = \"http://localhost:8080\"\n\nhttpHeaderProvider = Auth.&authHeader","title":"webtau.cfg","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Where ","type":"SimpleText"},{"code":"Auth.&authHeader","type":"InlinedCode"},{"text":" is implemented as follows:","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.rest.headers.auth\n\nimport org.testingisdocumenting.webtau.console.ConsoleOutputs\nimport org.testingisdocumenting.webtau.http.HttpHeader\n\nclass Auth {\n    static HttpHeader authHeader(String fullUrl, String url, HttpHeader original) {\n        ConsoleOutputs.out('auth header injection point')\n        return original.merge([Authorization: 'Bearer <token>'])\n    }\n}","title":"scenarios/rest/headers/auth/Auth.groovy","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This removes implementation details from your tests and makes them less brittle.","type":"SimpleText"}]}]},{"title":"Explicit Header","id":"explicit-header","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To explicitly set header pass ","type":"SimpleText"},{"code":"http.header(values)","type":"InlinedCode"},{"text":" as an additional parameter.","type":"SimpleText"}]},{"lang":"groovy","snippet":"http.get(\"/end-point\", http.header('Accept', 'application/octet-stream')) {\n    // assertions go here\n}\n\nhttp.get(\"/end-point\", [queryParam1: 'queryParamValue1'],\n        http.header('Accept', 'application/octet-stream')) {\n    // assertions go here\n}\n\nhttp.patch(\"/end-point\", http.header('Accept', 'application/octet-stream'),\n        [fileId: 'myFile']) {\n    // assertions go here\n}\n\nhttp.post(\"/end-point\", http.header('Accept', 'application/octet-stream'),\n        [fileId: 'myFile']) {\n    // assertions go here\n}\n\nhttp.put(\"/end-point\", http.header('Accept', 'application/octet-stream'),\n        [fileId: 'myFile', file: sampleFile]) {\n    // assertions go here\n}\n\nhttp.delete(\"/end-point\", http.header('Custom-Header', 'special-value'))","entry":"explicit header passing example","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Additionally ","type":"SimpleText"},{"code":"http.header","type":"InlinedCode"},{"text":" accepts values as a map.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def varArgHeader = http.header(\n        'My-Header1', 'Value1',\n        'My-Header2', 'Value2')\n\ndef mapBasedHeader = http.header([\n        'My-Header1': 'Value1',\n        'My-Header2': 'Value2'])\n\nassert varArgHeader == mapBasedHeader","entry":"header creation","bodyOnly":true,"type":"Snippet"}]},{"title":"Mime Type Combined With Payload","id":"mime-type-combined-with-payload","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"http.body","type":"InlinedCode"},{"text":" to combine ","type":"SimpleText"},{"code":"Content-Type","type":"InlinedCode"},{"text":" and payload.","type":"SimpleText"}]},{"lang":"groovy","snippet":"def content = binaryFile('path')\nhttp.post(\"/end-point\", http.body(\"application/octet-stream\", content)) {\n    // assertions go here\n}","title":"Combined type and payload","entry":"explicit binary mime types combined with request body","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"If you need a standard type consider using","type":"SimpleText"}]},{"lang":"groovy","snippet":"def content = binaryFile('path')\nhttp.post(\"/end-point\", http.application.octetStream(content)) {\n    // assertions go here\n}","title":"Binary content shortuct","entry":"post implicit binary mime types combined with request body","bodyOnly":true,"type":"Snippet"},{"lang":"groovy","snippet":"def content = 'text content'\nhttp.post(\"/end-point\", http.text.plain(content)) {\n    // assertions go here\n}","title":"Text content shortcut","entry":"implicit text mime types combined with request body","bodyOnly":true,"type":"Snippet"}]},{"title":"Response Header","id":"response-header","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To validate values from response header use ","type":"SimpleText"},{"code":"header","type":"InlinedCode"},{"text":" object.","type":"SimpleText"}]},{"lang":"groovy","snippet":"http.post(\"/end-point\") {\n    header.location.should == 'http://www.example.org/url/23'\n    header['Location'].should == 'http://www.example.org/url/23'\n\n    header.contentLocation.should == '/url/23'\n    header['Content-Location'].should == '/url/23'\n\n    header.contentLength.shouldBe > 300\n    header['Content-Length'].shouldBe > 300\n}","entry":"header assertion with shortcut","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"At the moment only ","type":"SimpleText"},{"code":"location","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"contentLocation","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"contentLength","type":"InlinedCode"},{"text":" have camelCase shortcuts.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"All the other header values you need to use ","type":"SimpleText"},{"code":"['Header-Name']","type":"InlinedCode"},{"text":" syntax.","type":"SimpleText"}]}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"REST","pageTitle":"Headers","pageMeta":{},"fileName":"headers","dirName":"REST","pageSectionIdTitles":[{"title":"Standard Header","id":"standard-header"},{"title":"Common Header","id":"common-header"},{"title":"Explicit Header","id":"explicit-header"},{"title":"Mime Type Combined With Payload","id":"mime-type-combined-with-payload"},{"title":"Response Header","id":"response-header"}]}},{"type":"Page","content":[{"title":"Scenarios","id":"scenarios","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To document how to use a User Interface we often take screenshots and annotate them.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"At the same time we need to make sure that documented scenario works as advertised.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"With UI testing we can validate scenarios and at the same time capture screenshots with automatically placed annotations.","type":"SimpleText"}]}]},{"title":"Capturing Screenshots With Annotations","id":"capturing-screenshots-with-annotations","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To capture screenshots use ","type":"SimpleText"},{"code":"browser.doc[.withAnnotations].capture","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"groovy","snippet":"search.submit(\"search this\")\n\nbrowser.doc.withAnnotations(\n        browser.doc.badge(search.box),\n        browser.doc.badge(search.results)).capture('search')","title":"screenshot capture with badge annotations","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The result of the ","type":"SimpleText"},{"code":"capture","type":"InlinedCode"},{"text":" command is two files: actual screenshot and ","type":"SimpleText"},{"code":"annotations.json","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"json","snippet":"{\n  \"shapes\" : [ {\n    \"id\" : \"circle1\",\n    \"type\" : \"circle\",\n    \"text\" : \"1\",\n    \"color\" : \"a\",\n    \"x\" : 80,\n    \"y\" : 33,\n    \"r\" : 20\n  }, {\n    \"id\" : \"circle2\",\n    \"type\" : \"circle\",\n    \"text\" : \"2\",\n    \"color\" : \"a\",\n    \"x\" : 500,\n    \"y\" : 117,\n    \"r\" : 20\n  } ],\n  \"pixelRatio\" : 2\n}","title":"search.json","type":"Snippet"},{"type":"Paragraph","content":[{"url":"https://github.org/testingisdocumenting/webtau","isFile":false,"type":"Link","content":[{"text":"Webtau","type":"SimpleText"}]},{"text":" documentation site is generated using ","type":"SimpleText"},{"url":"https://github.com/testingisdocumenting/znai","isFile":false,"type":"Link","content":[{"text":"Znai","type":"SimpleText"}]},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://github.com/twosigma/znai","isFile":false,"type":"Link","content":[{"text":"Znai","type":"SimpleText"}]},{"text":" has ","type":"SimpleText"},{"code":"include-image","type":"InlinedCode"},{"text":" plugin that supports annotations format generated by ","type":"SimpleText"},{"code":"capture","type":"InlinedCode"},{"text":" command.","type":"SimpleText"}]},{"lang":"","snippet":":include-image: doc-artifacts/search.png {fit: true, annotationsPath: \"doc-artifacts/search.json\"}\n","lineNumber":"","type":"Snippet"},{"annotationsPath":"doc-artifacts/search.json","imageSrc":"/webtau/doc-artifacts/search.png","timestamp":1584552020801,"shapes":[{"id":"circle1","type":"circle","text":"1","color":"a","x":80,"y":33,"r":20},{"id":"circle2","type":"circle","text":"2","color":"a","x":500,"y":117,"r":20}],"width":1000.0,"height":252.0,"type":"AnnotatedImage"}]},{"title":"Annotation Types","id":"annotation-types","type":"Section","content":[{"lang":"groovy","snippet":"search.submit(\"search this\")\n\nbrowser.doc.withAnnotations(\n        browser.doc.badge(search.box),\n        browser.doc.badge(search.results)).capture('search')","title":"badges","type":"Snippet"},{"annotationsPath":"doc-artifacts/search.json","imageSrc":"/webtau/doc-artifacts/search.png","timestamp":1584552020815,"shapes":[{"id":"circle1","type":"circle","text":"1","color":"a","x":80,"y":33,"r":20},{"id":"circle2","type":"circle","text":"2","color":"a","x":500,"y":117,"r":20}],"width":1000.0,"height":252.0,"type":"AnnotatedImage"},{"lang":"groovy","snippet":"browser.doc.withAnnotations(\n        browser.doc.highlight(search.box),\n        browser.doc.cover(search.results, \"covering text\")).capture('search-highlight-cover')","title":"cover and highlight","type":"Snippet"},{"annotationsPath":"doc-artifacts/search-highlight-cover.json","imageSrc":"/webtau/doc-artifacts/search-highlight-cover.png","timestamp":1584552020832,"shapes":[{"id":"highlight3","type":"highlight","text":"","color":"a","x":24,"y":24,"width":112,"height":19},{"id":"rectangle4","type":"rectangle","text":"covering text","color":"a","x":28,"y":99,"width":944,"height":36}],"width":1000.0,"height":252.0,"type":"AnnotatedImage"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"UI","pageTitle":"Documentation","pageMeta":{},"fileName":"documentation","dirName":"UI","pageSectionIdTitles":[{"title":"Scenarios","id":"scenarios"},{"title":"Capturing Screenshots With Annotations","id":"capturing-screenshots-with-annotations"},{"title":"Annotation Types","id":"annotation-types"}]}},{"type":"Page","content":[{"title":"Skipping Tests on Condition","id":"skipping-tests-on-condition","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"onlyWhen","type":"InlinedCode"},{"text":" if you need to skip tests based on a condition.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nString emailHost = cfg.emailHost\n\nonlyWhen('email server is internal', { -> emailHost.contains('internal.server')}) {\n    scenario('confirmation emails should be sent') {\n        // ...\n        http.get(emailHost) {\n            subjects.should contain('my message')\n        }\n    }\n}","title":"Conditional tests skip","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Tests will still appear as part of your report but will be marked as skipped.","type":"SimpleText"}]}]},{"title":"Skipping Tests Based on Env","id":"skipping-tests-based-on-env","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"onlyForEnv","type":"InlinedCode"},{"text":" shortcut if you need to skip tests for certain environment.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nonlyForEnv('experimental') {\n    scenario('this scenario will only be executed in \"experimental\" env') {\n        http.get('/new-endpoint') {\n            price.shouldBe > 0\n        }\n    }\n}","title":"Environment specific tests","type":"Snippet"}]},{"title":"Custom Shortcuts","id":"custom-shortcuts","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Consider creating your project specific shortcuts to avoid boilerplate.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Here is an example of ","type":"SimpleText"},{"code":"onlyForEnv","type":"InlinedCode"},{"text":" shortcut definition.","type":"SimpleText"}]},{"lang":"groovy","snippet":"static void onlyForEnv(String env, Closure registrationCode) {\n    onlyWhen(\"only for <$env> environment\",\n            { -> getCfg().getEnv() == env },\n            registrationCode)\n}","entry":"onlyForEnv","title":"Custom shortcut","type":"Snippet"}]},{"title":"Unconditionally Skipping Tests","id":"unconditionally-skipping-tests","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Instead of ","type":"SimpleText"},{"code":"scenario","type":"InlinedCode"},{"text":", use ","type":"SimpleText"},{"code":"dscenario","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"disabledScenario","type":"InlinedCode"},{"text":" to always skip a test.  This is analogous to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Junit's ","type":"SimpleText"},{"code":"@Ignore","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"@Disabled","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.concept\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\ndscenario('do not execute this scenario') {\n    http.get('/new-endpoint') {\n        price.shouldBe > 0\n    }\n}\n\ndisabledScenario('do not execute this scenario either') {\n    http.get('/new-endpoint') {\n        price.shouldBe > 0\n    }\n}","title":"Disable tests","type":"Snippet"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"Groovy Specific Runner","pageTitle":"Skipping Tests","pageMeta":{},"fileName":"skipping-tests","dirName":"groovy-specific-runner","pageSectionIdTitles":[{"title":"Skipping Tests on Condition","id":"skipping-tests-on-condition"},{"title":"Skipping Tests Based on Env","id":"skipping-tests-based-on-env"},{"title":"Custom Shortcuts","id":"custom-shortcuts"},{"title":"Unconditionally Skipping Tests","id":"unconditionally-skipping-tests"}]}},{"type":"Page","content":[{"title":"Imports to use","id":"imports-to-use","type":"Section","content":[{"lang":"groovy","snippet":"import static org.testingisdocumenting.webtau.WebTauGroovyDsl.*","includeRegexp":"import.*Dsl","title":"Single import to use","type":"Snippet"}]},{"title":"Response Mapping","id":"response-mapping","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Identifiers inside validation closure are automatically mapped to a response body.","type":"SimpleText"}]},{"meta":{"rightSide":true},"type":"EmptyBlock"},{"title":"object response","meta":{"rightSide":false},"data":{"id":"id1","k1":"v1","k2":"v2"},"paths":[],"type":"Json"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point-simple-object\") {\n    k1.should == 'v1'\n}","entry":"simple object mapping example","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/end-point-simple-object\", (header, body) -> {\n    body.get(\"k1\").should(equal(\"v1\"));\n});","entry":"simpleObjectMappingExample","bodyOnly":true,"type":"Snippet"}]}],"type":"Tabs"},{"type":"Paragraph","content":[{"text":"List responses are handled by using index chain","type":"SimpleText"}]},{"meta":{"rightSide":true},"type":"EmptyBlock"},{"title":"list response","data":[{"id":"id1","k1":"v1","k2":"v2"}],"paths":[],"type":"Json"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point-simple-list\") {\n    body[0].k1.should == 'v1'\n}","entry":"simple list mapping example","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: Groovy API implicitly assumes ","type":"SimpleText"},{"code":"body","type":"InlinedCode"},{"text":", but if you need to deal with array response you need to access values using ","type":"SimpleText"},{"code":"body","type":"InlinedCode"},{"text":" explicitly.","type":"SimpleText"}]}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/end-point-simple-list\", (header, body) -> {\n    body.get(0).get(\"k1\").should(equal(\"v1\"));\n});","entry":"simpleListMappingExample","bodyOnly":true,"type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Should and Should Not","id":"should-and-should-not","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Matchers in webtau are triggered with ","type":"SimpleText"},{"code":"should","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"shouldNot","type":"InlinedCode"},{"text":" keywords.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Additionally ","type":"SimpleText"},{"code":"shouldBe","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"shouldNotBe","type":"InlinedCode"},{"text":" alias keywords are available to make certain matcher combinations easier to read.","type":"SimpleText"}]},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/example\") {\n    year.shouldNot == 2000\n    year.should != 2000  // alternative shortcut\n    genres.should contain('RPG')\n    rating.shouldBe > 7\n}","entry":"matchers basic example","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/example\", (header, body) -> {\n    body.get(\"year\").shouldNot(equal(2000));\n    body.get(\"genres\").should(contain(\"RPG\"));\n    body.get(\"rating\").shouldBe(greaterThan(7));\n});","entry":"matchersBasicExample","bodyOnly":true,"type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Equality","id":"equality","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Webtau defines its own set of equality rules to simplify testing.","type":"SimpleText"}]},{"meta":{"rightSide":true},"type":"EmptyBlock"},{"title":"response","pathsFile":"doc-artifacts/end-point-object-equality-matchers/paths.json","data":{"id":10,"price":100,"amount":30,"list":[1,2,3],"object":{"k1":"v1","k2":"v2","k3":"v3"},"complexList":[{"id":"id1","k1":"v1","k2":30},{"id":"id2","k1":"v11","k2":40}]},"paths":["root.id","root.amount","root.list[0]","root.list[1]","root.list[2]","root.object.k1","root.object.k3","root.complexList[0].k1","root.complexList[0].k2","root.complexList[1].k1","root.complexList[1].k2"],"type":"Json"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point\") {\n    id.should != 0\n    amount.should == 30\n\n    list.should == [1, 2, 3]\n\n    object.k1.should == ~/v\\d/ // regular expression matching\n\n    object.should == [k1: 'v1', k3: 'v3'] // matching only specified fields and can be nested multiple times\n\n    complexList.should == [\"k1\"   | \"k2\"] { // matching only specified fields, but number of entries must be exact\n                           ________________\n                            \"v1\"  | 30\n                            \"v11\" | 40 }\n}\n\nhttp.doc.capture(\"end-point-object-equality-matchers\")","entry":"equality matcher","bodyOnly":true,"commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/end-point\", (header, body) -> {\n    body.get(\"id\").shouldNot(equal(0));\n    body.get(\"amount\").should(equal(30));\n\n    body.get(\"list\").should(equal(Arrays.asList(1, 2, 3)));\n\n    body.get(\"object\").get(\"k1\").should(equal(\n            Pattern.compile(\"v\\\\d\"))); // regular expression matching\n\n    body.get(\"object\").should(equal(aMapOf(\n            \"k1\", \"v1\",\n            \"k3\", \"v3\"))); // matching only specified fields and can be nested multiple times\n\n    body.get(\"complexList\").should(equal(table(\"k1\" , \"k2\", // matching only specified fields, but number of entries must be exact\n                                              ________________,\n                                               \"v1\" ,  30,\n                                               \"v11\",  40)));\n});\n\nhttp.doc.capture(\"end-point-object-equality-matchers\");","entry":"equalityMatcher","bodyOnly":true,"commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point\") {\n    complexList.should == [ \"*id\" | \"k1\"  | \"k2\"] { // order agnostic key based match\n                           ________________________\n                            \"id2\" | \"v11\" | 40\n                            \"id1\" | \"v1\"  | 30 }\n}","entry":"equality matcher table keys","bodyOnly":true,"commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/end-point\", (header, body) -> {\n    body.get(\"complexList\").should(equal(table(\"*id\", \"k1\" , \"k2\", // order agnostic key based match\n                                               ________________,\n                                               \"id2\", \"v11\", 40,\n                                               \"id1\", \"v1\" , 30)));\n});","entry":"equalityMatcherTableKey","bodyOnly":true,"commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Greater/Less/Equal","id":"greaterlessequal","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"greaterThan","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"greaterThanOrEqual","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"lessThan","type":"InlinedCode"},{"text":", and ","type":"SimpleText"},{"code":"lessThanOrEqual","type":"InlinedCode"},{"text":" to assert numeric values.","type":"SimpleText"}]},{"meta":{"rightSide":true},"type":"EmptyBlock"},{"title":"response","pathsFile":"doc-artifacts/end-point-numbers-matchers/paths.json","data":{"id":10,"price":100,"amount":30,"list":[1,2,3]},"paths":["root.id","root.price","root.amount","root.list[1]"],"type":"Json"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point-numbers\") {\n    id.shouldBe > 0\n    price.shouldBe >= 100\n    amount.shouldBe < 150\n    list[1].shouldBe <= 2\n\n    id.shouldNotBe <= 0\n    price.shouldNotBe < 100\n    amount.shouldNotBe >= 150\n    list[1].shouldNotBe > 2\n}\n\nhttp.doc.capture(\"end-point-numbers-matchers\")","entry":"compare numbers with greater less matchers","bodyOnly":true,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: ","type":"SimpleText"},{"code":"Groovy","type":"InlinedCode"},{"text":" can use shortcuts ","type":"SimpleText"},{"code":">","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":">=","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"<","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"<=","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/end-point-numbers\", (header, body) -> {\n    body.get(\"id\").shouldBe(greaterThan(0));\n    body.get(\"price\").shouldBe(greaterThanOrEqual(100));\n    body.get(\"amount\").shouldBe(lessThan(150));\n    body.get(\"list\").get(1).shouldBe(lessThanOrEqual(2));\n\n    body.get(\"id\").shouldNotBe(lessThanOrEqual(0));\n    body.get(\"price\").shouldNotBe(lessThan(100));\n    body.get(\"amount\").shouldNotBe(greaterThanOrEqual(150));\n    body.get(\"list\").get(1).shouldNotBe(greaterThan(2));\n});\n\nhttp.doc.capture(\"end-point-numbers-matchers\");","entry":"compareNumbersWithGreaterLessMatchers","bodyOnly":true,"type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Contain","id":"contain","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"contain","type":"InlinedCode"},{"text":" when you cannot rely on order of values in a response.","type":"SimpleText"}]},{"meta":{"rightSide":true},"type":"EmptyBlock"},{"title":"response","pathsFile":"doc-artifacts/end-point-list-contain-matchers/paths.json","data":[{"id":"id1","k1":"v1","k2":"v2"},{"id":"id2","k1":"v11","k2":[10,20,30]}],"paths":["root[0].k1","root[0].k2","root[1].k2[0]","root[1].k2[1]","root[1].k2[2]"],"type":"Json"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point-list\") {\n    body.should contain([k1: 'v1', k2: 'v2'])\n    body[1].k2.shouldNot contain(22)\n}\n\nhttp.doc.capture(\"end-point-list-contain-matchers\")","entry":"contain matcher","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/end-point-list\", (header, body) -> {\n    body.should(contain(aMapOf(\n            \"k1\", \"v1\",\n            \"k2\", \"v2\")));\n    body.get(1).get(\"k2\").shouldNot(contain(22));\n});\n\nhttp.doc.capture(\"end-point-list-contain-matchers\");","entry":"containMatcher","bodyOnly":true,"type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Date and Time","id":"date-and-time","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can assert ","type":"SimpleText"},{"code":"actual","type":"InlinedCode"},{"text":" string against ","type":"SimpleText"},{"code":"LocalDate","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"ZonedDateTime","type":"InlinedCode"},{"text":". String will be automatically converted","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"using ISO formatter.","type":"SimpleText"}]},{"meta":{"rightSide":true},"type":"EmptyBlock"},{"title":"response","pathsFile":"doc-artifacts/end-point-dates-matchers/paths.json","data":{"id":54,"tradeDate":"2018-06-12","transactionTime":"2018-06-12T10:00:00+01:00:00","paymentSchedule":["2018-06-12","2018-07-10","2018-08-09","2018-09-12"]},"paths":["root.tradeDate","root.transactionTime","root.paymentSchedule[0]"],"type":"Json"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point-dates\") {\n    def expectedDate = LocalDate.of(2018, 6, 12)\n    def expectedTime = ZonedDateTime.of(expectedDate,\n        LocalTime.of(9, 0, 0),\n        ZoneId.of(\"UTC\"))\n\n    tradeDate.should == expectedDate\n    transactionTime.should == expectedTime\n    transactionTime.shouldBe >= expectedDate\n\n    paymentSchedule.should contain(expectedDate)\n}\n\nhttp.doc.capture(\"end-point-dates-matchers\")","entry":"working with dates","bodyOnly":true,"type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"http.get(\"/end-point-dates\", (header, body) -> {\n    LocalDate expectedDate = LocalDate.of(2018, 6, 12);\n    ZonedDateTime expectedTime = ZonedDateTime.of(expectedDate,\n            LocalTime.of(9, 0, 0),\n            ZoneId.of(\"UTC\"));\n\n    body.get(\"tradeDate\").should(equal(expectedDate));\n    body.get(\"transactionTime\").should(equal(expectedTime));\n    body.get(\"transactionTime\").shouldBe(greaterThanOrEqual(expectedDate));\n\n    body.get(\"paymentSchedule\").should(contain(expectedDate));\n});\n\nhttp.doc.capture(\"end-point-dates-matchers\");","entry":"workingWithDates","bodyOnly":true,"type":"Snippet"}]}],"type":"Tabs"}]},{"title":"Mixing Matchers","id":"mixing-matchers","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can use matchers in place of expected values to build a more complex expectation.","type":"SimpleText"}]},{"meta":{"rightSide":true},"type":"EmptyBlock"},{"title":"response","pathsFile":"doc-artifacts/end-point-mixing-matchers/paths.json","data":{"list":[1,2,3],"object":{"k1":"v1","k2":"v2","k3":"v3"},"complexList":[{"id":"id1","k1":"v1","k2":100},{"id":"id2","k1":"v11","k2":200}]},"paths":["root.list[0]","root.list[1]","root.object.k1","root.object.k3","root.complexList[0].k1","root.complexList[0].k2","root.complexList[1].k1","root.complexList[1].k2"],"type":"Json"},{"meta":{"rightSide":true},"tabsContent":[{"name":"Groovy","content":[{"lang":"groovy","snippet":"http.get(\"/end-point-mixed\") {\n    list.should contain(lessThanOrEqual(2)) // lessThanOrEqual will be matched against each value\n\n    object.should == [k1: 'v1', k3: ~/v\\d/] // regular expression match against k3\n\n    complexList[0].should == [k1: 'v1', k2: lessThan(120)] // lessThen match against k2\n\n    complexList[1].should == [\n        k1: notEqual('v1'), // any value but v1\n        k2: greaterThanOrEqual(120)]\n\n    complexList.should == [\"k1\"   | \"k2\"] {\n                          ___________________________\n                           ~/v\\d/ | lessThan(120)\n                            \"v11\" | greaterThan(150) } // using matchers as cell values\n}\n\nhttp.doc.capture(\"end-point-mixing-matchers\")","entry":"matchers combo","bodyOnly":true,"commentsType":"inline","type":"Snippet"}]},{"name":"Java","content":[{"lang":"java","snippet":"Pattern withNumber = Pattern.compile(\"v\\\\d\");\n\nhttp.get(\"/end-point-mixed\", (header, body) -> {\n    body.get(\"list\").should(contain(lessThanOrEqual(2))); // lessThanOrEqual will be matched against each value\n\n    body.get(\"object\").should(equal(aMapOf(\n            \"k1\", \"v1\",\n            \"k3\", withNumber))); // regular expression match against k3\n\n    body.get(\"complexList\").get(0).should(equal(aMapOf(\n            \"k1\", \"v1\",\n            \"k2\", lessThan(120)))); // lessThen match against k2\n\n    body.get(\"complexList\").get(1).should(equal(aMapOf(\n            \"k1\", notEqual(\"v1\"), // any value but v1\n            \"k2\", greaterThanOrEqual(120))));\n\n    TableData expected = table(\"k1\"        , \"k2\", // matching only specified fields, but number of entries must be exact\n                               ________________________________,\n                                withNumber , lessThan(120),\n                                \"v11\"      , greaterThan(150));\n\n    body.get(\"complexList\").should(equal(expected));\n});\n\nhttp.doc.capture(\"end-point-mixing-matchers\");","entry":"matchersCombo","bodyOnly":true,"commentsType":"inline","type":"Snippet"}]}],"type":"Tabs"}]}],"lastModifiedTime":1584487110000,"tocItem":{"sectionTitle":"REST","pageTitle":"Matchers","pageMeta":{"type":["two-sides"]},"fileName":"matchers","dirName":"REST","pageSectionIdTitles":[{"title":"Imports to use","id":"imports-to-use"},{"title":"Response Mapping","id":"response-mapping"},{"title":"Should and Should Not","id":"should-and-should-not"},{"title":"Equality","id":"equality"},{"title":"Greater/Less/Equal","id":"greaterlessequal"},{"title":"Contain","id":"contain"},{"title":"Date and Time","id":"date-and-time"},{"title":"Mixing Matchers","id":"mixing-matchers"}]}},{"type":"Page","content":[{"title":"Synchronization","id":"synchronization","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Many actions in a modern web page are asynchronous. User presses a button and a moment later a result appears.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"In modern web pages there is no full page reload and only a portion of a page will be changed.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If a test will try to assert a value after a user action, chances are assertion will fail since it will take time","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for a result to appear on a page.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Question: How do users know that their action is done and they can move on?","type":"SimpleText"}]}]},{"title":"Visible/Hidden Element","id":"visiblehidden-element","type":"Section","content":[{"type":"Paragraph","content":[{"text":"One way to deal with asynchronous pages is to wait for a feedback to appear or disappear.","type":"SimpleText"}]},{"lang":"groovy","snippet":"calculation.start()\n\ncalculation.feedback.waitTo beVisible()\ncalculation.results.should == [100, 230]","title":"beVisible matcher","type":"Snippet"}]},{"title":"Enabled/Disabled Element","id":"enableddisabled-element","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Disabled input box and buttons can be used as a user feedback as well.","type":"SimpleText"}]},{"lang":"groovy","snippet":"calculation.open()\n\ncalculation.input.waitTo beEnabled()\ncalculation.input.setValue(100)","title":"beEnabled matcher","type":"Snippet"}]},{"title":"Wait to match","id":"wait-to-match","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If presence/absence of an element is not important, you can directly to wait for a matcher to match.","type":"SimpleText"}]},{"lang":"groovy","snippet":"calculation.start()\ncalculation.results.waitTo == [100, 230]","title":"waitTo any matcher","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: any matcher that you can use with ","type":"SimpleText"},{"code":"should","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"shouldNot","type":"InlinedCode"},{"text":" can be used with ","type":"SimpleText"},{"code":"waitTo","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"waitToNot","type":"InlinedCode"}]}]},{"title":"Wait on url","id":"wait-on-url","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Another cue to use could be a url change after an action.","type":"SimpleText"}]},{"lang":"groovy","snippet":"browser.open('/resource-creation')\n\n$('#new').click()\nbrowser.url.ref.waitTo == 'created-id'","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: url exposes other parts that you can ","type":"SimpleText"},{"url":"/webtau/UI/navigation#assert-url","isFile":false,"type":"Link","content":[{"text":"read more about here","type":"SimpleText"}]}]}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Asynchronous Page","pageMeta":{},"fileName":"asynchronous-page","dirName":"UI","pageSectionIdTitles":[{"title":"Synchronization","id":"synchronization"},{"title":"Visible/Hidden Element","id":"visiblehidden-element"},{"title":"Enabled/Disabled Element","id":"enableddisabled-element"},{"title":"Wait to match","id":"wait-to-match"},{"title":"Wait on url","id":"wait-on-url"}]}},{"type":"Page","content":[{"title":"Lazy Element","id":"lazy-element","type":"Section","content":[{"type":"Paragraph","content":[{"text":"When you use ","type":"SimpleText"},{"code":"$('.css')","type":"InlinedCode"},{"text":" you create instance of ","type":"SimpleText"},{"code":"PageElement","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"PageElement","type":"InlinedCode"},{"text":" represent an element that is present or ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"will be present","type":"SimpleText"}]},{"text":" on a web page. It is safe to declare an element","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"before you open a browser or navigate to the page you need to test.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\ndef welcomeMessage = $('#welcome')\n\nscenario('simple open') {\n    browser.open(\"/search\")\n    welcomeMessage.should == 'welcome to super search'\n}","type":"Snippet"}]},{"title":"Lazy Value","id":"lazy-value","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Consider a simple search page. Enter value, hit enter, see results.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Here is simple test.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\nscenario('search by specific query') {\n    browser.open('/search')\n\n    $('#search-box').setValue('search this')\n    $('#search-box').sendKeys(\"\\n\")\n\n    $('#results .result').count.shouldBe > 1\n}","type":"Snippet"},{"type":"Paragraph","content":[{"text":"In the example ","type":"SimpleText"},{"code":"$('#results .result').count","type":"InlinedCode"},{"text":" represents the number of elements matching the css selector.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Let's extract it.","type":"SimpleText"}]},{"lang":"groovy","snippet":"package scenarios.ui\n\nimport static org.testingisdocumenting.webtau.WebTauGroovyDsl.*\n\ndef searchBox = $('#search-box')\ndef numberOfResults = searchBox.count\n\nscenario('search by specific query') {\n    browser.open('/search')\n\n    searchBox.setValue('search this')\n    searchBox.sendKeys(\"\\n\")\n\n    numberOfResults.shouldBe > 1\n}","type":"Snippet"}]}],"lastModifiedTime":1584486488000,"tocItem":{"sectionTitle":"UI","pageTitle":"Page Element And Value","pageMeta":{},"fileName":"page-element-and-value","dirName":"UI","pageSectionIdTitles":[{"title":"Lazy Element","id":"lazy-element"},{"title":"Lazy Value","id":"lazy-value"}]}}]